{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"INGenious Playwright Studio","text":"<p> INGenious enables easy and effective test automation for everyone. </p> <p>Developed and perfected by ING Bank for over 4 years of real-world usage, INGenious is now open-source and available to everyone. Designed to simplify and streamline test automation, this robust solution empowers teams of all sizes to achieve efficient, high-quality testing. By joining the global testing community, ING aims to collaborate, innovate, and elevate automated testing together.</p> <p>About</p> <p>It provides an easy and simple way to create highly reliable automated tests. It leverages the power of Playwright-Java and combines it with a user-friendly IDE which makes it a highly effective solution.</p> <p>The idea behind INGenious is to enable engineers, business analysts and even non-technical stakeholders to design high quality automated tests which focus on the business goals, without them having to worry about coding.</p>"},{"location":"#at-a-glance","title":"At a Glance","text":"<ul> <li> <p> Get Started in 5 minutes</p> <p>Download INGenious and get up and running in minutes. Create and execute your test cases in no time. </p> <p> Getting started</p> </li> <li> <p> No Code/Low Code</p> <p>INGenious comes with an intuitive IDE which makes test designing simple, easy and fun.</p> <p> IDE</p> </li> <li> <p> Browser Automation</p> <p>INGenious leverages the power of Playwright to create robust and stable browser tests. </p> <p> Browser Testing</p> </li> <li> <p> API Automation</p> <p>INGenious leverages Java HTTP Client to create API tests.</p> <p> API Testing</p> </li> <li> <p> Full Customization</p> <p>INGenious comes with a full blown <code>maven</code> project which can be easily customized based on project needs.</p> <p> Customizations</p> </li> <li> <p> Integrated BDD</p> <p>INGenious supports BDD way of working and comes with a built-in feature file editor.</p> <p> BDD Support</p> </li> <li> <p> Seamless Azure Test Plan Integration</p> <p>Test Case and Defect Management via Azure DevOps Test Plan can be done with INGenious very easily</p> <p> Test Plan</p> </li> <li> <p> Seamless Integration with any CI Tool</p> <p>INGenious is built in Java and has a strong command line interface. This makes integration with any CI tool, very easy.</p> <p> Integration</p> </li> <li> <p> Open Source, MIT</p> <p>INGenious  is licensed under MIT and available on GitHub</p> <p> License</p> </li> </ul>"},{"location":"#features-coming-soon","title":"Features coming soon","text":"<p>INGenious will also cater to the following types of testing. Currently, these are in the beta-testing stage in ING.</p> <ul> <li> Mobile App testing</li> <li> Database testing</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>Getting Started</p>"},{"location":"accessibility/","title":"Accessibility Testing","text":"<p>What is Accessibility Testing?</p> <p>Accessibility testing is a process of testing whether an application is easily accessible to people with disabilities such as visual, hearing, mobility, and cognitive impairment</p> <p>To achieve this, developers and testers thoroughly evaluate the product against established accessibility standards and laws such as WCAG Compliance to solve any accessibility issues.</p> <p>The objective of accessibility testing is to create an inclusive digital environment by removing any accessibility barriers.</p> <p>How does INGenious perform Accessibility Tests?</p> <p>The framework uses <code>aXe</code> as a library to test the accessibiity aspects of a website or specific elements. This feature comes packed into 2 simple actions having all the WCAG standards baked-in, thereby making execution very easy and report analysis easier. </p> <p>However at any point in time we can include/exclude specific tags during the testing.</p>"},{"location":"accessibility/#actions","title":"Actions","text":""},{"location":"accessibility/#testaccessibility","title":"testAccessibility","text":"<p>Description: This function will generate the accessibility report for the entire web page based on the input parameters passed, Report name is mandatory under the input.</p> UsageInternally Uses ObjectName Action Input Condition Reference Browser <code>testAccessibility</code> @ReportName Browser <code>testAccessibility</code> @ReportName @include tagName Browser <code>testAccessibility</code> @ReportName @exclude tagName Browser <code>testAccessibility</code> @ReportName @include tagName @exclude tagName Browser <code>testAccessibility</code> @ReportName @Options{} <p>Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \"@\"), passed from the data sheet (datasheet name : column name) or passed from a variable value (%variable name%).</p> <pre><code>  axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]);\n</code></pre>"},{"location":"accessibility/#testaccessibilityelement","title":"testAccessibilityElement","text":"<p>Description: This function will generate the accessibility report for a particular web element based on the input parameters passed. The input parameters are optional. In case no input parameter is passed the report will be generated for all tags associated with the element, the default name for the report will be the name of the element.</p> UsageInternally Uses ObjectName Action Input Condition Reference WebObject <code>testAccessibilityElement</code> @ReportName WebObject <code>testAccessibilityElement</code> @ReportName @Options{} <pre><code>axe.a11yCheck(arguments[0], %s, arguments[arguments.length - 1]);\n</code></pre>"},{"location":"accessibility/#example","title":"Example","text":"<p>Here is an example of how to test the accessibility of all elements in a page.</p> <ul> <li>In the framework, the command is as follows :</li> </ul> <p></p> <ul> <li>On running this, a report will be generated which will have the [axe] icon as shown below.</li> </ul> <p></p> <ul> <li>On clicking this [axe] icon, the Accessibility Test report will open up which will show all the Passes as below :</li> </ul> <p></p> <ul> <li>The report will also show all the Violations like this :</li> </ul> <p></p> <ul> <li> <p>In the above example the Report failed as it had the following Violations as seen in the report :</p> <ul> <li>aria-label attribute does not exist or is empty</li> <li>aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty or not visible</li> <li>Form element does not have an implicit (wrapped) <code>&lt;label&gt;</code></li> <li>Form element does not have an explicit <code>&lt;label&gt;</code></li> <li>Element has no title attribute or the title attribute is empty</li> </ul> </li> <li> <p>The report also provides this link for reference, under the [More Info] section.   </p> </li> </ul>"},{"location":"additionalfeatures/","title":"Additional features","text":"Global Data Sheets Rename a Project Execute A Reusable For Specific Set Of Data Looping Iterations And Subiterations In Test Execution Panel Handle actions before and after a step How To Navigate between Test Data Sheets How To Search in Data Sheets User Defined Variables How To Change Report Theme Generate Run Time Data Add Custom Functions For Run Time Data Generation Enabling/Disabling screenshots for Pass/Fail Execution in debug mode"},{"location":"additionalfeatures/#global-data-sheets","title":"Global Data Sheets","text":"<p>For every project that is created in INGenious, a default global data sheet is generated. The data entered in the global data sheet can be referenced in any test data sheet within the project. This allows you to reuse the data across multiple test cases.</p> <p>Where to use the Global Data?</p> <p>Identify the Data column name which is common across multiple data sheets.</p> <p></p> <p>Select that data value and click on global data icon, as shown in the image above. Give the global data id, in the respective window, as shown below,</p> <p></p> <p>You will get the global id in the global data sheet, as shown below.</p> <p></p>"},{"location":"additionalfeatures/#rename-a-project","title":"Rename a Project","text":"<p>To rename your project, right click on the project name from the Test Plan section and choose Details from the context menu option.</p> <p></p> <p>The Project Details window opens and the following options are available in the window, as shown below.</p> <p></p> <p>To rename your project, give the new name in the Project Name text box and click on Rename. Your project will be renamed.</p> <p>The Open option opens the project location in your system.</p> <p>Right below these options, you have details on the total number of scenarios, test cases, reusable components and test data sheets present in the project.</p>"},{"location":"additionalfeatures/#execute-a-reusable-for-specific-set-of-data","title":"Execute A Reusable For Specific Set Of Data","text":"<p>A reusable test case can be executed with a desired set of data by providing the sub iteration index in the Input column. It will fetch the data set from the data sheet with the desired index and use it within the test case. This is very useful when you want to execute the same reusable component, inside a single test case, with different set set of data passed each time.</p> <p></p>"},{"location":"additionalfeatures/#looping","title":"Looping","text":"With DataWithout Data <p>NOTE: In Test Design panel, users are only given access to Iteration 1 and its various Subiterations</p> <p></p> <ul> <li> <p>For the above image, Steps 2 to 4 will be executed 2 times (equal to the number of Sub iterations for Iteration 1)</p> </li> <li> <p>For first iteration, data will be taken from Iteration 1 and Subiteration 1</p> </li> <li> <p>For second iteration, data will be taken from Iteration 1 and Subiteration 2</p> </li> <li> <p>In the above image, we have used End Param. This will execute Step 2 to 4, once and not twice.</p> </li> <li> <p>To iterate through the entire Test Case for all the sub iterations of data in the data sheet, keep Start Param in the first step and End Param in the last step of your Test Case.</p> </li> </ul> <p>Looping Without Test Datasheet</p> <ul> <li>To repeat few steps, use Start Loop and End Loop:@n.</li> </ul> <p></p> <ul> <li>In the above image, Start Loop is at Step 3 and End Loop:@5 is at Step 7. So, Step 3 to 7 will be repeated 5 times.</li> </ul>"},{"location":"additionalfeatures/#iterations-and-subiterations-in-test-execution-panel","title":"Iterations And Subiterations In Test Execution Panel","text":"<ul> <li>NOTE: In the Test Execution panel, you are given access to all Iterations and their Sub iterations.</li> </ul> <ul> <li> <p>In the above image, there are some options given under the Iteration column</p> </li> <li> <p>All: will Iterate through all your Iterations of your datasheet.</p> </li> <li> <p>Single: will only Iterate through Iteration 1 of your datasheet.</p> </li> <li> <p>n:n (Range): will Iterate through a range of iterations.</p> <p>For example, if you use 2:5, then INGenious will only Iterate through Iteration 2 to Iteration 5 even if there are more iterations.</p> </li> <li> <p>n: will allow you to Iterate a particular (nth) iteration in your datasheet.</p> <p>For example, if you use 5, then INGenious iterate only the 5th iteration and all its sub iterations.</p> </li> </ul> <p>Note: Subiterations will work according to the definition of Start Param and End Param in the Test Design panel.</p>"},{"location":"additionalfeatures/#handle-actions-before-and-after-a-step","title":"Handle actions before and after a step","text":"<p>In some applications, there may be components which will originate at random ie. the origination of such components cannot be predicted. This section will describe how to handle such components.</p> <p>Logic</p> <p>Since the origin of some components cannot be predicted, check for the availability of the respective component before or after performing each step.</p> <p>How To Do It?</p> <ul> <li> <p>Open the Engine in Eclipse IDE (or any IDE supporting java development).</p> </li> <li> <p>Navigate to com.ing.engine.execution.run.</p> </li> <li> <p>The following actions will be available in this class Annotation</p> <ul> <li> <p><code>beforeStepExecution</code>: Enter the code to handle the component here, if you want to perform the check before the execution of each step.</p> </li> <li> <p><code>afterStepExecution</code>: Enter the code to handle the component here, if you want to perform the check after the execution of each step.</p> </li> </ul> </li> </ul>"},{"location":"additionalfeatures/#how-to-navigate-between-test-data-sheets","title":"How To Navigate between Test Data Sheets","text":"<ul> <li> <p>Right click on any data sheet and choose the option Search Test Data from the context menu</p> </li> <li> <p>In the Go To Test Data window, choose the test data sheet or the global data sheet to which you want to navigate</p> </li> <li> <p>You will be navigated to the respective sheet after clicking on [OK]</p> </li> </ul>"},{"location":"additionalfeatures/#how-to-search-in-data-sheets","title":"How To Search in Data Sheets","text":"<ul> <li>To search for values inside the cells, simply enter the search string (or even partial string) in the [Search Bar], and the search results will immediately show in green</li> </ul> <ul> <li>To search for Columns using the Column Header, simply enter the search string (or even partial string) in the [Search Bar], and the search results will immediately show in green</li> </ul>"},{"location":"additionalfeatures/#user-defined-variables","title":"User Defined Variables","text":"<p>User Defined variables can be created and defined by two ways as given below.</p> <ul> <li> <p>Using the actions AddVar and AddGlobalVar. AddVar action will let you define a variable whose scope is throughout the execution of your test case and is valid for all the sub-iterations of the iteration 1 of your test case. But AddGlobalVar action will let you define a variable whose scope is throughout the execution of your test set.</p> </li> <li> <p>Navigate to Configuration Run Settings tab and provide your variable name and value under the Property Name and Value columns respectively, as shown in the screenshot below. Click on save for saving your settings.</p> </li> </ul> <p>These variables can now be used anywhere in your project.</p> <p>In addition to these, we have certain actions that take variables as input and will store the corresponding result in the variable provided.</p>"},{"location":"additionalfeatures/#how-to-change-report-theme","title":"How To Change Report Theme","text":"<ul> <li> <p>Go to Configuration Options Theme.</p> </li> <li> <p>From the Reporting theme, select a theme of your choice.</p> </li> <li> <p>You can also toggle between Single and Group View.</p> </li> <li> <p>You can choose which columns need to be displayed in the report.</p> </li> <li> <p>Show or hide columns in the report using the show/hide columns option. Check the respective column name checkbox to display that column or uncheck the respective column name checkbox to hide it.</p> </li> </ul> <p>Filtering In Report</p> <p>You can filter reports using Global Search or Column Search.</p> <p>Sorting In Report</p> <p>You can sort the reports using the up/down arrows beside each column name.</p>"},{"location":"additionalfeatures/#generate-run-time-data","title":"Generate Run Time Data","text":"<p>There are options available in the Input column to perform functions like rounding off numbers, generating a random number, concatenating strings, other arithmetic calculations and etc.</p> <p>Follow the steps below to access those options.</p> <ul> <li>Consider any action that requires Input column. For instance let us take the Print action. Instead of providing the URL directly, you can concatenate two strings that lead to the URL.</li> </ul> Function Syntax Description <code>=Round</code> =Round(Decimal Number) Will Round Off the given decimal number <code>=Pow</code> =Pow(a,b) Will return the value of a^b <code>=Min</code> =Min(a,b) Will return the minimum number between a and b <code>=Max</code> =Max(a,b) Will return the maximum number between a and b <code>=Random</code> =Random(a) Will return a random number of \"a\" digits <code>=Random</code> =Round(a,b) Will return a random number between \"a\" and \"b\" <code>=Concat</code> =Concat(a,b) Will Concatenate the strings a and b <code>=Date</code> =Date(\"0\", dd/MM/YYYY) Will return the date in the specified format <code>=Date</code> =Date(\"+n or -n\", dd/MM/YYYY) Will add or subtract n days from the current date and display it in the specified format <code>=ToLower</code> =ToLower(\"DUMMY\") Will convert a String to lowercase <code>=ToUpper</code> =ToUpper(\"dummy\") Will convert a String to uppercase <code>=getLength</code> =getLength(\"TargetString\") Will return the length of a String, in this case 12 <code>=getOccurance</code> =getOccurance(Original String,i) Will return the number of occurance of a substring in a String, in this case 3 <code>=Trim</code> =Trim(\" TargetString \") Will Trim a String <code>=Replace</code> =Replace('Target String','g','b',first) Will replace first occurance of g with b. Output : Tarbet String <code>=Replace</code> =Replace(<code>%var%</code>,'g','b',first) Suppose <code>%var%</code> has value 'Target String' then it will replace first occurance of g with b. Output : Tarbet String <code>=Replace</code> =Replace('Target String','g','b',all) Will replace all occurances of g with b. Output : Tarbet Strinb <code>=Replace</code> =Replace(<code>%var%</code>,'g','b',all) Suppose <code>%var%</code> has value 'Target String' then it will replace all occurances of g with b. Output : Tarbet Strinb <code>=Substring</code> =Substring(<code>%var%</code>,startindex,endindex) Suppose <code>%var%</code> has value 'Netherlands' and start index as 3 and end index as 6 then it will give the substring. Output : her <code>=Substring</code> =Substring(<code>%var%</code>,startindex) Suppose <code>%var%</code> has value 'Netherlands' and start index as 3  then it will give the substring. Output : herlands <code>=Split</code> =Split(<code>%var%</code>,'split String',index) Suppose <code>%var%</code> has value 'Netherlands' and split string as 'e' and return string index as 1 then it will give the splitted string. Output : th <code>=Split</code> =Split(<code>%var%</code>,'split String',limit,index) Suppose <code>%var%</code> has value 'Netherlands' and split string as 'e' and limit as 2 and return string index as 1 then it will give the splitted string. Output : therlands <p>Note: It is also possible to combine two relevant functions for optimum usage.| Example1: =Concat(Diaphragm,=Round(360.45)) Result: Diaphragm360  Example2: =Concat(James_,=Round(=Random(3))) Result: James_155. </p>"},{"location":"additionalfeatures/#add-custom-functions-for-run-time-data-generation","title":"Add Custom Functions For Run Time Data Generation","text":"<p>Navigate to :</p> <p>com.ing.engine.util.data.fx; Functions.java add your custom function as shown below. This is an example of creating a <code>Trim</code> function which will accept a String input and will return a trimmed output.</p> <pre><code>public Object Trim(String... args) {\n        String op = \"\";\n        try {\n            op = args[0].trim();\n\n        } catch (Exception ex) {\n            LOG.log(Level.SEVERE, ex.getMessage(), ex);\n        }\n        return op;\n    }\n</code></pre>"},{"location":"additionalfeatures/#enablingdisabling-screenshots-for-passfail","title":"Enabling/Disabling screenshots for Pass/Fail","text":"<p>In the report, you will be able to view the screenshots for the steps whose Status is PASS or FAIL. However, you have the option to enable/disable the screenshots for such steps.</p> <ul> <li> <p>In the INGenious IDE, go to Configurations Run Settings.</p> </li> <li> <p>Under Screenshot section, you can check/uncheck the Pass or Fail checkboxes in order to enable/disable the screenshots in the report.</p> </li> <li> <p>To enable/disable the screenshots for the entire page, check/uncheck the Take Full Page Screenshot checkbox.</p> </li> </ul> <p>Note: Give the status as PASSNS or FAILNS under the Report.updateTestLog() method for PASS status without screenshot or FAIL status without screenshot respectively.</p>"},{"location":"additionalfeatures/#execution-in-debug-mode","title":"Execution in debug mode","text":"<p>You can debug the errors in your test case by adding breakpoints to the desired test steps and running the test case in debug mode.</p> <ul> <li> <p>Select the steps for which you wish to add a breakpoint, right click and choose Toggle Breakpoint.</p> </li> <li> <p>Right click the Debug button (situated next to the run button), select the browser of your choice and click the Debug button.</p> </li> <li> <p>Once the execution starts, the debug toolbar will appear on top of the screen as shown below. The execution will pause at the step where the breakpoint has been added. You can then debug your test case accordingly.</p> </li> </ul> <p></p> <ul> <li> <p>To view the console log, click the button.</p> </li> <li> <p>To pause the execution of the test case, click the button. Once the execution has been paused, you can insert new succeeding steps in the test case or check the object properties using Object Heal and update them.</p> </li> <li> <p>To resume the execution of the test case, click the button.</p> </li> <li> <p>To move to the next step of the test case, click the button.</p> </li> <li> <p>To stop the execution of the test case, click the button.</p> </li> </ul> <p>Note: In addition to adding breakpoints to the test steps, you can comment the selected test steps as well, by performing right click and choosing the option Toggle Comments.</p>"},{"location":"api/","title":"API Testing","text":"<p>What is API Testing?</p> <p>API testing is the process of confirming that an API is working as expected. An issue at an application's API layer can lead to user-facing errors or latency, which can erode customer trust, and negatively impact the business. This makes testing the APIs very important</p> <p>How does INGenious perform API Tests?</p> <p>API Testing is one of the strong suites of the framework. It uses Java HHTP Client to fire requests, receive responses, validate the response status, response body and response tags.</p> <p>It also allows us to store response tags which can be used for subsequent API calls or GUI flows. This makes API Testing and GUI Testing possible in a single flow coherently.</p>"},{"location":"api/#how-to-create-an-api-test-case","title":"How to create an API Test Case?","text":"<ul> <li> <p>A request should contain a <code>setEndPoint</code> action. This action is always marked in Blue. This is where you put the endpoint to which the request is supposed to be fired. This action comes with an editor for convenience of data set up.</p> </li> <li> <p>You can have steps to add headers/authentication etc. (if required)</p> </li> <li> <p>A request should contain an HTTP Method/Verb (<code>Post</code>/<code>Put</code>/<code>Get</code>/<code>Delete</code>/<code>Patch</code>) . This action is always marked in Green. This also comes with an editor for convenience.</p> </li> <li> <p>You can have steps to validate/store response status codes, specific tags or even the entire response body.</p> </li> <li> <p>A request should contain a <code>closeConnection</code> action. This action is always marked in Brown.</p> </li> </ul> <p></p> <p>The above is an example of a <code>postRestRequest</code> and then <code>assertResponseCode</code> followed by <code>storeJSONelementInDataSheet</code></p>"},{"location":"api/#payload-data-parameterization","title":"Payload Data Parameterization","text":"<p>Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the <code>Post</code>/<code>Put</code> request steps as well as the <code>setEndPoint</code> step, an option to open up the Editor comes up.</p> <p>Inside this editor, we can paste the entire Payload and then parameterize the specific JSON/XML tags based on our needs.</p> <p>If we press Ctrl+Space the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize.</p> <p>We need to press Esc to close the editor</p> <p></p>"},{"location":"api/#assertstore-response-tags","title":"Assert/Store Response Tags","text":"<p>We can access the Response Tags using <code>xpath</code> for XMLs and <code>jsonPath</code> for JSONs.</p> <p>The corresponding <code>xpath</code> or <code>jsonPath</code> for the tag, should be entered in the Condition column like as shown below :</p> <p></p> Example for writing Xpath <pre><code>&lt;root xmlns:foo=\"http://www.foo.org/\" xmlns:bar=\"http://www.bar.org\"&gt;\n    &lt;actors&gt;\n        &lt;actor id=\"1\"&gt;Christian Bale&lt;/actor&gt;\n        &lt;actor id=\"2\"&gt;Liam Neeson&lt;/actor&gt;\n        &lt;actor id=\"3\"&gt;Michael Caine&lt;/actor&gt;\n    &lt;/actors&gt;\n&lt;/root&gt;\n</code></pre> <p>XPath for retrieving Liam Neeson is <code>/root/actors/actor[2]/text()</code> or simply <code>//actor[2]/text()</code></p> Example for writing JSONPath <p>Example 1 :</p> <pre><code>{ \n\"name\":\"TestName\",\n\"salary\":\"12300\",\n\"age\":\"29\"\n}\n</code></pre> <p>JSON Path for retrieving TestName is <code>$.name</code> </p> <p>Example 2 :</p> <pre><code>{\n    \"page\": 2,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 7,\n            \"email\": \"michael.lawson@xyz.com\",\n            \"first_name\": \"Michael\",\n            \"last_name\": \"Lawson\"\n        },\n        {\n            \"id\": 8,\n            \"email\": \"lindsay.ferguson@xyz.com\",\n            \"first_name\": \"Lindsay\",\n            \"last_name\": \"Ferguson\"\n        },\n        {\n            \"id\": 9,\n            \"email\": \"tobias.funke@xyz.com\",\n            \"first_name\": \"Tobias\",\n            \"last_name\": \"Funke\"\n        },\n        {\n            \"id\": 10,\n            \"email\": \"byron.fields@xyz.com\",\n            \"first_name\": \"Byron\",\n            \"last_name\": \"Fields\"\n        },\n        {\n            \"id\": 11,\n            \"email\": \"george.edwards@xyz.com\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Edwards\"\n        },\n        {\n            \"id\": 12,\n            \"email\": \"rachel.howell@xyz.com\",\n            \"first_name\": \"Rachel\",\n            \"last_name\": \"Howell\"\n        }\n    ],\n    \"additional\": {\n        \"url\": \"https://xyz.com\",\n        \"text\": \"Happy Testing!\"\n    }\n}\n</code></pre> <p>JSON Path for retrieving byron.fields@ing.com is <code>$.data[3].email</code> [Index starts with 0]</p> <p>To learn more about JSONPath visit this GitHub page.</p> <p>Actions</p>"},{"location":"bdd/","title":"Behavior Driven Development (BDD)","text":"<p>Importance of BDD Way of Working</p> <p>BDD is an Agile software development methodology in which an application is documented and designed around the behavior a user expects to experience when interacting with it. By encouraging developers to focus only on the requested behaviors of an app or program, BDD helps to avoid bloat, excessive code, unnecessary features or lack of focus.</p>"},{"location":"bdd/#bdd-editor","title":"BDD Editor","text":"<p>The framework comes with a BDD editor that lets user to create/edit feature files. These feature files can then be imported/converted into automation test cases. The BDD editor has a provision of auto suggesting the keywords that can be used while writing feature files. Perform Ctrl+Space anywhere in the BDD editor workspace to get the list of keywords supported by the BDD editor.</p>"},{"location":"bdd/#createedit-feature-files-with-bdd-editor","title":"Create/Edit Feature Files With BDD Editor","text":"<ul> <li> <p> From the INGenious IDE, navigate to Tools BDD Open Feature Editor and the editor opens in a new window</p> </li> <li> <p> Create a new project by clicking on New Project option, you can also open an existing project (This is a Mandatory step)</p> </li> <li> <p> Create a new story by clicking on [+] icon. A story is basically a feature for which <code>Scenarios</code> need to be written.</p> </li> <li> <p> After designing the <code>features</code> and <code>scenarios</code>, each story can be exported as a <code>feature file</code> , by clicking on up arrow</p> </li> </ul> <p></p> <p>Note: Projects created from BDD editor are saved as json files and internally Gherkin language is used to create feature files.</p> <p>It is also possible to open an existing feature file in the BDD editor using the down arrow icon and edit the same and save.</p>"},{"location":"bdd/#import-a-feature-file","title":"Import A Feature File","text":"<p>In order to translate the feature files into an automation scenario, follow the steps below :</p> <ul> <li> <p> Navigate to Tools BDD Import Feature file</p> </li> <li> <p> Locate the feature file and click on OK</p> <ul> <li> The <code>Features</code> are imported as Scenarios </li> <li> All the <code>Scenarios</code> are imported as Test cases</li> <li> All the <code>Steps</code> in each scenario are imported as Reusable components </li> <li> All the <code>Examples</code> are imported into Data Sheets with the name of the test case</li> </ul> </li> </ul> <p> </p> <ul> <li> The corresponding steps can then be automated accordingly either through Recording or otherwise</li> </ul> <p>Note: Any feature written in Gherkin language can be opened from the Import Feature file , even if it is not created using the BDD editor.</p>"},{"location":"bdd/#bdd-reports-via-azure-devops","title":"BDD Reports via Azure DevOps","text":"<p>In order to generate BDD Style Reporting post execution, from the Run Settings, make sure Bdd Reporting checkbox is checked.</p> <p></p> <p>This will generate bdd-report.json file post execution and this json file can then be fed to Azure DevOps Yaml Task to generate BDD Style Reporting.</p> <p>For this we need to use the following Yaml commands :</p> <pre><code>- task: PublishCucumberReport@1\n  inputs:\n    jsonDir: '$(System.DefaultWorkingDirectory)/Projects/&lt;Project_Name&gt;/Results/TestExecution/&lt;Release_Name&gt;/&lt;TestSet_Name&gt;/Latest/'\n    outputPath: '$(System.DefaultWorkingDirectory)'\n    theme: 'bootstrap'\n    reportSuiteAsScenarios: true\n    name: 'Contact Us Form'\n    title: 'BDD Results'\n</code></pre> <p>In Azure DevOps, the feature wise report can be viwed under the <code>Cucumber</code> Tab like the following :</p> <p></p>"},{"location":"bestpractices/","title":"Best Practices","text":"<p>Documentation</p>"},{"location":"bestpractices/#use-locators","title":"Use locators","text":"<p>In order to write end to end tests we need to first find elements on the webpage. We can do this by using Playwright's built in locators. Locators come with auto waiting and retry-ability. Auto waiting means that Playwright performs a range of actionability checks on the elements, such as ensuring the element is visible and enabled before it performs the click. To make tests resilient, we recommend prioritizing user-facing attributes and explicit contracts.</p> <pre><code>page.getByRole('button', { name: 'submit' });\n</code></pre> <p>Locators can be chained to narrow down the search to a particular part of the page.</p> <pre><code>const product = page.getByRole('listitem').filter({ hasText: 'Product 2' });\n</code></pre> <p>You can also filter locators by text or by another locator.</p>"},{"location":"ci/","title":"Continuous Integration","text":"<p>Because of its simple design and rich command line interface, INGenious can integrate with any CICD tool</p> <p>INGenious is composed of all flat files like <code>xml</code> and <code>csv</code> in addition to the <code>java</code> files which makes version control system very easy.  </p>"},{"location":"ci/#what-to-push-to-the-repository","title":"What to push to the Repository","text":"<p>The working directory should contain the following <code>.gitignore</code> file :</p> gitignore<pre><code>LICENSE\nlogs/\nProjects/*/Results/*/\nweb/\nrecent.items\nlog.txt\nTools/\nlib/*.jar\n</code></pre> <p>After this, the corresponding pipeline yaml needs to be included in the repository. </p> <p>Please check out the pipeline integrations with the following solutions :</p> <p>GitHub Actions  Azure DevOps  Circle CI  </p>"},{"location":"cli/","title":"Command Line Interface","text":"<p>CLI</p> <p>INGenious has a rich set of command line options for execution with parameters, retrieving execution details, setting variables, change settings etc.</p>"},{"location":"cli/#cli-options","title":"CLI Options","text":"Options Output <code>-v</code>,<code>-version</code> Display current build details <code>-run</code> Run with the given details <code>-rerun</code> Rerun the last execution <code>-project_location</code> Project Location for Execution <code>-scenario</code> Scenario Name <code>-testcase</code> Testcase Name <code>-browser</code> Browser Name (Not applicable for Testset Execution) <code>-release</code> Release Name <code>-testset</code> Testset Name <code>-tags</code> Tags of Test Cases to be exceuted <code>-bDate</code> Display current build date <code>-bTime</code> Display current build time <code>-bVersion</code> Display current build version <code>-dont_launch_report</code> Disables launching summary report after execution <code>-help</code> Help <code>-hi</code> Says Hello! <code>-t</code> Display Current Time <code>-latest_exe</code> Returns the given property value for the latest execution <code>-latest_exe_loc</code> Returns the results folder for the latest execution <code>-latest_exe_status</code> Returns the status for the latest execution <code>-latest_exe_data_loc</code> Returns the Report data location for the latest execution <code>-latest_exe_data_raw</code> Returns the Report data for the latest execution <code>-latest_exe_log_loc</code> Returns the log file location for the latest execution <code>-latest_exe_log_raw</code> Returns the log file for the latest execution <code>-latest_exe_perf_status</code> Returns the page load performance results for latest execution <code>-latest_exe_perf_report</code> Returns the page load performance report for latest execution <code>-checkPagePerf</code> Returns the page load performance results after Run <code>-setVar</code> Create/Set user defined variable [<code>-setVar \"var=value\"]</code> <code>-setEnv</code> Create/Set Env settings  <code>-standalone_report</code> Create Standalone Report instead of Relative one"},{"location":"cli/#examples","title":"Examples","text":"<p> Single Test Case Execution</p> WindowsMac/Linux <pre><code>Run.bat -run -project_location \"Projects\\Demo\" -scenario \"NewScenario\" -testcase \"NewTestCase\" -browser \"Chrome\"\n</code></pre> <pre><code>./Run.command -run -project_location \"Projects\\Demo\" -scenario \"NewScenario\" -testcase \"NewTestCase\" -browser \"Chrome\"\n</code></pre> <p> Test Set Execution</p> WindowsMac/Linux <pre><code>Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\"\n</code></pre> <pre><code>./Run.command -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\"\n</code></pre> <p> Test Set Execution with specific tags</p> WindowsMac/Linux <pre><code>Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -tags \"@Smoke\"\n</code></pre> <pre><code>./Run.command -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -tags \"@Smoke\"\n</code></pre> <p> Test Set Execution with Updated Environment Settings</p> WindowsMac/Linux <pre><code>Run.bat -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -setEnv \"run.TestEnv=Acceptance\"\n</code></pre> <pre><code>./Run.command -run -project_location \"Projects\\Demo\" -release \"NewRelease\" -testset \"NewTestSet\" -setEnv \"run.TestEnv=Acceptance\"\n</code></pre> <p>In the above example, the test set will be forced to be executed on <code>Acceptance</code> Environment</p>"},{"location":"cli/#override-settings","title":"Override Settings","text":"<p><code>-setEnv</code> is a very powerful command to override all the environment settings and userdefined variables. This can override the values in all of these settings :</p> <p></p> <p>Lets look at the <code>Run Settings</code> for a Test Set. If we enter into the project location and navigate to the following location :</p> <p><code>Settings\\TestExecution\\</code>&lt;<code>ReleaseName</code>&gt;<code>\\</code>&lt;<code>TestSetName</code>&gt; </p> <p>We will find the <code>RunSettings.Properties</code> and the <code>TestMgmtSettings.Properties</code> files.</p> <p>The <code>RunSettings.Properties</code> holds all the corresponding settings that we enter via the UI of the framework.</p> <p></p> <p>Any of these properties can be overriden by <code>-setEnv</code>. </p> <p>For Example: <code>-setEnv \"run.TakeFullPageScreenShot=False\"</code></p> <p>Similarly, if we go to the project location and navigate to <code>Settings\\</code> directory, the <code>userDefinedSettings.Properties</code> holds all the corresponding data that we enter via the UI of the framework.</p> <p></p> <p>We can use by <code>-setEnv</code> to override these values too.</p> <p>For Example: <code>-setEnv \"user.Key1=NewValue1\"</code></p> <p>For the following settings, <code>-setEnv</code> can be used as follows :</p> Settings option Global settings -setEnv \"<code>exe</code>.SettingName=Value\" Run Settings -setEnv \"<code>run</code>.SettingName=Value\" User Defined Settings -setEnv \"<code>user</code>.SettingName=Value\" Driver Settings -setEnv \"<code>driver</code>.SettingName=Value\" Test Management Settings -setEnv \"<code>tm</code>.SettingName=Value\" Browser Capability Settings -setEnv \"<code>capability</code>.<code>browserName</code>.SettingName=Value\" Browser Context Settings -setEnv \"<code>context</code>.SettingName=Value\" <p>Examples :</p> <p><pre><code>-setEnv \"capability.chromium.setheadless=false\"` \n</code></pre> <pre><code>-setEnv \"context.password=Value\"\n</code></pre></p> <p>Multiple settings can be altered via a single command as well :</p> <pre><code>-setEnv \"run.var=value;exe.var=value;user.var=value\"\n</code></pre>"},{"location":"comparison/","title":"Comparisons with industry standard frameworks and Limitations","text":""},{"location":"comparison/#learning-curve","title":"Learning Curve","text":"<p>Benefit of using this framework is that learning curve is very small and doesn\u2019t require any programming skills to start. This immediately helps in including in the testing process, the CJEs, Business users, Platform and other DevOps Engineers who do not have programming or test automation background.</p>"},{"location":"comparison/#readymade-framework","title":"Readymade Framework","text":"<p><code>Selenium</code>, <code>Playwright</code>, <code>Appium</code>, <code>HttpClient</code>, <code>WinAppDriver</code> are just libraries, not testing tools. A framework needs to be created from scratch or reused from open source market, to use these libraries. </p> <pre><code>This framework does all heavy lifting with readily available framework developed \non top of \"Selenium\", \"Playwright\", \"Appium\", \"HttpClient\", \"WinAppDriver\"\n</code></pre>"},{"location":"comparison/#comparitive-analysis","title":"Comparitive Analysis","text":"<p>It is important to note that in the comparison below, we will only include popular <code>java</code> or <code>python</code> frameworks and not libraries like <code>Selenium</code>, <code>Playwright</code> etc. Comparing frameworks with libraries is like comparing apples and oranges!</p> <p>The reason to choose <code>java</code>/<code>python</code> and not <code>javascript</code> is that, in Wholesale Banking, most applications are Packages and Commercial off-the-shelf (COTS) and monoliths. These applications do not have modern Web UI and are heavily focussed on the Business Processing side of things. Javascript based tools and frameworks are primarily aimed to test Modern Web UI. With Java we have a greater edge to test the processes like, Java Messaging Queue, Kafka Streams, Reports (xlsx, pdf), DataBase etc. in addition to Web and API.</p> Features INGenious Cucumber Serenity Robot Framework Karate Katalon Test Complete Open Source \u2713 \u2713 \u2713 \u2713 \u2713 Freemium \u2717 Integrated IDE with data sheets and property files \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 OS Independent \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2717 Shallow Learning Curve \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Community Support \u2713 Rapidly growing Global Community \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 High Ease of test case creation \u2713 \u2717 \u2717 \u2713 \u2713 \u2713 \u2713 Business User Friendly \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in Record and Spy for quick start \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Cross Browser Testing \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Multiple Object Properties in Object Repository \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Distributed Execution \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Integration with Selenium Grid \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in support for BDD approach \u2713 \u2713 \u2713 \u2717 \u2717   (Not to confuse with Karate BDD like DSL) \u2713 (Plugins needed) \u2713 (Plugins needed) Built-in support for Data-driven approach \u2713 \u2717 \u2717 \u2717 \u2717 \u2713 \u2713 Built-in support for Keyword-driven approach \u2713 \u2717 \u2717 \u2713 \u2717 \u2713 \u2713 Customizations and enhancements \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Built-in Native Azure DevOps reports with logs and screenshots \u2713 \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717   (Plugins not supported in ING) \u2717 (Junit doesn't support screenshots) \u2717 (Junit doesn't support screenshots) \u2717 (Plugins not supported in ING) Built-in Azure DevOps Test Plan Integration \u2713 \u2717 \u2717 \u2717 \u2717 \u2717  (Plugins not supported in ING) \u2717 (Plugins not supported in ING) Built-in API Testing \u2713 \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 (additional libraries needed) \u2713 \u2713 \u2717 Built-in Web Page Performance Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Accessibility Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Database Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2717 Built-in Image Based Testing \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 \u2713 Docker Support \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713"},{"location":"comparison/#limitations-of-the-framework","title":"Limitations of the framework","text":"<ul> <li> <p>INGenious is tester-friendly. Developers, who are accustomed to only coding and writing scripts in an IDE like IntelliJ or Eclipse might find the UI of the framework, limiting.</p> </li> <li> <p>Even though the framework has an exhaustive Java project in the backend which can be customized, enhanced and even tailored for project specific purposes, it is not the first thing that a developer sees, thereby creating a feeling of lack of coding liberty.</p> </li> <li> <p>While INGenious is designed to be user-friendly, there is still a learning curve involved in using the framework effectively. One may need to invest time in learning how to use the framework's features and scripting capabilities to create effective tests.</p> </li> <li> <p>The framework's community is quite small. Even though it is growing and efforts are being put in to create exhaustive documentation and videos, it will take some time for it to become popular.</p> </li> </ul>"},{"location":"database/","title":"Database Testing","text":"<p>Database Testing is an important feature of the framework. It allows us to connect to any database and store and assert the results against datasheets.</p> <p>This gives us an advantage of executing Web, API and Database actions all in one go in a single Test Flow</p>"},{"location":"database/#set-up-database-connection","title":"Set up Database Connection","text":"<ul> <li>Download and store the jdbc driver jar in lib/clib location</li> <li> <p>If you are using mysql database you need to download <code>mysql-connector-j-X.jar</code> from  here.</p> </li> <li> <p>If you are using oracle database you need to download <code>ojdbcX.jar</code> from  here.</p> <pre><code>X is the version of your choice\n</code></pre> </li> <li> <p>In order to connect to specific database from framework we need to provide values in Database Settings under Run Settings of the framework.</p> </li> </ul> <p></p> <p>In Java if you were to manually connect, you would invariably use the following :</p> <pre><code>Class.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/productDB\", \"My_DB_UserName\", \"My_DB_Password\");\n</code></pre> <p>## Query Editor</p> <p>After the above setting is done, you can proceed with your first steps as shown below.</p> <p></p> <p>Data Parameterization can be done using the built-in editor. If you mouse-hover on the Input column, corresponding to the <code>DB</code> steps, an option to open up the Editor comes up.</p> <p>Inside this editor, we can write the <code>Query</code> and then parameterize it based on our needs.</p> <p>If we press [ctrl] + [SPACE], the list of all available DataSheets : ColumnNames along with all user-defined variables show up. We can then select the appropriate item from where we want to parameterize.</p> <p>We need to press [esc] to close the editor</p> <p> The above image is a gif. So if its not moving, please reload the page </p> <p>## Actions</p> <p>There are 11 built-in Actions. </p> <p>Please click the action-cloud below to check the details</p> <p></p>"},{"location":"engine/","title":"Engine","text":"<p>The Engine is the heart of the framework. This is where the methods corresponding to all the available actions are defined and this folder (<code>location of your framework\\Engine</code>) can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. </p> <p>After making modifications to the engine, the users can compile the engine and export it as a JAR file to be used from the UI of the framework.</p> <p>Note: Java 11 is mapped to Eclipse IDE's workspace settings in order to enable a seamless import of engine and custom method project. Make sure the Eclipse Java compiler is also set to <code>11</code> </p>"},{"location":"engine/#how-to-open-the-engine-in-eclipse","title":"How to open the Engine in Eclipse?","text":"<ul> <li> <p>Open Eclipse IDE</p> </li> <li> <p>Import project using <code>File</code> <code>Import</code> <code>General</code> <code>Existing Projects into Workspace</code></p> </li> <li> <p>Locate the Engine project in your system by clicking on [Browse]. This location is usually inside the directory where the framework is present</p> </li> <li> <p>After performing the above steps, you can see the entire project structure</p> </li> </ul> <p></p> <p>If you see Build Path errors after importing the engine, then you can fix this by removing all the libraries and readding them.</p> <p>Step 1 : Remove All the libraries - Right Click on the Project Name - Select Build Path  Configure Build Path - Under the Libraries Tab, select all jar files under Classpath - Click on [Remove] Button</p> <p>Step 2 : Re-Add All the libraries - Select Classpath from the same location as above - Click on [Add External JARs] Button - Navigate to the location where the framework is installed - Select and add, all libraries under the <code>lib</code> folder - Click [Apply and Close] Button</p>"},{"location":"engine/#where-to-write-your-custom-methods","title":"Where to write your custom method(s)?","text":"<p>Create a custom package in the Engine under src and place all your .java files containing the custom methods in it. This is the best practice to add your custom method.</p> <p></p>"},{"location":"engine/#how-to-use-your-custom-methods-in-the-ui-of-the-framework","title":"How to use your custom method(s) in the UI of the framework?","text":"<p>You can create your custom method in the Engine (as explained in the above section) and export the Engine as a Jar file for the changes to be visible in the UI of the framework.</p> <p>Follow the steps below to export and  replace the engine.jar in the <code>lib</code> folder under the  installation location. </p> <ul> <li> <p>Select the  src/main/java  and src/main/resources folder of Engine project</p> </li> <li> <p>Right Click and choose Export option</p> </li> <li> <p>Select <code>Java</code> <code>jar</code> option and click [Next]</p> </li> <li> <p>Click on [Browse] and select the path as &lt;installation location&gt;\\lib\\ingenious-engine.jar</p> </li> <li> <p>Click on [Finish] [OK] to complete the overwriting of the engine.jar</p> </li> <li> <p>Restart the framework to load the updated jar with new methods</p> </li> </ul> <p></p>"},{"location":"engine/#how-to-test-your-custom-methods-by-runningdebugging-a-test-case-from-engine","title":"How to test your custom method(s) by running/debugging a test case from Engine?","text":"<p>It is a best practice to run or debug your flow from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once the errors have been fixed.</p> <p>Follow the steps below to execute test case from the Engine.</p> <ul> <li> <p>Open Eclipse IDE</p> </li> <li> <p>If you have your custom method in a separate <code>package</code>, then follow the steps below to add your package name to the package.properties file available in the Configuration folder inside the installation location of the framework</p> </li> </ul> <p>For example, if your custom method is added like this :</p> <p></p> <p>Navigate to the location where the framework is installed  Go to <code>Configuration</code> folder  Inside <code>package.properties</code> add the package name like this :</p> <p></p> <ul> <li>In the same <code>Configuration</code> folder  Open the <code>Global Settings.properties</code> file and provide the details as shown in the image below:</li> </ul> <p></p> <ul> <li>For executing the test case with your custom method:</li> </ul> <p>Add the custom method name in the test case as shown below. It will show in Red in the UI of the framework, but thats expected as you have not yet built a JAR file. You are only testing the custom method.</p> <p></p> <p>Run the control.java file from the com.ing.engine.core package.</p> <p></p> <ul> <li>You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file.</li> </ul>"},{"location":"gettingstarted/","title":"Let's Get Rolling","text":""},{"location":"gettingstarted/#prerequisites","title":"Prerequisites","text":""},{"location":"gettingstarted/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>RAM: Min. 2GB (preferably 4GB)</li> <li>Operating System: Windows (32/64 bit)/ MAC OS/Linux</li> </ul> <p>Info</p> <p>The framework is built using Java. Hence it will work on any Operating System which supports Java</p>"},{"location":"gettingstarted/#software-requirements","title":"Software Requirements","text":"<ul> <li>Java 11 or above</li> <li>Maven [Installation guide can be found here]</li> <li>For customizations, any IDE which supports Java Development (eg. Eclipse, Netbeans, IntelliJ etc.)</li> </ul>"},{"location":"gettingstarted/#installation","title":"Installation","text":"<ul> <li> <p>Step 1 : Download </p> <ul> <li>Click here to directly download the latest version</li> </ul> </li> <li> <p>Step 2 : Extract the zip, into a directory of your choice.</p> </li> </ul> <p>Note</p> <p>The framework as such does not require any \"installation\" process. Simple extraction of the zip file is enough    </p> <ul> <li>Step 3 : Launch </li> </ul> WindowsMac or Ubuntu <p>Double click on the <code>Run.bat</code> in the framework location</p> <ol> <li>Open Terminal in the installation location and then type  <pre><code>chmod +x Run.command\n</code></pre></li> <li>Then double click on the <code>Run.command</code></li> <li>If you see It's Downloaded From Internet warning then enter the following command in terminal:   <pre><code>xattr -d -r com.apple.quarantine \"/path/to/the framework\"\n</code></pre></li> </ol>"},{"location":"gettingstarted/#quick-start-with-recording-playwright-recorder-codegen","title":"Quick Start with Recording - Playwright Recorder (CodeGen)","text":"<p>Note</p> <p>Make sure Maven is installed in the system. INGenious internally uses Playwright codegen.</p>"},{"location":"gettingstarted/#steps-for-recording","title":"Steps for recording","text":"<ul> <li> <p>Launch INGenious Playwright Studio</p> </li> <li> <p>Click on the Recorder icon</p> </li> </ul> <p></p> <p>Internally this will call the following <code>mvn</code> command : </p> <pre><code>mvn exec:java -f engine/pom.xml -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=codegen\n</code></pre> <ul> <li>A loader will show up while the playwright-recorder is being loaded</li> </ul> <p>Warning</p> <p>If a new version of Playwright is available, this step will try to download that first. So the recorder can time out if the network speed is slow.</p> <p>Pay attention to the logs!!</p> <ul> <li> <p>The Playwright Inspector will launch along with chromium browser</p> </li> <li> <p>Enter the URL of the Application Under Test (AUT) in the chromium browser and perform the actions you want to perform on the application</p> </li> <li> <p>You will see the steps getting recorded in the Playwright Inspector</p> </li> <li> <p>Once the recording is done, save the steps in a <code>.txt</code> file   Currently only <code>.txt</code> is supported. Going forward all formats : <code>.java</code>, <code>.cs</code>, <code>.py</code>, <code>.js</code> will be supported for import</p> </li> </ul>"},{"location":"gettingstarted/#import-the-recording","title":"Import the recording","text":"<ul> <li> <p>From INGenious Playwright Studio, navigate to Tools Import Playwright Recording Import Playwright Recording.</p> </li> <li> <p>Locate the .txt file and click [OK].</p> </li> <li> <p>The file is immediately rendered as Scenario and Test Case. All the relevant test steps with all the web objects and test data are imported.</p> </li> <li> <p>All the objects are loaded in the Object Repository.</p> </li> </ul> <p>Before you begin, its important that you Know the Framework</p>"},{"location":"knowyourframework/","title":"Working with INGenious","text":""},{"location":"knowyourframework/#menu-ribbon","title":"Menu Ribbon","text":"Setting options Execution options"},{"location":"knowyourframework/#_1","title":"Know the framework","text":""},{"location":"knowyourframework/#test-design-pane","title":"Test Design Pane","text":"<p>This is where the test cases are designed and debugged. On opening the framework, the user, by default, lands on this pane.</p> <p></p> <p>The Design Pane is composed of the following 5 sections (as shown in the picture above):</p>  Test Plan Reusable Components Test Steps Test Data Object Repository <p>This is where the Test Scenarios and Test Cases are created and organized.   Every <code>Scenario</code> in the INGenious IDE , is a <code>Directory</code> in the backend and every <code>Test case</code> is a <code>.csv</code> file.</p> <p>To see this, you can navigate to the location of your tool, then <code>Projects</code> <code>Your Project</code> <code>Test Plan</code></p> <p></p> <p>If you select a Scenario or Test Case and Right Click, you will have some interesting and handy options to work with :</p> <p></p> <p>This is where the Reusable Test Scenarios and Test Cases (logical grouping of test steps) are created and organized. Every <code>Scenario</code> in the INGenious IDE , is a <code>Directory</code> in the backend and every <code>Test case</code> is a <code>.csv</code> file.</p> <p>To see this, you can navigate to the location of your tool, then <code>Projects</code> <code>Your Project</code> <code>Test Plan</code></p> <p></p> <p>What differentiates the Scenarios and Test Cases in the Test Plan compared to those in the Reusable Component is the purpose :   * Test Plan is supposed contain Functional/Regression/E2E/Business Test Cases   * Reusable Component is supposed contain logical test step groupings, to be used in multiple test cases in the test plan.</p> <p>The tool makes use of the <code>ReusableComponent.xml</code> located in the Project Location, to differentiate between the above 2 type :</p> <p>Here is the <code>ReusableComponent.xml</code> for the above example :</p> <pre><code>   &lt;Root ref=\"Example\" type=\"RC\"&gt;\n      &lt;Folder ref=\"UI\"&gt;\n         &lt;Scenario ref=\"Common\"&gt;\n            &lt;TestCase exeType=\"Executable\" ref=\"Login\"/&gt;\n         &lt;/Scenario&gt;\n         &lt;Scenario ref=\"Purchase\"&gt;\n            &lt;TestCase exeType=\"Executable\" ref=\"Add to Cart\"/&gt;\n            &lt;TestCase exeType=\"Executable\" ref=\"Checkout\"/&gt;\n            &lt;TestCase exeType=\"Executable\" ref=\"Logout\"/&gt;\n         &lt;/Scenario&gt;\n      &lt;/Folder&gt;\n   &lt;/Root&gt;\n</code></pre> <p>If you select a Reusable Scenario or Reusable Test Case and Right Click, you will have some interesting and handy options to work with :</p> <p></p> <p>This is the canvas where you have your test steps in sequential order</p> <p></p> <p>To make working simple, intuitive and easy, you can also use the drag and drop to create test steps.</p> <p>In the following example, we can create the Checkout Reusable simply by dragging and dropping the objects from the Object Repository and parameterizing them by dragging and dropping the datasheet columns</p> <p></p> <p>As a best practice, it is advisable to compose your test case only with Reusables and not have any loose (orphan) steps.</p> <p>You can also drag and drop the Reusables to create test cases like this :</p> <p></p> <p>This is the area where you can set up your test data in multiple sheets.</p> <p></p> <p>If you select a data cell and Right Click, you will have some interesting and handy options to work with :</p> <p></p> <p>Set up Multiple Test Environments</p> <p>To set up environment based execution, you can set up mutiple environments following the 5 steps as below :</p> <p></p> <ul> <li>Step 1 : From Test Data &gt;&gt; Make sure Multiple Environments is selected</li> <li>Step 2 : Click the [+] icon in the Data Section, to add a new Environment</li> <li>Step 3 : Enter the [Environment] Name</li> <li>Step 4 : Check [Copy Data from Other Environments]</li> <li>Step 5 : Select the Environment and the corresponding Data sheets to be copied and then click [Create] Button</li> </ul> <p>This is the area where the Web Elements/Objects are present along with the multiple attributes/properties to be used to find that element on the Application.</p> <p></p> <p>If you select a Property and Right Click, you will have some interesting and handy options to work with. These options are applicable to used for :</p> <ul> <li>Selected Object</li> <li>All objects in the Page</li> <li>All Objects in the OR </li> </ul> <p></p>"},{"location":"knowyourframework/#_2","title":"Know the framework","text":""},{"location":"knowyourframework/#test-execution-pane","title":"Test Execution Pane","text":"<p>In this pane we can club our test cases together into logical test sets or test suites and execute them - Either locally (on the workstation) or via a CICD pipeline.</p> <p></p> <ul> <li>Step 1 : Right Click on the Project Name  Add Release  Right Click on the Release Name  Add TestSet</li> <li>Step 2 : Select the test cases that you want to add to the set. You can do individual selections or bulk selection by simply selecting the entire Scenario. Once selected, click on the Green  Arrow to pull your selections into the set.</li> <li>Step 3 : Order the Test Cases in the sequence of your choice. Choose the appropriate Browsers.</li> <li>Step 4 : Click on the gear icon  and open up the Run Settings. Here you can configure many settings like :<ul> <li>Parallel Thread count</li> <li>Execution Mode as Grid or Local</li> <li>Which Environment to pick for execution</li> </ul> </li> </ul> <p>Once done, we are good to start our execution by clicking on the Green Play/Run button </p>"},{"location":"knowyourframework/#_3","title":"Know the framework","text":""},{"location":"knowyourframework/#reportdashboard-pane","title":"Report/Dashboard Pane","text":"<p>In this pane we can view the detailed summary report and even access historical individual reports.</p> <p>The Detailed Summary Report tab looks like this :</p> <p></p> <p>The Latest Summary Report tab looks like this :</p> <p></p> <p>Browser Testing API Testing</p>"},{"location":"shortcuts/","title":"Shortcuts","text":""},{"location":"shortcuts/#file-menu","title":"File Menu","text":"Shortcut Keys Description Ctrl+Shift+N Create a new project Ctrl+Shift+O Open an existing project Ctrl+Shift+S Save All F1 Open Help File"},{"location":"shortcuts/#launch-utilities","title":"Launch Utilities","text":"Shortcut Keys Description Ctrl+Alt+R Start Recording"},{"location":"shortcuts/#navigation","title":"Navigation","text":"Shortcut Keys Description Alt+Shift+N Navigate to Test Design panel Alt+Shift+E Navigate to Test Execution panel Alt+Shift+D Navigate to Dashboard Alt+Shift+A Adjust UI"},{"location":"shortcuts/#workspace","title":"Workspace","text":"Shortcut Keys Description Ctrl++ Add row Ctrl+- Delete rows Ctrl+B Toggle Breakpoint Ctrl+/ Toggle Comment"},{"location":"shortcuts/#test-data-table","title":"Test Data Table","text":"Shortcut Keys Description Ctrl++ Add row Ctrl+- Remove row <code>Left Double Click</code> Edit header/ cell data"},{"location":"shortcuts/#common","title":"Common","text":"Shortcut Keys Description F2 Rename Del Delete Ctrl+X Cut Ctrl+C Copy Ctrl+V Paste"},{"location":"shortcuts/#help","title":"Help","text":"Shortcut Keys Description F1 Open Help File F3 To go to next search Shift+F3 To go to previous search F5 Reload"},{"location":"shortcuts/#others","title":"Others","text":"Shortcut Keys Description F9 Show Log Ctrl+Shift+E Launch Exploratory Ribbon Ctrl+Alt+S Open Run settings"},{"location":"testplan/","title":"Azure DevOps Test Plans","text":"<p>INGenious provides a seamless integration with Azure DevOps Test Plans for Test Case and Defect Management</p> <p>To configure this follow the following steps :</p> <ul> <li> Create Scenarios and Test Cases in INGenious for automated execution</li> </ul> <p> </p> <ul> <li> <p> In Azure DevOps Test Plan, create a Test Suite and then Test Cases inside the suite. While creating these, keep in mind the following :</p> <p> Test Scenario in INGenious should have the same name as Test Suite in Azure DevOps</p> <p> Test Case names in INGenious should be the same in Azure DevOps</p> </li> </ul> <p> </p> <ul> <li> Then the final thing to do, is to configure the TM Settings in the Run Settings TM Settings</li> </ul> <p> </p> <ul> <li> <p> Make sure the Update Results back to Azure DevOps Tesplan check box is ticked</p> </li> <li> <p> Enter the Organization, Project, Plan ID and PAT are filled in</p> </li> <li> <p> Verify the connection using the Test Connection option. The  light bulb should turn green </p> </li> <li> <p> Now execute your tests via any pipeline or from your work station</p> </li> <li> <p> At the end of the execution, the status of test cases are automatically updated in Azure DevOps</p> </li> </ul> <p> </p> <ul> <li> Additionally an Azure DevOps Test Run is created which is automatically updated with test results, attachments and logs</li> </ul> <p> </p>"},{"location":"tips/","title":"Some Tips and Tricks","text":"Execution Timeout Full Page Screenshots Global Data Sheet Rename and Refactor Report Sharing"},{"location":"tips/#execution-timeout","title":"Execution TimeOut","text":"<p>INGenious provides an option to set the Execution timeout of the test sets run from the execution panel. The default execution timeout is 300minutes (5 hours).</p> <p>When is it useful?</p> <p>Suppose, you have a test set containing 100 test cases and it takes 7 hours to execute all the test cases. As the default execution timeout is 5 hours, the test set will run for the 5 hours and remaining test cases yet to run will be marked as NoRun. Increasing the timeout will help in executing the full set.</p> <p>How to set it?</p> <p>To set the execution timeout, go to Configuration Run settings.</p> <ul> <li>Click the Run settings tab and set the execution timeout to the desired value.</li> </ul> <p>Note: The execution timeout must be given in minutes.</p> <ul> <li>Click Save.</li> </ul> <p>Note: To save the settings for the individual test sets, click on the test set and open the Run settings to save or use the Quick settings option in the execution panel.</p> <p></p> <ul> <li>To check if the settings have been saved, go to </li> </ul> <p>Projects Project name Settings TestExecution Release name Testset name and open the RunSettings file to view the settings.</p> <ul> <li>If there are multiple test sets, the execution timeout must be set individually for each set. </li> </ul>"},{"location":"tips/#full-page-screenshots","title":"Full Page Screenshots","text":"<p>Why The Browser Scrolls Up And Down At Certain Steps In The Application?</p> <p>While executing the test scripts, you might have observed that sometimes the browser scrolls up and down in a particular page in the application under test.</p> <p>This might eventually increase the execution time of your scripts as well. The browser scrolls up and down in order to take full page screen shots of the current application page.</p> <p>How to stop the browser from scrolling while execution?</p> <p>If it is not required to take full page screen shots, you can disable full page screenshots by following the steps \u2013</p> <ul> <li> <p>Navigate to Configurations Run Settings.</p> </li> <li> <p>Uncheck the check box for \u201cTake full page screen shots\u201d, under Run settings tab.</p> </li> <li> <p>You can also enable/disable the screenshots for the Pass or Fail steps by checking/unchecking the Pass or Fail checkboxes respectively.</p> </li> </ul> <p></p>"},{"location":"tips/#global-data-sheet","title":"Global Data Sheet","text":"<p>What is Global Data sheet?</p> <p>Global Data sheet is used to contain data that can be used across multiple data sheets (for example application URL, API endpoints etc).</p> <p>How To Use Global Data Sheet?</p> <p>For every project that is created, a default global data sheet is generated.</p> <p>Where to use the Global Data?</p> <p>Identify the Data column name which is common across multiple data sheets.</p> <p></p> <p>Select that data value and click on global data icon, as shown in the image above. Give the global data id, in the respective window, as shown below.</p> <p></p> <p>You will get the global id in the global data sheet, as shown below.</p> <p></p>"},{"location":"tips/#rename-and-refactor","title":"Rename and Refactor","text":"<p>The tool comes with an option to rename and refactor the object, test case, data sheet and reusable component names.</p> <p>Consider the example, given below,</p> <ul> <li>I want to refactor the object billName.</li> </ul> <p></p> <ul> <li>Go to the Object Repository section, select the object and perform a right click. Choose Rename Object or press F2.</li> </ul> <p></p> <ul> <li>The object gets refactored automatically in all the locations, wherever it is used.</li> </ul> <p></p> <ul> <li>The same procedure can be applied to test cases, test data sheets and reusable components as well.</li> </ul>"},{"location":"tips/#report-sharing","title":"Report Sharing","text":"<p>Not Able To View Reports Properly When Shared?</p> <p>When you run any script from design or execution panel, the reports will be available in the location,\\Projects\\Results. <p>If you just share the .html files, your report will open as shown below.</p> <p></p> <p>This is because of the absence of the media folder found in the \\Projects\\\\Results location. The media folder contains all the necessary js, css and other files required to present the report file. <p>So ensure that you share the entire results folder found in the location \\Projects\\\\Results. You can compress and share the zipped file. <p>You can also create standalone reports for the test cases or test sets. Before execution, go to Configurations Options and enable the Create Standalone Report checkbox. After execution, the reports created will be standalone and can be shared independently without the Results folder.</p> User Defined Variables"},{"location":"tips/#user-defined-variables","title":"User Defined Variables","text":"<p>You can create a user defined variable and use the variable to access data in multiple test cases.</p> <p>When Will It Be Useful?</p> <p>This feature really comes in handy when you have to use the same data across multiple test cases.</p> <p>If you are using global data sheet to pass data which is common to various testcases, you will have to map the data in the global data sheet to test data sheets of the respective test cases, which is a bit cumbersome.</p> <p>If you are using the user defined variable, you can directly pass the variable value to the test case i.e. mapping the data to the test data sheets in respective test cases can be skipped.</p> <p>How To Pass The Data To Your Test Case Using The User Defined Variable?</p> <p>Suppose in all your test cases that you create, you first navigate to a particular URL and then perform your row, you can hard code the URL to all you test cases as shown below.</p> <p>Please note there might be some cases where the URL is environment dependent i.e. the URL is different for different environment. In that case you will have to go to each and every test case in your project and change the URL in all the test cases manually.</p> <p></p> <p>These issues can be eliminated by using user defined variables to pass the common data (URL in this case).</p> <p>To create a user defined variable? </p> <p>Go to Configurations Settings UserDefined.</p> <p>Add the variable and pass the value. </p> <p></p> <p>Now, you will be able to use the variable inside your test case as shown below.</p> <p></p> <p>If you wish to run the test case in different environment now, you can simply change the value for the user defined variable and the change will be reflected in all your test cases where the variable is used.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Unable To Open The Framework After Introducing Your Custom Method"},{"location":"troubleshooting/#unable-to-open-the-framework-after-introducing-your-custom-method","title":"Unable To Open The Framework After Introducing Your Custom Method","text":"<p>This happens when the ingenious-engine-.jar found in INGenious installation_location/lib, gets corrupted while exporting the ingenious-engine-.jar back from Engine or while inject script is performed. You might get an exception stating that main class not found. <p>To overcome this issue, always take a backup of the ingenious-engine-.jar before you export the jar from Engine. So even when the jar is corrupt you can still replace the existing jar by the new one. Also do not change the name of the ingenious-engine-.jar available inside the lib folder. <p>Another alternative is to delete the recent items file present in the installation location when INGenious is closed and open again.</p> <p>Note: Please do not take the back up in the same location or inside the lib folder. Place it in a different location.</p> <p>If you face this issue after performing inject script then delete the .class file of your custom method found in the userdefined folder of installation location and close and reopen.</p> <p>Note: This could also be because the .jar files present in the location\\lib\\commands might have got corrupted. So you can simply remove those files to open INGenious.</p> How To Set Java Path Variable For INGenious PKIX path building failed"},{"location":"troubleshooting/#how-to-set-java-path-variable-for-ingenious","title":"How To Set Java Path Variable For INGenious","text":"<p>It is possible to set the java path in the Run.bat for Windows or the Run.command for Mac or Linux. Refer the section below on how it can be done.</p> <p>Prerequisites</p> <p>Following must be installed in your system:</p> <ul> <li> <p>INGenious setup</p> </li> <li> <p>Java 11 and above</p> </li> </ul> <p>How to do it?</p> <ul> <li> <p>Navigate to the location where INGenious is installed in your system.</p> </li> <li> <p>Right-click the Run batch file.</p> </li> <li> <p>Click the edit option in the context menu.</p> </li> <li> <p>Give the path of the jre location under the 'SET PATH' like this, SET PATH=\"C:\\Program Files\\Java\\jdk1.x.x_xx\\jre\\bin\".</p> </li> <li> <p>Save the file.</p> </li> <li> <p>Double-click the Run.bat file and launch Application.</p> </li> </ul>"},{"location":"troubleshooting/#pkix-path-building-failed","title":"PKIX path building failed","text":"<p>If you get a certification path error like this :</p> <p><code>PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code> </p> <p>You need to add the certificate of the application whose APIs you are trying to test. This error can also come if the certificates of Global Selenium Grid is not added (in case of Web Testing using Selenium Grid)</p> <p>To add the certificate follow the steps below :</p> <p>a.  Download the certificate. you can refer to these steps.</p> <p>b. Create a folder called <code>Security</code> in your INGenious root instance.</p> <p>c. Copy the existing Java <code>cacerts</code> file to this folder. Also copy the above downloaded certificate file to this location.</p> <p>e. Using command prompt, navigate to this <code>Security</code> folder</p> <p>d. Import the Trusted Root Certificate into your <code>cacerts</code> keystore, using following command :</p> <p><code>&lt;path/to/your&gt;keytool -import -trustcacerts -keystore cacerts -storepass changeit -alias &lt;logical_name_of_your_cert&gt; -file your_certificate.crt</code></p> <p>Example :</p> <p><code>\"C:\\Program Files\\Java\\jdk-11.0.2\\bin\\keytool\" -import -trustcacerts -keystore cacerts -storepass changeit -alias testApp -file testApp.crt</code></p> <p>e. Make sure in your INGenious <code>Run.bat</code> or/and <code>Run.command file</code>, the reference of the above <code>cacerts</code> is present.</p> <p>Run.bat</p> <pre><code>@echo off\npushd %~dp0\n\nrem For App to load lib from\nSET APP_CLASSPATH=lib\\*;lib\\clib\\*\n\nIF \"%~1\" == \"\" (\nstart javaw -Xms128m -Xmx1024m -Dfile.encoding=UTF-8 -Djavax.net.ssl.trustStore=Security\\cacerts -Djavax.net.ssl.trustStorePassword=changeit -cp ingenious-ide-1.1.jar;%APP_CLASSPATH%; com.ing.ide.main.Main %*\n) ELSE (\njava -Xms128m -Xmx1024m -Dfile.encoding=UTF-8 -cp ingenious-ide-1.1.jar;%APP_CLASSPATH%; com.ing.ide.main.Main %*\n)\n</code></pre>"},{"location":"webpageperformance/","title":"WebPage Performance Testing","text":"<p>What is Webpage Performance Testing?</p> <p>Web Performance Testing is executed to provide accurate information on the readiness of an application through testing the web site and monitoring the server side application. This is done by simulating load as close as possible to the real conditions in order to evaluate if the application will support the expected load.</p> <p>How does INGenious perform Webpage Performance Tests?</p> <p>INGenious can analyse the performance of a Web Page by using some built-in javascript based actions. The framework generates an information-rich performance report which is very handy to visualize which resource consumed how much time.</p> <p>Additionally, there is an option to compare HAR files and even set benchmarks.</p> <p>HAR is the short form for HTTP ARchive format, which tracks all the logging of web browser's interaction with a site. HAR files can be a requirement for troubleshooting issues specifically for problems such as performance and page rendering.</p>"},{"location":"webpageperformance/#actions","title":"Actions","text":""},{"location":"webpageperformance/#capturepagetimings","title":"capturePageTimings","text":"<p>Description: This action captures page navigation and resource timings parameters of the web page last opened or navigated to and stores it in the Performance Report and HAR file.</p> <p>Input Format : @PageName</p> UsageInternally Uses ObjectName Action Input Condition Reference Browser <code>capturePageTimings</code> @value PageName Hardcoded Input Browser <code>capturePageTimings</code> Sheet:Column PageName Input from Datasheet Browser <code>capturePageTimings</code> %dynamicVar% PageName Input from variable <pre><code>    var pt=performance.timing;\n    var t={};\n    t.title=document.title;\n    t.url=window.location.href;\n    for(var k in pt){t[k]=pt[k];}\n    t.toJSON=undefined;\n    return JSON.stringify(t);\n</code></pre>"},{"location":"webpageperformance/#clearcache","title":"clearCache","text":"<p>Description: Clears browser's data, for example cookies.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>clearCache</code> <pre><code>    @Action(object = ObjectType.BROWSER, desc = \"To delete all the cookies\", input = InputType.NO)\n    public void clearCache() {\n        try {\n            Page.context().clearCookies();\n            Report.updateTestLog(Action, \"Cookies Cleared\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Failed to clear cookies\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"webpageperformance/#create-har-files","title":"Create HAR files","text":"<ul> <li> <p>Use the action <code>capturePageTimings</code> on strategic pages</p> </li> <li> <p>Navigate to Configuration Run Settings and check the Performance Reporting and Har check boxes under the Run settings tab.</p> </li> </ul> <p></p> <ul> <li> <p>Once this configuration is saved, run your test set and post the execution you will get a report.Expand the report by clicking on your test case and this time the console icon on the bottom right will change into the Performance Report icon.</p> </li> <li> <p>To launch the performance report click on the Performance Report icon.</p> </li> </ul> <p></p> <ul> <li>The table and graph view contains the har files generated post execution.Click on them to get the various page and resource timings parameters captured by the capturePageTimings action.</li> </ul> <p></p>"},{"location":"webpageperformance/#compare-har-files","title":"Compare Har Files","text":"<ul> <li>To Compare your Har files, navigate to Tools Har Compare and you will be redirected to the Har Comparator site.</li> </ul> <ul> <li>Here you compare the Har files that you have in your project.</li> </ul> <ul> <li>You can and also set benchmarks for achieving standards.</li> </ul>"},{"location":"webservice/","title":"API Testing Actions","text":""},{"location":"webservice/#setendpoint","title":"setEndPoint","text":"<p>Description: This function is used to set the End Point for a Rest/SOAP API. </p> <p>Input Format : @EndPoint</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice setEndPoint @Endpoint (from Editor) &lt;&lt; Hardcoded Input Webservice setEndPoint Sheet:Column &lt;&lt; Input from Datasheet Webservice setEndPoint %dynamicVar% &lt;&lt;Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the Endpoint editor which is capable of parameterising the Endpoint (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Corresponding Code:</p> <p>Performs opening of URL Connection</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-set-end-point-input-inputtypeyes-condition-inputtypeoptional-public-void-setendpoint-try-string-resource-handlepayloadorendpointdata-endpointsputkey-resource-httpagentcheck-openurlconnection-reportupdatetestlogaction-end-point-set-resource-statusdone-catch-filenotfoundexception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-setting-the-end-point-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Set End Point \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void setEndPoint() {\n        try {\n            String resource = handlePayloadorEndpoint(Data);\n            endPoints.put(key, resource);\n            httpAgentCheck();\n            OpenURLconnection();\n            Report.updateTestLog(Action, \"End point set : \" + resource, Status.DONE);\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error setting the end point :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#addheader","title":"addHeader","text":"<p>Description:  This function is used to add a header for a Rest/SOAP API request.</p> <p>Input Format : @<code>HeaderName</code>=<code>HeaderValue</code></p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice addHeader @<code>HeaderName</code>=<code>HeaderValue</code> &lt;&lt; Hardcoded Input Webservice addHeader Sheet:Column containing <code>HeaderName</code>=<code>HeaderValue</code> &lt;&lt; Input from Datasheet Webservice addHeader %dynamicVar% containing <code>HeaderName</code>=<code>HeaderValue</code> &lt;&lt;Input from variable Webservice addHeader @<code>HeaderName</code>=<code>{SheetName:ColumnName}</code> &lt;&lt;Input from variable Webservice addHeader @<code>HeaderName</code>=<code>%dynamicVar%</code> &lt;&lt;Input from variable <p>Corresponding Code:</p> <p>This function adds all the Headers into a HashMap <code>headerlist</code>. Then those are applied to the request as :</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-add-header-input-inputtypeyes-public-void-addheader-try-liststring-sheetlist-controlgetcurrentprojectgettestdatagettestdataforcontrolexerunenv-gettestdatanames-for-int-sheet-0-sheet-sheetlistsize-sheet-if-datacontains-sheetlistgetsheet-comingdatalibtestdatamodeltestdatamodel-tdmodel-controlgetcurrentprojectgettestdata-gettestdatabynamesheetlistgetsheet-liststring-columns-tdmodelgetcolumns-for-int-col-0-col-columnssize-col-if-datacontains-sheetlistgetsheet-columnsgetcol-data-datareplace-sheetlistgetsheet-columnsgetcol-userdatagetdatasheetlistgetsheet-columnsgetcol-collectionobject-valuelist-controlgetcurrentprojectgetprojectsettingsgetuserdefinedsettings-values-for-object-prop-valuelist-if-datacontains-prop-data-datareplace-prop-proptostring-if-headerscontainskeykey-headersgetkeyadddata-else-arrayliststring-tobeadded-new-arrayliststring-tobeaddedadddata-headersputkey-tobeadded-reportupdatetestlogaction-header-added-data-statusdone-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-adding-header-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Add Header \", input = InputType.YES)\n    public void addHeader() {\n        try {\n\n            List&lt;String&gt; sheetlist = Control.getCurrentProject().getTestData().getTestDataFor(Control.exe.runEnv())\n                    .getTestDataNames();\n            for (int sheet = 0; sheet &lt; sheetlist.size(); sheet++) {\n                if (Data.contains(\"{\" + sheetlist.get(sheet) + \":\")) {\n                    com.ing.datalib.testdata.model.TestDataModel tdModel = Control.getCurrentProject().getTestData()\n                            .getTestDataByName(sheetlist.get(sheet));\n                    List&lt;String&gt; columns = tdModel.getColumns();\n                    for (int col = 0; col &lt; columns.size(); col++) {\n                        if (Data.contains(\"{\" + sheetlist.get(sheet) + \":\" + columns.get(col) + \"}\")) {\n                            Data = Data.replace(\"{\" + sheetlist.get(sheet) + \":\" + columns.get(col) + \"}\",\n                                    userData.getData(sheetlist.get(sheet), columns.get(col)));\n                        }\n                    }\n                }\n            }\n\n            Collection&lt;Object&gt; valuelist = Control.getCurrentProject().getProjectSettings().getUserDefinedSettings()\n                    .values();\n            for (Object prop : valuelist) {\n                if (Data.contains(\"{\" + prop + \"}\")) {\n                    Data = Data.replace(\"{\" + prop + \"}\", prop.toString());\n                }\n            }\n\n\n\n            if (headers.containsKey(key)) {\n                headers.get(key).add(Data);\n            } else {\n                ArrayList&lt;String&gt; toBeAdded = new ArrayList&lt;String&gt;();\n                toBeAdded.add(Data);\n                headers.put(key, toBeAdded);\n            }\n\n            Report.updateTestLog(Action, \"Header added \" + Data, Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error adding Header :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#addurlparam","title":"addURLParam","text":"<p>Description: This function is used to add the parameters in your URL in a key value pair (as query strings or URL query parameters)</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice addURLParam @key=value <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-add-parameters-input-inputtypeyes-public-void-addurlparam-try-if-urlparamscontainskeykey-urlparamsgetkeyadddata-else-arrayliststring-tobeadded-new-arrayliststring-tobeaddedadddata-urlparamsputkey-tobeadded-reportupdatetestlogaction-url-param-added-data-statusdone-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-adding-header-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Add Parameters \", input = InputType.YES)\n    public void addURLParam() {\n\n        try {\n            if (urlParams.containsKey(key)) {\n                urlParams.get(key).add(Data);\n            } else {\n                ArrayList&lt;String&gt; toBeAdded = new ArrayList&lt;String&gt;();\n                toBeAdded.add(Data);\n                urlParams.put(key, toBeAdded);\n            }\n            Report.updateTestLog(Action, \"URl Param added \" + Data, Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error adding Header :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n\n    }\n</code></pre>","text":""},{"location":"webservice/#closeconnection","title":"closeConnection","text":"<p>Description: This function is used to close a connection for a Rest/SOAP API request.</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice closeConnection <p>Corresponding Code:</p> <p>Performs disconnection of the URL connection <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Close the connection \", input = InputType.NO)\n    public void closeConnection() {\n        try {\n            // httpConnections.get(key).disconnect();\n            headers.remove(key);\n            responsebodies.remove(key);\n            basicAuthorization = \"\";\n            responsecodes.remove(key);\n            responsemessages.remove(key);\n            endPoints.remove(key);\n            Report.updateTestLog(Action, \"Connection is closed\", Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error closing connection :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre></p>"},{"location":"webservice/#storeresponsebodyindatasheet","title":"storeResponseBodyInDataSheet","text":"<p>Description: This function is used to store the response body of SOAP/REST request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected DatasheetName:ColumnName</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeResponseBodyInDataSheet Sheet:Column &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store Response Message In DataSheet \", input = InputType.YES)\n    public void storeResponseBodyInDataSheet() {\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    userData.putData(sheetName, columnName, responsebodies.get(key));\n                    Report.updateTestLog(Action, \"Response body is stored in \" + strObj, Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing text in datasheet :\" + ex.getMessage(), Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing response body in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"webservice/#assertresponsecode","title":"assertResponseCode","text":"<p>Description: This function is used to validate the response code of SOAP/REST response.</p> <p>Input Format : @Expected code</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertResponseCode @value &lt;&lt; Hardcoded Input Webservice assertResponseCode Sheet:Column &lt;&lt; Input from Datasheet Webservice assertResponseCode %dynamicVar% &lt;&lt;Input from variable <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Code \", input = InputType.YES)\n    public void assertResponseCode() {\n        try {\n            if (responsecodes.get(key).equals(Data)) {\n                Report.updateTestLog(Action, \"Status code is : \" + Data, Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Status code is : \" + responsecodes.get(key) + \" but should be \" + Data,\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating response code :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"webservice/#assertresponsebodycontains","title":"assertResponsebodycontains","text":"<p>Description: This function is used to validate whether the response body of SOAP/REST request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertResponsebodycontains @value &lt;&lt; Hardcoded Input Webservice assertResponsebodycontains Sheet:Column &lt;&lt; Input from Datasheet Webservice assertResponsebodycontains %dynamicVar% &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-assert-response-body-contains-input-inputtypeyes-public-void-assertresponsebodycontains-try-if-responsebodiesgetkeycontainsdata-reportupdatetestlogaction-response-body-contains-data-statuspassns-else-reportupdatetestlogaction-response-body-does-not-contain-data-statusfailns-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-in-validating-response-body-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Body contains \", input = InputType.YES)\n    public void assertResponsebodycontains() {\n        try {\n            if (responsebodies.get(key).contains(Data)) {\n                Report.updateTestLog(Action, \"Response body contains : \" + Data, Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Response body does not contain : \" + Data, Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating response body :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#postsoaprequest","title":"postSoapRequest","text":"<p>Description: This function is used to perform POST action on a SOAP API.</p> <p>Input Format : @Expected Payload</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) &lt;&lt; Hardcoded Input Webservice postRestRequest Sheet:Column &lt;&lt; Input from Datasheet Webservice postRestRequest %dynamicVar% &lt;&lt;Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-post-soap-request-input-inputtypeyes-condition-inputtypeoptional-public-void-postsoaprequest-try-createhttprequestrequestmethodpost-catch-interruptedexception-e-todo-auto-generated-catch-block-eprintstacktrace","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"POST SOAP Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void postSoapRequest() {\n        try {\n            createhttpRequest(RequestMethod.POST);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#storexmlelement","title":"storeXMLelement","text":"<p>Description: This function is used to store a certain XML tag value inside the response body of SOAP request, into a variable.</p> <p>Input Format : @<code>XPath</code> of the tag</p> <p>Condition Format: %variable%</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeXMLelement @<code>XPath</code> %var% &lt;&lt; Hardcoded Input Webservice storeXMLelement Sheet:Column containing <code>XPath</code> %var% &lt;&lt; Input from Datasheet Webservice storeXMLelement %Var% containing <code>XPath</code> %var% &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-store-xml-element-input-inputtypeyes-condition-inputtypeyes-public-void-storexmlelement-try-string-variablename-condition-string-expression-data-if-variablenamematches-documentbuilderfactory-dbfactory-documentbuilderfactorynewinstance-documentbuilder-dbuilder-inputsource-inputsource-new-inputsource-inputsourcesetcharacterstreamnew-stringreaderresponsebodiesgetkey-dbuilder-dbfactorynewdocumentbuilder-document-doc-dbuilderparseinputsource-docgetdocumentelementnormalize-xpath-xpath-xpathfactorynewinstancenewxpath-nodelist-nodelist-nodelist-xpathcompileexpressionevaluatedoc-xpathconstantsnodeset-node-nnode-nodelistitem0-string-value-nnodegetnodevalue-addvarvariablename-value-reportupdatetestlogaction-xml-element-value-stored-statusdone-else-reportupdatetestlogaction-variable-format-is-not-correct-statusdebug-catch-ioexception-parserconfigurationexception-xpathexpressionexception-domexception-saxexception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-storing-xml-element-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element\", input = InputType.YES, condition = InputType.YES)\n    public void storeXMLelement() {\n        try {\n            String variableName = Condition;\n            String expression = Data;\n            if (variableName.matches(\"%.*%\")) {\n                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                DocumentBuilder dBuilder;\n                InputSource inputSource = new InputSource();\n                inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n                dBuilder = dbFactory.newDocumentBuilder();\n                Document doc = dBuilder.parse(inputSource);\n                doc.getDocumentElement().normalize();\n                XPath xPath = XPathFactory.newInstance().newXPath();\n                NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n                Node nNode = nodeList.item(0);\n                String value = nNode.getNodeValue();\n                addVar(variableName, value);\n                Report.updateTestLog(Action, \"XML element value stored\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#storexmlelementindatasheet","title":"storeXMLelementInDataSheet","text":"<p>Description: This function is used to store a certain XML tag value inside the response body of SOAP request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format: XPath of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeXMLelementInDataSheet Sheet:Column XPath &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element In DataSheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeXMLelementInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    String expression = \"\";\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    String xmlText = responsebodies.get(key);\n                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                    DocumentBuilder dBuilder;\n                    InputSource inputSource = new InputSource();\n                    inputSource.setCharacterStream(new StringReader(xmlText));\n                    dBuilder = dbFactory.newDocumentBuilder();\n                    Document doc = dBuilder.parse(inputSource);\n                    doc.getDocumentElement().normalize();\n                    XPath xPath = XPathFactory.newInstance().newXPath();\n                    if (Condition.matches(\"%.*%\"))\n                        expression = getVar(Condition);\n                    else\n                        expression = Condition;\n                    NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n                    Node nNode = nodeList.item(0);\n                    String value = nNode.getNodeValue();\n                    userData.putData(sheetName, columnName, value);\n                    Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE);\n                } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException| SAXException ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n        }\n\n    }\n</code></pre>"},{"location":"webservice/#assertxmlelementequals","title":"assertXMLelementEquals","text":"<p>Description: This function is used to validate whether a certain XML tag of the response body of SOAP request equals an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format: XPath of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertXMLelementEquals @value XPath &lt;&lt; Hardcoded Input Webservice assertXMLelementEquals Sheet:Column XPath &lt;&lt; Input from Datasheet Webservice assertXMLelementEquals %dynamicVar% XPath &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-assert-xml-element-equals-input-inputtypeyes-condition-inputtypeyes-public-void-assertxmlelementequals-try-documentbuilderfactory-dbfactory-documentbuilderfactorynewinstance-documentbuilder-dbuilder-inputsource-inputsource-new-inputsource-inputsourcesetcharacterstreamnew-stringreaderresponsebodiesgetkey-dbuilder-dbfactorynewdocumentbuilder-document-doc-dbuilderparseinputsource-docgetdocumentelementnormalize-xpath-xpath-xpathfactorynewinstancenewxpath-string-expression-condition-nodelist-nodelist-nodelist-xpathcompileexpressionevaluatedoc-xpathconstantsnodeset-node-nnode-nodelistitem0-string-value-nnodegetnodevalue-if-valueequalsdata-reportupdatetestlogaction-element-text-value-is-as-expected-statuspassns-else-reportupdatetestlogaction-element-text-value-is-not-as-expected-statusfailns-catch-ioexception-parserconfigurationexception-xpathexpressionexception-domexception-saxexception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-validating-xml-element-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Equals \", input = InputType.YES, condition = InputType.YES)\n    public void assertXMLelementEquals() {\n\n        try {\n            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dBuilder;\n            InputSource inputSource = new InputSource();\n            inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n            dBuilder = dbFactory.newDocumentBuilder();\n            Document doc = dBuilder.parse(inputSource);\n            doc.getDocumentElement().normalize();\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            String expression = Condition;\n            NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n            Node nNode = nodeList.item(0);\n            String value = nNode.getNodeValue();\n            if (value.equals(Data)) {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is not as expected\", Status.FAILNS);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#assertxmlelementcontains","title":"assertXMLelementContains","text":"<p>Description: This function is used to validate whether a certain XML tag of the response body of SOAP request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format: XPath of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertXMLelementContains @value XPath &lt;&lt; Hardcoded Input Webservice assertXMLelementContains Sheet:Column XPath &lt;&lt; Input from Datasheet Webservice assertXMLelementContains %dynamicVar% XPath &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-assert-xml-element-contains-input-inputtypeyes-condition-inputtypeyes-public-void-assertxmlelementcontains-try-documentbuilderfactory-dbfactory-documentbuilderfactorynewinstance-documentbuilder-dbuilder-inputsource-inputsource-new-inputsource-inputsourcesetcharacterstreamnew-stringreaderresponsebodiesgetkey-dbuilder-dbfactorynewdocumentbuilder-document-doc-dbuilderparseinputsource-docgetdocumentelementnormalize-xpath-xpath-xpathfactorynewinstancenewxpath-string-expression-condition-nodelist-nodelist-nodelist-xpathcompileexpressionevaluatedoc-xpathconstantsnodeset-node-nnode-nodelistitem0-string-value-nnodegetnodevalue-if-valuecontainsdata-reportupdatetestlogaction-element-text-contains-data-is-as-expected-statuspassns-else-reportupdatetestlogaction-element-text-value-does-not-contain-data-statusfailns-catch-ioexception-parserconfigurationexception-xpathexpressionexception-domexception-saxexception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-validating-xml-element-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Contains \", input = InputType.YES, condition = InputType.YES)\n    public void assertXMLelementContains() {\n\n        try {\n            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dBuilder;\n            InputSource inputSource = new InputSource();\n            inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n            dBuilder = dbFactory.newDocumentBuilder();\n            Document doc = dBuilder.parse(inputSource);\n            doc.getDocumentElement().normalize();\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            String expression = Condition;\n            NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n            Node nNode = nodeList.item(0);\n            String value = nNode.getNodeValue();\n            if (value.contains(Data)) {\n                Report.updateTestLog(Action, \"Element text contains [\" + Data + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] does not contain [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#postrestrequest","title":"postRestRequest","text":"<p>Description: This function is used to perform POST action on a Rest API.</p> <p>Input Format : @Expected Payload</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice postRestRequest @Payload (from Editor) &lt;&lt; Hardcoded Input Webservice postRestRequest Sheet:Column &lt;&lt; Input from Datasheet Webservice postRestRequest %dynamicVar% &lt;&lt;Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"POST Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void postRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.POST);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"webservice/#putrestrequest","title":"putRestRequest","text":"<p>Description: This function is used to perform PUT action on a Rest API.</p> <p>Input Format : @Expected Payload</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice putRestRequest @Payload (from Editor) &lt;&lt; Hardcoded Input Webservice putRestRequest Sheet:Column &lt;&lt; Input from Datasheet Webservice putRestRequest %dynamicVar% &lt;&lt;Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"PUT Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void putRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.PUT);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"webservice/#patchrestrequest","title":"patchRestRequest","text":"<p>Description: This function is used to perform PATCH action on a Rest API.</p> <p>Input Format : @Expected Payload</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice patchRestRequest @Payload (from Editor) &lt;&lt; Hardcoded Input Webservice patchRestRequest Sheet:Column &lt;&lt; Input from Datasheet Webservice patchRestRequest %dynamicVar% &lt;&lt;Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-patch-rest-request-input-inputtypeyes-condition-inputtypeoptional-public-void-patchrestrequest-try-createhttprequestrequestmethodpatch-catch-interruptedexception-e-todo-auto-generated-catch-block-eprintstacktrace","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"PATCH Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void patchRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.PATCH);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#getrestrequest","title":"getRestRequest","text":"<p>Description: This function is used to perform GET action on a Rest API.</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice getRestRequest <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"GET Rest Request \", input = InputType.NO, condition = InputType.OPTIONAL)\n    public void getRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.GET);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"webservice/#deleterestrequest","title":"deleteRestRequest","text":"<p>Description:  This function is used to perform DELETE action on a Rest API.</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice deleteRestRequest <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"DELETE Rest Request \", input = InputType.NO)\n    public void deleteRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.DELETE);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"webservice/#storejsonelement","title":"storeJSONelement","text":"<p>Description: This function is used to store a certain JSON tag value from the response body of REST request, into a variable.</p> <p>Input Format : @<code>JSONPath</code> of the tag</p> <p>Condition Format: %variable%</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeJSONelement @<code>JSONPath</code> %var% &lt;&lt; Hardcoded Input Webservice storeJSONelement Sheet:Column containing <code>JSONPath</code> %var% &lt;&lt; Input from Datasheet Webservice storeJSONelement %Var% containing <code>JSONPath</code> %var% &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-store-json-element-input-inputtypeyes-condition-inputtypeyes-public-void-storejsonelement-try-string-variablename-condition-string-jsonpath-data-if-variablenamematches-addvarvariablename-jsonpathreadresponsebodiesgetkey-jsonpathtostring-reportupdatetestlogaction-json-element-value-stored-statusdone-else-reportupdatetestlogaction-variable-format-is-not-correct-statusdebug-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-storing-json-element-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element\", input = InputType.YES, condition = InputType.YES)\n    public void storeJSONelement() {\n        try {\n            String variableName = Condition;\n            String jsonpath = Data;\n            if (variableName.matches(\"%.*%\")) {\n                addVar(variableName, JsonPath.read(responsebodies.get(key), jsonpath).toString());\n                Report.updateTestLog(Action, \"JSON element value stored\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>","text":""},{"location":"webservice/#storejsonelementindatasheet","title":"storeJSONelementInDataSheet","text":"<p>Description: This function is used to store a certain JSON tag value inside the response body of REST request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format: JSONPath of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeJSONelementInDataSheet Sheet:Column JSONPath &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element In DataSheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeJSONelementInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    String response = responsebodies.get(key);\n                    String jsonpath = Condition;\n                    String value = JsonPath.read(response, jsonpath).toString();\n                    userData.putData(sheetName, columnName, value);\n                    Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"webservice/#assertjsonelementequals","title":"assertJSONelementEquals","text":"<p>Description:  This function is used to validate whether a certain JSON tag of the response body of REST request equals an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format : JSON Path of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertJSONelementEquals @value JSONPath &lt;&lt; Hardcoded Input Webservice assertJSONelementEquals Sheet:Column JSONPath &lt;&lt; Input from Datasheet Webservice assertJSONelementEquals %dynamicVar% JSONPath &lt;&lt;Input from variable <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Equals \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementEquals() {\n        try {\n            String response = responsebodies.get(key);\n            String jsonpath = Condition;\n            String value = JsonPath.read(response, jsonpath).toString();\n            if (value.equals(Data)) {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text is [\" + value + \"] but is expected to be [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"webservice/#assertjsonelementcontains","title":"assertJSONelementContains","text":"<p>Description:  This function is used to validate whether a certain JSON tag of the response body of REST request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format : JSON Path of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertJSONelementContains @value JSONPath &lt;&lt; Hardcoded Input Webservice assertJSONelementContains Sheet:Column JSONPath &lt;&lt; Input from Datasheet Webservice assertJSONelementContains %dynamicVar% JSONPath &lt;&lt;Input from variable <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Contains \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementContains() {\n        try {\n            String response = responsebodies.get(key);\n            String jsonpath = Condition;\n            String value = JsonPath.read(response, jsonpath).toString();\n            if (value.contains(Data)) {\n                Report.updateTestLog(Action, \"Element text contains [\" + Data + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] does not contain [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"webservice/#storejsonelementcount","title":"storeJsonElementCount","text":"<p>Description: This function is used to store the count of JSON elements for a given JSON Path of REST request, into a variable.</p> <p>Input Format : @<code>JSONPath</code> of the tag</p> <p>Condition Format: %variable%</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeJsonElementCount @<code>JSONPath</code> %var% &lt;&lt; Hardcoded Input Webservice storeJsonElementCount Sheet:Column containing <code>JSONPath</code> %var% &lt;&lt; Input from Datasheet Webservice storeJsonElementCount %Var% containing <code>JSONPath</code> %var% &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-store-json-element-count-in-variable-input-inputtypeyes-condition-inputtypeyes-public-void-storejsonelementcount-try-string-variablename-condition-condition-data-if-variablenamematches-try-systemoutprintlnupdating-value-in-subiteration-userdatagetsubiteration-int-actualobjectcountinteger-1-getjsonelementcount-string-actualobjectcount-integertostringactualobjectcountinteger-addvarvariablename-actualobjectcount-reportupdatetestlogaction-element-count-actualobjectcount-is-stored-in-variablename-statusdone-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-exgetmessage-ex-reportupdatetestlogaction-error-storing-json-element-in-variable-n-exgetmessage-statusdebug-else-reportupdatetestlogaction-given-condition-condition-format-is-invalid-it-should-be-var-statusdebug-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-storing-json-element-in-variable-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element count in variable \", input = InputType.YES, condition = InputType.YES)\n    public void storeJsonElementCount() {\n\n        try {\n            String variableName = Condition;\n            Condition = Data;\n\n            if (variableName.matches(\"%.*%\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    int actualObjectCountInteger = 1;                                                       //getJsonElementCount();\n                    String actualObjectCount = Integer.toString(actualObjectCountInteger);\n                    addVar(variableName, actualObjectCount);\n                    Report.updateTestLog(Action, \"Element count [\" + actualObjectCount + \"] is stored in \" + variableName,\n                            Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in Variable :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given condition [\" + Condition + \"] format is invalid. It should be [%Var%]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in Variable :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n\n    }\n</code></pre>","text":""},{"location":"webservice/#storejsonelementcountindatasheet","title":"storeJsonElementCountInDataSheet","text":"<p>Description:  This function is used to store in a datasheet the count of JSON elements for a given JSON Path of REST request.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format : JSON Path of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice storeJsonElementCountInDataSheet Sheet:Column JSONPath &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-store-json-element-count-in-datasheet-input-inputtypeyes-condition-inputtypeyes-public-void-storejsonelementcountindatasheet-try-string-strobj-input-if-strobjmatches-try-systemoutprintlnupdating-value-in-subiteration-userdatagetsubiteration-string-sheetname-strobjsplit-20-string-columnname-strobjsplit-21-int-actualobjectcountinteger-1-getjsonelementcount-string-actualobjectcount-integertostringactualobjectcountinteger-userdataputdatasheetname-columnname-actualobjectcount-reportupdatetestlogaction-element-count-actualobjectcount-is-stored-in-strobj-statusdone-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-exgetmessage-ex-reportupdatetestlogaction-error-storing-json-element-in-datasheet-n-exgetmessage-statusdebug-else-reportupdatetestlogaction-given-input-input-format-is-invalid-it-should-be-sheetnamecolumnname-statusdebug-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-storing-json-element-in-datasheet-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element count in Datasheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeJsonElementCountInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    int actualObjectCountInteger = 1;                                                                         //getJsonElementCount();\n                    String actualObjectCount = Integer.toString(actualObjectCountInteger);\n                    userData.putData(sheetName, columnName, actualObjectCount);\n                    Report.updateTestLog(Action, \"Element count [\" + actualObjectCount + \"] is stored in \" + strObj,\n                            Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n\n    }\n</code></pre>","text":""},{"location":"webservice/#assertjsonelementcount","title":"assertJSONelementCount","text":"<p>Description:  This function is used to validate whether the count of JSON elements for a given JSON Path of REST request contains an expected value or not.</p> <p>Input Format : @Expected Value</p> <p>Condition Format : JSON Path of the tag</p> <p>Usage:</p> ObjectName Action Input Condition Reference Webservice assertJSONelementCount @value JSONPath &lt;&lt; Hardcoded Input Webservice assertJSONelementCount Sheet:Column JSONPath &lt;&lt; Input from Datasheet Webservice assertJSONelementCount %dynamicVar% JSONPath &lt;&lt;Input from variable <p>Corresponding Code:</p>"},{"location":"webservice/#actionobject-objecttypewebservice-desc-assert-json-element-count-input-inputtypeyes-condition-inputtypeyes-public-void-assertjsonelementcount-try-string-response-responsebodiesgetkey-int-actualobjectcount-0-jsonparser-parser-new-jsonparser-jsonobject-json-jsonobject-parserparseresponse-try-mapstring-string-objectmap-jsonpathreadjson-condition-actualobjectcount-objectmapkeysetsize-catch-exception-ex-try-jsonarray-objectmap-jsonpathreadjson-condition-actualobjectcount-objectmapsize-catch-exception-ex1-try-netminidevjsonjsonarray-objectmap-jsonpathreadjson-condition-actualobjectcount-objectmapsize-catch-exception-ex2-string-objectmap-jsonpathreadjson-condition-actualobjectcount-1-int-expectedobjectcount-integerparseintdata-if-actualobjectcount-expectedobjectcount-reportupdatetestlogaction-element-count-expectedobjectcount-is-as-expected-statuspassns-else-reportupdatetestlogaction-element-count-is-actualobjectcount-but-is-expected-to-be-expectedobjectcount-statusfailns-catch-exception-ex-loggergetloggerthisgetclassgetnamelogleveloff-null-ex-reportupdatetestlogaction-error-in-validating-json-element-n-exgetmessage-statusdebug","title":"<pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Count \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementCount() {\n\n        try {\n            String response = responsebodies.get(key);\n            int actualObjectCount = 0;\n            JSONParser parser = new JSONParser();\n            JSONObject json = (JSONObject) parser.parse(response);\n            try {\n                Map&lt;String, String&gt; objectMap = JsonPath.read(json, Condition);\n                actualObjectCount = objectMap.keySet().size();\n            } catch (Exception ex) {\n                try {\n                    JSONArray objectMap = JsonPath.read(json, Condition);\n                    actualObjectCount = objectMap.size();\n                } catch (Exception ex1) {\n                    try {\n                        net.minidev.json.JSONArray objectMap = JsonPath.read(json, Condition);\n                        actualObjectCount = objectMap.size();\n                    } catch (Exception ex2) {\n                        String objectMap = JsonPath.read(json, Condition);\n                        actualObjectCount = 1;\n                    }\n                }\n            }\n\n            int expectedObjectCount = Integer.parseInt(Data);\n            if (actualObjectCount == expectedObjectCount) {\n                Report.updateTestLog(Action, \"Element count [\" + expectedObjectCount + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element count is [\" + actualObjectCount + \"] but is expected to be [\" + expectedObjectCount + \"]\", Status.FAILNS);\n            }\n\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    } \n</code></pre>","text":""},{"location":"apiActions/webservice/","title":"API Testing Actions","text":""},{"location":"apiActions/webservice/#setendpoint","title":"setEndPoint","text":"<p>Description: This function is used to set the End Point for a Rest/SOAP API. </p> <p>Input Format : @EndPoint</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>setEndPoint</code> @Endpoint (from Editor) Hardcoded Input Webservice <code>setEndPoint</code> Sheet:Column Input from Datasheet Webservice <code>setEndPoint</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the Endpoint editor which is capable of parameterising the Endpoint (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <p>Performs opening of URL Connection</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Set End Point \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void setEndPoint() {\n        try {\n            String resource = handlePayloadorEndpoint(Data);\n            endPoints.put(key, resource);\n            httpAgentCheck();\n            OpenURLconnection();\n            Report.updateTestLog(Action, \"End point set : \" + resource, Status.DONE);\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error setting the end point :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#addheader","title":"addHeader","text":"<p>Description:  This function is used to add a header for a Rest/SOAP API request.</p> <p>Input Format : @<code>HeaderName</code>=<code>HeaderValue</code></p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>addHeader</code> @<code>HeaderName</code>=<code>HeaderValue</code> Hardcoded Input Webservice <code>addHeader</code> Sheet:Column containing <code>HeaderName</code>=<code>HeaderValue</code> Input from Datasheet Webservice <code>addHeader</code> %dynamicVar% containing <code>HeaderName</code>=<code>HeaderValue</code> Input from variable Webservice <code>addHeader</code> @<code>HeaderName</code>=<code>{SheetName:ColumnName}</code> Input from variable Webservice <code>addHeader</code> @<code>HeaderName</code>=<code>%dynamicVar%</code> Input from variable <p>This function adds all the Headers into a HashMap <code>headerlist</code>. Then those are applied to the request as :</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Add Header \", input = InputType.YES)\n    public void addHeader() {\n        try {\n\n            List&lt;String&gt; sheetlist = Control.getCurrentProject().getTestData().getTestDataFor(Control.exe.runEnv())\n                    .getTestDataNames();\n            for (int sheet = 0; sheet &lt; sheetlist.size(); sheet++) {\n                if (Data.contains(\"{\" + sheetlist.get(sheet) + \":\")) {\n                    com.ing.datalib.testdata.model.TestDataModel tdModel = Control.getCurrentProject().getTestData()\n                            .getTestDataByName(sheetlist.get(sheet));\n                    List&lt;String&gt; columns = tdModel.getColumns();\n                    for (int col = 0; col &lt; columns.size(); col++) {\n                        if (Data.contains(\"{\" + sheetlist.get(sheet) + \":\" + columns.get(col) + \"}\")) {\n                            Data = Data.replace(\"{\" + sheetlist.get(sheet) + \":\" + columns.get(col) + \"}\",\n                                    userData.getData(sheetlist.get(sheet), columns.get(col)));\n                        }\n                    }\n                }\n            }\n\n            Collection&lt;Object&gt; valuelist = Control.getCurrentProject().getProjectSettings().getUserDefinedSettings()\n                    .values();\n            for (Object prop : valuelist) {\n                if (Data.contains(\"{\" + prop + \"}\")) {\n                    Data = Data.replace(\"{\" + prop + \"}\", prop.toString());\n                }\n            }\n\n\n\n            if (headers.containsKey(key)) {\n                headers.get(key).add(Data);\n            } else {\n                ArrayList&lt;String&gt; toBeAdded = new ArrayList&lt;String&gt;();\n                toBeAdded.add(Data);\n                headers.put(key, toBeAdded);\n            }\n\n            Report.updateTestLog(Action, \"Header added \" + Data, Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error adding Header :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#addurlparam","title":"addURLParam","text":"<p>Description: This function is used to add the parameters in your URL in a key value pair (as query strings or URL query parameters)</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>addURLParam</code> @key=value <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Add Parameters \", input = InputType.YES)\n    public void addURLParam() {\n\n        try {\n            if (urlParams.containsKey(key)) {\n                urlParams.get(key).add(Data);\n            } else {\n                ArrayList&lt;String&gt; toBeAdded = new ArrayList&lt;String&gt;();\n                toBeAdded.add(Data);\n                urlParams.put(key, toBeAdded);\n            }\n            Report.updateTestLog(Action, \"URl Param added \" + Data, Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error adding Header :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n\n    }\n</code></pre>"},{"location":"apiActions/webservice/#closeconnection","title":"closeConnection","text":"<p>Description: This function is used to close a connection for a Rest/SOAP API request.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>closeConnection</code> <p>Performs disconnection of the URL connection <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Close the connection \", input = InputType.NO)\n    public void closeConnection() {\n        try {\n            // httpConnections.get(key).disconnect();\n            headers.remove(key);\n            responsebodies.remove(key);\n            basicAuthorization = \"\";\n            responsecodes.remove(key);\n            responsemessages.remove(key);\n            endPoints.remove(key);\n            Report.updateTestLog(Action, \"Connection is closed\", Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error closing connection :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre></p>"},{"location":"apiActions/webservice/#storeresponsebodyindatasheet","title":"storeResponseBodyInDataSheet","text":"<p>Description: This function is used to store the response body of SOAP/REST request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeResponseBodyInDataSheet</code> Sheet:Column Datasheet where value is supposed to be stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store Response Message In DataSheet \", input = InputType.YES)\n    public void storeResponseBodyInDataSheet() {\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    userData.putData(sheetName, columnName, responsebodies.get(key));\n                    Report.updateTestLog(Action, \"Response body is stored in \" + strObj, Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing text in datasheet :\" + ex.getMessage(), Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing response body in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertresponsecode","title":"assertResponseCode","text":"<p>Description: This function is used to validate the response code of SOAP/REST response.</p> <p>Input Format : @Expected code</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertResponseCode</code> @value Hardcoded Input Webservice <code>assertResponseCode</code> Sheet:Column Input from Datasheet Webservice <code>assertResponseCode</code> %dynamicVar% Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Code \", input = InputType.YES)\n    public void assertResponseCode() {\n        try {\n            if (responsecodes.get(key).equals(Data)) {\n                Report.updateTestLog(Action, \"Status code is : \" + Data, Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Status code is : \" + responsecodes.get(key) + \" but should be \" + Data,\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating response code :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertresponsebodycontains","title":"assertResponsebodycontains","text":"<p>Description: This function is used to validate whether the response body of SOAP/REST request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertResponsebodycontains</code> @value Hardcoded Input Webservice <code>assertResponsebodycontains</code> Sheet:Column Input from Datasheet Webservice <code>assertResponsebodycontains</code> %dynamicVar% Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert Response Body contains \", input = InputType.YES)\n    public void assertResponsebodycontains() {\n        try {\n            if (responsebodies.get(key).contains(Data)) {\n                Report.updateTestLog(Action, \"Response body contains : \" + Data, Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Response body does not contain : \" + Data, Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating response body :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#postsoaprequest","title":"postSoapRequest","text":"<p>Description: This function is used to perform POST action on a SOAP API.</p> <p>Input Format : @Expected Payload</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>postSoapRequest</code> @Payload (from Editor) Hardcoded Input Webservice <code>postSoapRequest</code> Sheet:Column Input from Datasheet Webservice <code>postSoapRequest</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"POST SOAP Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void postSoapRequest() {\n        try {\n            createhttpRequest(RequestMethod.POST);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storexmlelement","title":"storeXMLelement","text":"<p>Description: This function is used to store a certain XML tag value inside the response body of SOAP request, into a variable.</p> <p>Input Format : @<code>XPath</code> of the tag</p> <p>Condition Format: %variable%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeXMLelement</code> @<code>XPath</code> %var% Hardcoded Input Webservice <code>storeXMLelement</code> Sheet:Column containing <code>XPath</code> %var% Input from Datasheet Webservice <code>storeXMLelement</code> %Var% containing <code>XPath</code> %var% Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element\", input = InputType.YES, condition = InputType.YES)\n    public void storeXMLelement() {\n        try {\n            String variableName = Condition;\n            String expression = Data;\n            if (variableName.matches(\"%.*%\")) {\n                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                DocumentBuilder dBuilder;\n                InputSource inputSource = new InputSource();\n                inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n                dBuilder = dbFactory.newDocumentBuilder();\n                Document doc = dBuilder.parse(inputSource);\n                doc.getDocumentElement().normalize();\n                XPath xPath = XPathFactory.newInstance().newXPath();\n                NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n                Node nNode = nodeList.item(0);\n                String value = nNode.getNodeValue();\n                addVar(variableName, value);\n                Report.updateTestLog(Action, \"XML element value stored\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storexmlelementindatasheet","title":"storeXMLelementInDataSheet","text":"<p>Description: This function is used to store a certain XML tag value inside the response body of SOAP request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format: XPath of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice `storeXMLelementInDataSheet' Sheet:Column XPath &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store XML Element In DataSheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeXMLelementInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    String expression = \"\";\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    String xmlText = responsebodies.get(key);\n                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                    DocumentBuilder dBuilder;\n                    InputSource inputSource = new InputSource();\n                    inputSource.setCharacterStream(new StringReader(xmlText));\n                    dBuilder = dbFactory.newDocumentBuilder();\n                    Document doc = dBuilder.parse(inputSource);\n                    doc.getDocumentElement().normalize();\n                    XPath xPath = XPathFactory.newInstance().newXPath();\n                    if (Condition.matches(\"%.*%\"))\n                        expression = getVar(Condition);\n                    else\n                        expression = Condition;\n                    NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n                    Node nNode = nodeList.item(0);\n                    String value = nNode.getNodeValue();\n                    userData.putData(sheetName, columnName, value);\n                    Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE);\n                } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException| SAXException ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing XML element in datasheet :\" + \"\\n\" + ex.getMessage(),Status.DEBUG);\n        }\n\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertxmlelementequals","title":"assertXMLelementEquals","text":"<p>Description: This function is used to validate whether a certain XML tag of the response body of SOAP request equals an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format: XPath of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertXMLelementEquals</code> @value XPath Hardcoded Input Webservice <code>assertXMLelementEquals</code> Sheet:Column XPath Input from Datasheet Webservice <code>assertXMLelementEquals</code> %dynamicVar% XPath Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Equals \", input = InputType.YES, condition = InputType.YES)\n    public void assertXMLelementEquals() {\n\n        try {\n            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dBuilder;\n            InputSource inputSource = new InputSource();\n            inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n            dBuilder = dbFactory.newDocumentBuilder();\n            Document doc = dBuilder.parse(inputSource);\n            doc.getDocumentElement().normalize();\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            String expression = Condition;\n            NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n            Node nNode = nodeList.item(0);\n            String value = nNode.getNodeValue();\n            if (value.equals(Data)) {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is not as expected\", Status.FAILNS);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertxmlelementcontains","title":"assertXMLelementContains","text":"<p>Description: This function is used to validate whether a certain XML tag of the response body of SOAP request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format: XPath of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertXMLelementContains</code> @value XPath Hardcoded Input Webservice <code>assertXMLelementContains</code> Sheet:Column XPath Input from Datasheet Webservice <code>assertXMLelementContains</code> %dynamicVar% XPath Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert XML Element Contains \", input = InputType.YES, condition = InputType.YES)\n    public void assertXMLelementContains() {\n\n        try {\n            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dBuilder;\n            InputSource inputSource = new InputSource();\n            inputSource.setCharacterStream(new StringReader(responsebodies.get(key)));\n            dBuilder = dbFactory.newDocumentBuilder();\n            Document doc = dBuilder.parse(inputSource);\n            doc.getDocumentElement().normalize();\n            XPath xPath = XPathFactory.newInstance().newXPath();\n            String expression = Condition;\n            NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n            Node nNode = nodeList.item(0);\n            String value = nNode.getNodeValue();\n            if (value.contains(Data)) {\n                Report.updateTestLog(Action, \"Element text contains [\" + Data + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] does not contain [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (IOException | ParserConfigurationException | XPathExpressionException | DOMException\n                | SAXException ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error validating XML element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#postrestrequest","title":"postRestRequest","text":"<p>Description: This function is used to perform POST action on a Rest API.</p> <p>Input Format : @Expected Payload</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>postRestRequest</code> @Payload (from Editor) Hardcoded Input Webservice <code>postRestRequest</code> Sheet:Column Input from Datasheet Webservice <code>postRestRequest</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"POST Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void postRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.POST);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#putrestrequest","title":"putRestRequest","text":"<p>Description: This function is used to perform PUT action on a Rest API.</p> <p>Input Format : @Expected Payload</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>putRestRequest</code> @Payload (from Editor) Hardcoded Input Webservice <code>putRestRequest</code> Sheet:Column Input from Datasheet Webservice <code>putRestRequest</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the JSON editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"PUT Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void putRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.PUT);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#patchrestrequest","title":"patchRestRequest","text":"<p>Description: This function is used to perform PATCH action on a Rest API.</p> <p>Input Format : @Expected Payload</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>patchRestRequest</code> @Payload (from Editor) Hardcoded Input Webservice <code>patchRestRequest</code> Sheet:Column Input from Datasheet Webservice <code>patchRestRequest</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code>, passed inside the XML editor which is capable of parameterising the Payload (Press ctrl+space to see the list of variables available ), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"PATCH Rest Request \", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void patchRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.PATCH);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#getrestrequest","title":"getRestRequest","text":"<p>Description: This function is used to perform GET action on a Rest API.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>getRestRequest</code> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"GET Rest Request \", input = InputType.NO, condition = InputType.OPTIONAL)\n    public void getRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.GET);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#deleterestrequest","title":"deleteRestRequest","text":"<p>Description:  This function is used to perform DELETE action on a Rest API.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>deleteRestRequest</code> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"DELETE Rest Request \", input = InputType.NO)\n    public void deleteRestRequest() {\n        try {\n            createhttpRequest(RequestMethod.DELETE);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storejsonelement","title":"storeJSONelement","text":"<p>Description: This function is used to store a certain JSON tag value from the response body of REST request, into a variable.</p> <p>Input Format : @<code>JSONPath</code> of the tag</p> <p>Condition Format: %variable%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeJSONelement</code> @<code>JSONPath</code> %var% Hardcoded Input Webservice <code>storeJSONelement</code> Sheet:Column containing <code>JSONPath</code> %var% Input from Datasheet Webservice <code>storeJSONelement</code> %Var% containing <code>JSONPath</code> %var% Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element\", input = InputType.YES, condition = InputType.YES)\n    public void storeJSONelement() {\n        try {\n            String variableName = Condition;\n            String jsonpath = Data;\n            if (variableName.matches(\"%.*%\")) {\n                addVar(variableName, JsonPath.read(responsebodies.get(key), jsonpath).toString());\n                Report.updateTestLog(Action, \"JSON element value stored\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storejsonelementindatasheet","title":"storeJSONelementInDataSheet","text":"<p>Description: This function is used to store a certain JSON tag value inside the response body of REST request, into a respective column of a given datasheet.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format: JSONPath of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeJSONelementInDataSheet</code> Sheet:Column JSONPath &lt;&lt; Datasheet to where value is supposed br stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element In DataSheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeJSONelementInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    String response = responsebodies.get(key);\n                    String jsonpath = Condition;\n                    String value = JsonPath.read(response, jsonpath).toString();\n                    userData.putData(sheetName, columnName, value);\n                    Report.updateTestLog(Action, \"Element text [\" + value + \"] is stored in \" + strObj, Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertjsonelementequals","title":"assertJSONelementEquals","text":"<p>Description:  This function is used to validate whether a certain JSON tag of the response body of REST request equals an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format : JSON Path of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertJSONelementEquals</code> @value JSONPath Hardcoded Input Webservice <code>assertJSONelementEquals</code> Sheet:Column JSONPath Input from Datasheet Webservice <code>assertJSONelementEquals</code> %dynamicVar% JSONPath Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Equals \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementEquals() {\n        try {\n            String response = responsebodies.get(key);\n            String jsonpath = Condition;\n            String value = JsonPath.read(response, jsonpath).toString();\n            if (value.equals(Data)) {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text is [\" + value + \"] but is expected to be [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertjsonelementcontains","title":"assertJSONelementContains","text":"<p>Description:  This function is used to validate whether a certain JSON tag of the response body of REST request contains an expected text or not.</p> <p>Input Format : @Expected Text</p> <p>Condition Format : JSON Path of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertJSONelementContains</code> @value JSONPath Hardcoded Input Webservice <code>assertJSONelementContains</code> Sheet:Column JSONPath Input from Datasheet Webservice <code>assertJSONelementContains</code> %dynamicVar% JSONPath Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Contains \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementContains() {\n        try {\n            String response = responsebodies.get(key);\n            String jsonpath = Condition;\n            String value = JsonPath.read(response, jsonpath).toString();\n            if (value.contains(Data)) {\n                Report.updateTestLog(Action, \"Element text contains [\" + Data + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element text [\" + value + \"] does not contain [\" + Data + \"]\",\n                        Status.FAILNS);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storejsonelementcount","title":"storeJsonElementCount","text":"<p>Description: This function is used to store the count of JSON elements for a given JSON Path of REST request, into a variable.</p> <p>Input Format : @<code>JSONPath</code> of the tag</p> <p>Condition Format: %variable%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeJsonElementCount</code> @<code>JSONPath</code> %var% Hardcoded Input Webservice <code>storeJsonElementCount</code> Sheet:Column containing <code>JSONPath</code> %var% Input from Datasheet Webservice <code>storeJsonElementCount</code> %Var% containing <code>JSONPath</code> %var% Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element count in variable \", input = InputType.YES, condition = InputType.YES)\n    public void storeJsonElementCount() {\n\n        try {\n            String variableName = Condition;\n            Condition = Data;\n\n            if (variableName.matches(\"%.*%\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    int actualObjectCountInteger = 1;                                                       //getJsonElementCount();\n                    String actualObjectCount = Integer.toString(actualObjectCountInteger);\n                    addVar(variableName, actualObjectCount);\n                    Report.updateTestLog(Action, \"Element count [\" + actualObjectCount + \"] is stored in \" + variableName,\n                            Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in Variable :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given condition [\" + Condition + \"] format is invalid. It should be [%Var%]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in Variable :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n\n    }\n</code></pre>"},{"location":"apiActions/webservice/#storejsonelementcountindatasheet","title":"storeJsonElementCountInDataSheet","text":"<p>Description:  This function is used to store in a datasheet the count of JSON elements for a given JSON Path of REST request.</p> <p>Input Format : @Expected datasheet name:column name</p> <p>Condition Format : JSON Path of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>storeJsonElementCountInDataSheet</code> Sheet:Column JSONPath Datasheet where value is to be stored <p>Note: Ensure that your data sheet doesn't contain column names with spaces. </p> <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Store JSON Element count in Datasheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeJsonElementCountInDataSheet() {\n\n        try {\n            String strObj = Input;\n            if (strObj.matches(\".*:.*\")) {\n                try {\n                    System.out.println(\"Updating value in SubIteration \" + userData.getSubIteration());\n                    String sheetName = strObj.split(\":\", 2)[0];\n                    String columnName = strObj.split(\":\", 2)[1];\n                    int actualObjectCountInteger = 1;                                                                         //getJsonElementCount();\n                    String actualObjectCount = Integer.toString(actualObjectCountInteger);\n                    userData.putData(sheetName, columnName, actualObjectCount);\n                    Report.updateTestLog(Action, \"Element count [\" + actualObjectCount + \"] is stored in \" + strObj,\n                            Status.DONE);\n                } catch (Exception ex) {\n                    Logger.getLogger(this.getClass().getName()).log(Level.OFF, ex.getMessage(), ex);\n                    Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                            Status.DEBUG);\n                }\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing JSON element in datasheet :\" + \"\\n\" + ex.getMessage(),\n                    Status.DEBUG);\n        }\n\n    }\n</code></pre>"},{"location":"apiActions/webservice/#assertjsonelementcount","title":"assertJSONelementCount","text":"<p>Description:  This function is used to validate whether the count of JSON elements for a given JSON Path of REST request contains an expected value or not.</p> <p>Input Format : @Expected Value</p> <p>Condition Format : JSON Path of the tag</p> UsageCorresponding Code ObjectName Action Input Condition Reference Webservice <code>assertJSONelementCount</code> @value JSONPath Hardcoded Input Webservice <code>assertJSONelementCount</code> Sheet:Column JSONPath Input from Datasheet Webservice <code>assertJSONelementCount</code> %dynamicVar% JSONPath Input from variable <pre><code>@Action(object = ObjectType.WEBSERVICE, desc = \"Assert JSON Element Count \", input = InputType.YES, condition = InputType.YES)\n    public void assertJSONelementCount() {\n\n        try {\n            String response = responsebodies.get(key);\n            int actualObjectCount = 0;\n            JSONParser parser = new JSONParser();\n            JSONObject json = (JSONObject) parser.parse(response);\n            try {\n                Map&lt;String, String&gt; objectMap = JsonPath.read(json, Condition);\n                actualObjectCount = objectMap.keySet().size();\n            } catch (Exception ex) {\n                try {\n                    JSONArray objectMap = JsonPath.read(json, Condition);\n                    actualObjectCount = objectMap.size();\n                } catch (Exception ex1) {\n                    try {\n                        net.minidev.json.JSONArray objectMap = JsonPath.read(json, Condition);\n                        actualObjectCount = objectMap.size();\n                    } catch (Exception ex2) {\n                        String objectMap = JsonPath.read(json, Condition);\n                        actualObjectCount = 1;\n                    }\n                }\n            }\n\n            int expectedObjectCount = Integer.parseInt(Data);\n            if (actualObjectCount == expectedObjectCount) {\n                Report.updateTestLog(Action, \"Element count [\" + expectedObjectCount + \"] is as expected\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Element count is [\" + actualObjectCount + \"] but is expected to be [\" + expectedObjectCount + \"]\", Status.FAILNS);\n            }\n\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error in validating JSON element :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    } \n</code></pre>"},{"location":"browsertesting/","title":"Browser Testing - (powered by Playwright-Java)","text":"<p>What is Browser Testing?</p> <p>Browser testing has two flavors :</p> <p> It is a form of end-to-end testing where the business functionality or the application behavior is tested through the browser. In this form of testing you mimic how an end user interacts with the application in real world.</p> <p> Another flavor of Browser Testing is to check the non-functional aspects like the look and feel, web element alignment, colors etc. This often includes accessibility and performance testing as well.</p> <p>How does INGenious perform Browser Tests?</p> <p>INGenious uses Playwright and its capabilities to interact with the Browser and perform automated testing against it. INGenious creates an abstraction layer on top of all the Playwright actions and capabilities, making it easy for even non-technical people to write automated tests.</p> <p>All Playwright actions are pre-built inside INGenious. So the users can simply select them from the INGenious IDE making test design fast and easy.</p> <p>Make sure to check out the following topics :</p> <p>Locator Strategies Actions Web Page Performance Accessibility Testing Mocking </p>"},{"location":"browsertesting/autowaiting/","title":"Auto-waiting","text":"<p>Info</p> <p>Playwright performs a range of actionability checks on the elements before making actions to ensure these actions behave as expected. It auto-waits for all the relevant checks to pass and only then performs the requested action. If the required checks do not pass within the given <code>timeout</code>, action fails with the <code>TimeoutError</code>.</p> <p>For example, for <code>click()</code> action, Playwright will ensure that:</p> <ul> <li>locator resolves to an exactly one element</li> <li>element is Visible</li> <li>element is Stable, as in not animating or completed animation</li> <li>element Receives Events, as in not obscured by other elements</li> <li>element is Enabled</li> </ul> <p>Here is the complete list of actionability checks performed for each action:</p> Action Visible Stable Receives Events Enabled Editable Check - Click - Double Click - setChecked - Tap - Uncheck - Hover - - dragTo - - Screenshot - - - Fill - - Clear - - selectOption - - - selectText - - - - scrollIntoViewIfNeeded - - - - Blur - - - - - dispatchEvent - - - - - Focus - - - - - Press - - - - - pressSequentially - - - - - setInputFiles - - - - - <p> Checkout the Playwright documentation here</p>"},{"location":"browsertesting/playwrightauthenticate/","title":"Authentication with Playwright","text":"<p>There are 2 interesting Authentication techniques in INGenious Playwright Studio</p>"},{"location":"browsertesting/playwrightauthenticate/#basic-authentication","title":"Basic Authentication","text":"<p>When working with Basic authentication prompts, which are browser based popups, it is advisable to instantiate an \"authenticated\" playwright browser context. In INGenious Playwright Studio, you can do this, by simply navigating to Run Settings &gt;&gt; Authicate Context and then fill up the details as below :</p> <p></p> <p>After this, you can simply add a test step like :</p> <p><code>Browser</code> <code>Open</code> <code>@yourURL</code></p> <p>You will see, your browser gets logged in to the system without the actual prompts as shown above.</p>"},{"location":"browsertesting/playwrightauthenticate/#storage-state","title":"Storage State","text":"<p>Playwright executes tests in isolated environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.</p> <p>Signing in before each test</p> <p>The following example logs into an application. Once these steps are executed, the browser context will be authenticated.</p> <p></p> <p>Redoing login for every test can slow down test execution. To mitigate that, reuse existing authentication state instead.</p> <p>The last step (<code>StoreStorageState</code>) in the above example, stores the authenticated state in a file <code>a.json</code></p> <p>Reusing signed in state</p> <p>Playwright provides a way to reuse the signed-in state in the tests. That way you can log in only once and then skip the log in step for all of the tests.</p> <p>Web apps use cookie-based or token-based authentication, where authenticated state is stored as cookies or in local storage. Playwright provides BrowserContext.storageState() method that can be used to retrieve storage state from authenticated contexts and then create new contexts with pre-populated state.</p> <p>Cookies and local storage state can be used across different browsers. They depend on your application's authentication model: some apps might require both cookies and local storage.</p> <p>The following setting snippet retrieves state from an authenticated context and creates a new context with that state.</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/","title":"Locator Strategy","text":"<p>Info</p> <p>INGenious uses the built-in locator strategy exposed by Playwright and provides an easy interface to configure them</p> Role Label Placeholder Text Alt Text Title Test Id Text Piercing Shadow DOM Frames"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-role","title":"Locate by Role","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate each element by its implicit role:</p>  Heading Subscribe checkbox Submit Button <p><pre><code>page.getByRole(AriaRole.HEADING,new Page.GetByRoleOptions().setName(\"Sign up\"))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <p><pre><code>page.getByRole(AriaRole.CHECKBOX,new Page.GetByRoleOptions().setName(\"Subscribe\"))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <p><pre><code>page.getByRole(AriaRole.BUTTON,new Page.GetByRoleOptions().setName(\"Submit\"))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have texts or names with partial matches in the DOM. For example :</p> <ul> <li>A <code>Button</code> with text <code>Submit</code></li> <li>A <code>Button</code> with text <code>Submit Your Application</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByRole(AriaRole.BUTTON,new Page.GetByRoleOptions().setName(\"Submit\").setExact(true))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-label","title":"Locate by Label","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the label text:</p> <ul> <li>Password Input Box</li> </ul> <p><pre><code>page.getByLabel(\"Password\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have texts or Labels with partial matches in the DOM. For example :</p> <ul> <li>A <code>Label</code> with text <code>Address</code></li> <li>A <code>Label</code> with text <code>Secondary Address</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByLabel(\"Address\",new Page.GetByLabelOptions().setExact(true))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-placeholder","title":"Locate by Placeholder","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the placeholder text:</p> <ul> <li>Input Box</li> </ul> <p><pre><code>page.getByPlaceholder(\"name@example.com\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have placeholder with partial matches in the DOM. For example :</p> <ul> <li>A <code>Placeholder</code> with text <code>Email</code></li> <li>A <code>Placeholder</code> with text <code>Secondary Email</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByPlaceholder(\"Email\", new Page.GetByPlaceholderOptions().setExact(true))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-text","title":"Locate by Text","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the text it contains:</p> <ul> <li>Span</li> </ul> <p><pre><code>page.getByText(\"Welcome, John\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have texts with partial matches in the DOM. For example :</p> <ul> <li>A <code>header</code> with text <code>Welcome</code></li> <li>A <code>span</code> with text <code>Welcome, John</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByText(\"Welcome\", new Page.GetByTextOptions().setExact(true))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-alt-text","title":"Locate by Alt Text","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the alt text:</p> <ul> <li>Image</li> </ul> <p><pre><code>page.getByAltText(\"playwright logo\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have alt texts with partial matches in the DOM. For example :</p> <ul> <li>An <code>img</code> with alt test <code>ING</code></li> <li>An <code>img</code> with alt text <code>ING Lion</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByAltText(\"ING\", new Page.GetByAltTextOptions().setExact(true));\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-title","title":"Locate by Title","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the title :</p> <ul> <li>Image</li> </ul> <p><pre><code>page.getByTitle(\"Issues count\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li><code>Exact</code> Option</li> </ul> <p>Sometimes you may have titles with partial matches in the DOM. For example :</p> <ul> <li>A <code>span</code> with title <code>Payments</code></li> <li>An <code>span</code> with title <code>Domestic Payments</code></li> </ul> <p>In this case, to identify the first one, you can use the following:</p> <p><pre><code>page.getByTitle(\"Payments\", new Page.GetByTitleOptions().setExact(true))\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-test-id","title":"Locate by Test Id","text":"<p>Consider this DOM example :</p> <p></p> <p>You can locate the element by the title :</p> <ul> <li>Button</li> </ul> <p><pre><code>page.getByTestId(\"directions\")\n</code></pre> In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-by-xpath-or-css","title":"Locate by XPath or CSS","text":"<ul> <li>For CSS :</li> </ul> <p>In INGenious Playwright Studio, you will add it as this :</p> <p></p> <ul> <li>For Xpath :</li> </ul> <p>In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-in-shadow-dom","title":"Locate in Shadow DOM","text":"<p>All locators in Playwright by default work with elements in Shadow DOM. The exceptions are:</p> <ul> <li>Locating by XPath does not pierce shadow roots.</li> <li>Closed-mode shadow roots are not supported.</li> </ul> <p>Consider the following example with a custom web component:</p> <p><pre><code>&lt;x-details role=button aria-expanded=true aria-controls=inner-details&gt;\n&lt;div&gt;Title&lt;/div&gt;\n#shadow-root\n    &lt;div id=inner-details&gt;Details&lt;/div&gt;\n&lt;/x-details&gt;\n</code></pre> You can locate in the same way as if the shadow root was not present at all.</p> <pre><code>page.getByText(\"Details\")\n</code></pre> <p>In INGenious Playwright Studio, you will add it as this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locate-in-frames","title":"Locate in Frames","text":"<p>All locators in Playwright by default work with elements inside a frame/iframe. But first you need to let the page locate the <code>frame</code> using the <code>framelocator</code> function.</p> <p>You can do that in this way : </p> <pre><code>page.frameLocator(\"iframe[name='firstFr']\").getByPlaceholder(\"Enter name\")\n</code></pre> <p>In INGenious Playwright Studio, you will add it as this :</p> <p></p> <p>If there are nested frames, then just add the frame locators separated by semicolon, in the Frame box :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#browser-contextpage-configurations","title":"Browser-Context/Page Configurations","text":"Headless, SlowMo and other Browser Context Options Emulation Locale and Timezone"},{"location":"browsertesting/playwrightlocatorstrategy/#browser-context-options","title":"Browser Context Options","text":"<p>The following options can be set while creating a Browser Context :</p> Options Description <code>setHeadless</code> By default, this is <code>true</code>. If you set it as <code>false</code>, you will see the browsers opening up during execution <code>setSlowMo</code> This is slow down the execution by **N milliseconds per operation <code>setChannel</code> Browser distribution channel. Supported values are chrome, chrome-beta, chrome-dev, chrome-canary, msedge, msedge-beta, msedge-dev, msedge-canary. <code>setChromiumSandbox</code> Enable Chromium sandboxing. Defaults to <code>false</code>. <code>setDevtools</code> Chromium-only. Whether to auto-open a Developer Tools panel for each tab. If this option is <code>true</code>, the headless option will be set <code>false</code>. <code>setDownloadsPath</code> If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were created in is closed. <code>setExecutablePath</code> Path to a browser executable to run instead of the bundled one. If executablePath is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk. <code>setTimeout</code> Maximum time in milliseconds to wait for the browser instance to start. Defaults to <code>30000</code> (30 seconds). Pass <code>0</code> to disable timeout. <code>setProxy</code> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example <code>http://myproxy.com:3128</code> or <code>socks5://myproxy.com:3128</code>. Short form <code>myproxy.com:3128</code> is considered an HTTP proxy. <p>In INGenious Playwright Studio you can specify all of these in the Configuration Window like this :</p> <p></p>"},{"location":"browsertesting/playwrightlocatorstrategy/#emulation","title":"Emulation","text":"<p>Playwright can emulate various devices by specifying the following options when creating a context :</p> <ul> <li><code>setDeviceScaleFactor</code> </li> <li><code>setHasTouch</code> </li> <li><code>setIsMobile</code> </li> <li><code>setScreenSize</code> </li> <li><code>setUserAgent</code> </li> <li><code>setViewportSize</code> </li> </ul> <p>In INGenious Playwright Studio you can specify all of these in the Configuration Window like this :</p> <p></p> <p>The complete list of Playwright supported device configurations can be found here</p>"},{"location":"browsertesting/playwrightlocatorstrategy/#locale-and-timezone","title":"Locale and Timezone","text":"<p>Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests.</p> <ul> <li><code>setLocale</code> </li> <li><code>setTimezoneId</code> </li> </ul> <p>In INGenious Playwright Studio you can specify all of these in the Configuration Window like this :</p> <p></p>"},{"location":"browsertesting/playwrightmocking/","title":"Mocking with INGenious Playwright Studio","text":"<p>When to use Mocking?</p> <p>When working with following situations :</p> <ul> <li>third party API's </li> <li>systems where the data gets refreshed</li> <li>systems which are under development and are often unavailable</li> </ul> <p>it is better to mock the API call rather than hit the API especially when they are API's that you do not control. You might also want to mock an API when in development mode and the API hasn't been written yet. Mocking the API allows you to finish developing your component or app and write the tests and then when the API is ready you can just swap out the mock for the real API call.</p> <p>With Playwright you don't need any additional libraries like Wiremock to mock an API call. You can use the <code>page.route</code> method to intercept the API call and return a mock response. This means that instead of hitting the real API the browser will return the mocked response.</p> <p>In the example below, we are intercepting an API call to <code>http://localhost:3001/graphql</code> and returning the following mocked response :</p> <p><pre><code>{\n    \"data\": {\n        \"listBankAccount\": [\n            {\n                \"id\": \"pgl34JtnfhX\",\n                \"uuid\": \"0939b3fe-02da-46f4-a3a6-f06f0fc49f75\",\n                \"userId\": \"uBmeaz5pX\",\n                \"bankName\": \"ING Bank\",\n                \"accountNumber\": \"7774132232\",\n                \"routingNumber\": \"996645387\",\n                \"isDeleted\": false,\n                \"createdAt\": \"2023-03-28T21:55:07.857Z\",\n                \"modifiedAt\": \"2024-03-07T20:50:34.541Z\"\n            }\n        ]\n    }\n}\n</code></pre>  by using the fulfill method, method, which fulfills a route's request with a given response.</p> <p>In INGenious Playwright Studio, the steps will look like this :</p> <p></p> <p>The data in the payload can be parameterized from datasheets as well.</p> <p>The built-in mocking actions can be found here</p>"},{"location":"browsertesting/playwrightreporting/","title":"Playwright | Report Analysis","text":"Built-in HTML report Built-in Extent report <p>Additional Reporting and Debugging Capabilities</p> <p>The following are the built-in capabilities within the framework to perform report analysis for Playwright-Java tests, in addition to the already available reporting in INGenious</p> Tracing Videos HAR files"},{"location":"browsertesting/playwrightreporting/#built-in-html-report","title":"Built-in HTML report","text":"<p>INGenious has a powerful built-in HTML Report that gets generated after every test execution.</p> <p></p> <p>If we click on any of the test cases, it will show a detailed step-wise report like this : </p> <p></p>"},{"location":"browsertesting/playwrightreporting/#built-in-extent-report","title":"Built-in Extent report","text":"<p>INGenious has built-in Extent Report that gets generated after every test execution when this checkbox is ticked :</p> <p></p> <p>If we run the tests only from the Execution Pane, a detailed step-wise report will show up, like this : </p> <p></p>"},{"location":"browsertesting/playwrightreporting/#tracing","title":"Tracing","text":"<p>From INGenious you can generate traces for all playwright tests that are being executed. You can do this from the Run Settings</p> <p></p> <p>When you do this, the traces are saved in the <code>Results</code> location of the corresponding tests.</p> <p>Traces are a great way for debugging your tests. You can open the saved trace using the following options :</p> <ul> <li>On your browser on <code>trace.playwright.dev</code> [This is not recommended in ING as your tests contain details about you ING applications]</li> <li>Using Playwright CLI . Make sure to add the full path to where your <code>trace.zip</code> file is located. This should include the full path to your <code>trace.zip</code> file.</li> </ul> <pre><code>mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace &lt;full/path/to/trace.zip&gt;\"\n</code></pre>"},{"location":"browsertesting/playwrightreporting/#videos","title":"Videos","text":"<p>From INGenious you can generate videos for all playwright tests that are being executed. You can do this from the Run Settings</p> <p></p> <p>When you do this, the videos are saved in the <code>Results</code> location of the corresponding tests.</p>"},{"location":"browsertesting/playwrightreporting/#har-files","title":"HAR files","text":"<p>From INGenious you can generate HAR (Http Archive) files for all playwright tests that are being executed. You can do this from the Run Settings</p> <p></p> <p>When you do this, the HAR files are saved in the <code>Results</code> location of the corresponding tests.</p>"},{"location":"customizations/","title":"INGenious | Code view","text":"<p>INGenious IDE (the user interface) uses the code and logic written in the INGenious Engine to test applications. This makes the Engine, the heart of the solution. All test actions (Browser or API) , assertions and every other logic is built inside this Engine.</p> <p>INGenious exposes this Engine as <code>Maven</code> project which can easily be imported into your favourite IDE. After that you can perform any of these actions :</p> <ul> <li> New Actions using existing libraries</li> <li> Update Actions which already exist</li> <li> Import New libraries for new actions</li> </ul> <p>Tip</p> <p>INGenious is built in Java. So anything and everything that can be coded with java, can be done with INGenious!</p> <p>Learn more about the following topics :</p> <p>Engine Custom functions Command Line Interface</p>"},{"location":"customizations/customfunction/","title":"Customization &amp; Source Code Maintenance","text":"<p>Abstract</p> <p>The framework mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new <code>action</code> or <code>utility</code> to be implemented, for example performing PDF or Excel validation. This can be done by creating your own custom method.</p>"},{"location":"customizations/customfunction/#requirements","title":"Requirements","text":"<p>For your Custom Methods to appear in the INGenious IDE and available for auto-suggestion :</p> <ul> <li> <p> Custom Methods should be <code>public</code>.</p> </li> <li> <p> The return type of Custom Methods should be <code>void</code>.</p> </li> <li> <p> Custom Methods should not contain parameters (use Data or Input or Condition variable for fetching data from the test case).</p> </li> <li> <p> Custom Method should contain the <code>@Action</code> annotation in order for it to get auto-suggested in the INGenious IDE.</p> </li> <li> <p> Ensure that you import all the jars mentioned below, in your java file containing the Custom Method.</p> </li> </ul> <pre><code>import com.ing.engine.commands.General;\nimport com.ing.engine.core.CommandControl;\nimport com.ing.engine.support.Status;\nimport com.ing.engine.support.methodInf.Action;\nimport com.ing.engine.support.methodInf.ObjectType;\nimport com.ing.engine.support.methodInf.InputType;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n</code></pre> <ul> <li> The java class file containing the Custom Method should always have a <code>constructor</code> as shown below, since it must extend the General class.</li> </ul> <pre><code>public class SampleScript extends General {\n    public SampleScript(CommandControl cc) {\n        super(cc);\n    }\n\n    @Action(object = ObjectType.BROWSER, desc = \"&lt;Description of the Method&gt;\", input = InputType.YES)\n    public void customfunction() {\n        try {\n\n            // Here in goes the logic of the method \n\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n        }\n    }\n}\n</code></pre> Reporting External Libraries Globally Exposed Variables you can use in your Custom Method Execute A Specific Test Case From Custom Method Execute An Action From  Custom Method Access An Object From Object Repository If-Else or other Conditions Inside A Custom Method Access Test Data Sheet In Custom Method Stop Current Execution/Iteration Based On A Condition Get Iteration/Subiteration Value Of The Current TestStep Get Current Scenario/TestCase Get ObjectRepository Properties Of WebElement Add Value To A Variable Access A Variable's Value In Custom Method Sample Custom Method"},{"location":"customizations/customfunction/#reporting","title":"Reporting","text":"<p>To display the status of the custom action in the report, you can use the function <code>Report.updateTestLog</code> as described below.</p> <pre><code>Report.updateTestLog(\"Userdefined Action\", \"Operation Done successfully\", Status.PASS);\n\n// Possible Statuses are Status.PASS, Status.PASSNS, Status.FAIL, Status.FAILNS, Status.DONE, Status.DEBUG, Status.WARNING,Status.SCREENSHOT\n// NS = No Screenshot\n</code></pre> <p>To display with custom html tags in the report, use the following,</p> <pre><code>Report.updateTestLog(\"Userdefined Action\", \"#CTAG &amp;lt;b&amp;gt; Operation Done successfully&amp;lt;b&amp;gt;;\", Status.PASS);\n</code></pre>"},{"location":"customizations/customfunction/#adding-external-libraries","title":"Adding External Libraries","text":"<ul> <li> <p>Create your custom method that uses external jar(s) apart from the existing set of libraries under the lib folder.</p> </li> <li> <p>Add your external maven dependencies to the POM file.</p> </li> <li> <p>Always ensure that your custom method is working fine from your source code before introducing it in to the framework</p> </li> <li> <p>Run <code>mvn install</code> to build the output jar</p> </li> </ul>"},{"location":"customizations/customfunction/#globally-exposed-variables","title":"Globally Exposed Variables","text":"<p>Following variables are defined internally and can be used in your custom method for deriving various kinds of information like the action in execution or the value stored under the Input column and etc. Given below is the description about each of the variable or keyword on the basis of it's functionality and usage.</p> <p>Playwright</p> <p>Page</p> <p>BrowserContext</p> <p>Locator</p> <p>Data</p> <p>Input</p> <p>Description</p> <p>Action</p> <p>Reference</p>"},{"location":"customizations/customfunction/#playwright","title":"Playwright","text":"<ul> <li>Type : <code>Playwright</code></li> <li>Description : This variable will store the instance of the Playwright for the current execution. Hence you can perform all the Playwright related functions using this.</li> </ul> <p> Usage :</p> <pre><code>    Playwright.close();\n</code></pre>"},{"location":"customizations/customfunction/#page","title":"Page","text":"<ul> <li>Type : <code>Page</code></li> <li>Description : This variable will store the instance of the Page for the current execution. Hence you can perform all the Page related functions using this.</li> </ul> <p> Usage :</p> <pre><code>    Page.bringToFront();\n</code></pre>"},{"location":"customizations/customfunction/#browsercontext","title":"BrowserContext","text":"<ul> <li>Type : <code>BrowserContext</code></li> <li>Description : This variable will store the instance of the BrowserContext for the current execution. Hence you can perform all the BrowserContext related functions using this.</li> </ul> <p> Usage :</p> <pre><code>    BrowserContext.newPage();\n</code></pre>"},{"location":"customizations/customfunction/#locator","title":"Locator","text":"<ul> <li>Type : <code>Locator</code></li> <li>Description : This variable corresponds to the Web Object used under the ObjectName column of your currently executing test step. If there is no Object used in the ObjectName column of your Test step, then this variable will be Null. You can perform all WebElement related functions using this variable like for instance.</li> </ul> <p> Usage :</p> <pre><code>   Locator.highlight();\n</code></pre>"},{"location":"customizations/customfunction/#data","title":"Data","text":"<ul> <li> <p>Type : <code>String</code></p> </li> <li> <p>Description :This variable stores the resolved data from the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data, the <code>Data</code> variable will hold the actual value inside.</p> </li> </ul> <p> Usage :</p> <pre><code>System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\");\n</code></pre>"},{"location":"customizations/customfunction/#input","title":"Input","text":"<ul> <li>Type : <code>String</code></li> <li>Description : This variable stores the visible text/string in the Input Column of the current test step in execution. That means if the step is being fed a data from the datasheet like SheetName:ColumnName or variable like %var% or hardcoded as @data, the <code>Input</code> variable will hold the values as SheetName:ColumnName, %var% and @data respectivey</li> </ul> <p> Usage : <pre><code>System.out.println(Input + \"Input used in InputColumn in the currentTestStep\");\n</code></pre></p>"},{"location":"customizations/customfunction/#description","title":"Description","text":"<ul> <li>Type : <code>String</code></li> <li>Description : This variable stores the description present in the description column of the current test step.</li> </ul> <p> Usage : <pre><code>System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\");\n</code></pre></p>"},{"location":"customizations/customfunction/#action","title":"Action","text":"<ul> <li>Type : <code>String</code></li> <li>Description : This variable stores the name of the action used in the Action column of the current test step.</li> </ul> <p> Usage :     <pre><code>System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\");\n</code></pre></p>"},{"location":"customizations/customfunction/#reference","title":"Reference","text":"<ul> <li>Type : <code>String</code></li> <li>Description : TThis variable stores the Name of the Page given under the Reference column of the current test step in execution. This Name of the Page is actually defined in the Object Repository.</li> </ul> <p> Usage : <pre><code>System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\");\n</code></pre></p>"},{"location":"customizations/customfunction/#execute-test-case-from-code","title":"Execute Test Case from Code","text":"<p>There is an inbuilt method available called <code>executeTestCase</code>, which can be used to execute a particular test case under a particular scenario.</p> <pre><code>public void executeTestCase(String scenarioName, String testCaseName);\npublic void executeTestCase(String scenarioName, String testCaseName, int subIteration);\n</code></pre> <p>The above method will execute the test case under the particular scenario and for that particular subiteration.</p>"},{"location":"customizations/customfunction/#execute-action-from-code","title":"Execute Action from Code","text":"<p>A method called executeMethod is available with the Engine and is overloaded in 4 different ways as follows. The name of the Action to be executed, should be passed as an argument and must be same as the action in the Engine.</p> Type 1Type 2Type 3Type 4 <p><pre><code>public void executeMethod(WebElement element, String Action);\n</code></pre> Using this function you can provide the element and the action name, in the argument list, to execute the action on the element passed. For example,</p> <pre><code>executeMethod(element, \"Click\");\n</code></pre> <pre><code>public void executeMethod(String Action, String Input);\n</code></pre> <p>Using this function you can execute the action on the <code>current</code> element which also requires the information under the Input column or some String information that can be given directly.</p> <p>For example:</p> <pre><code>executeMethod(\"Open\", \"@http://something\");\nexecuteMethod(\"Open\", input);\n</code></pre> <pre><code>public void executeMethod(WebElement element, String Action, String Input);\n</code></pre> <p>Using this function you can execute the action on the supplied element which requires the information under the Input column or some String information that can be given directly.</p> <p>For example:</p> <pre><code>executeMethod(element, \"Set\", input);\n</code></pre> <p><pre><code>public void executeMethod(String Action);\n</code></pre> This will just call the method of the action that was instructed. </p> <p>Any of these overloaded methods can be used that suits your requirements best.</p> <p>Another method to call an action without using the executeMethod function is to go with the code described below, Here, we have to set the Data variable for the current step and call the <code>Set</code> action for execution.</p> <pre><code>getCommander().Data = \"guest\";//This line will assign a value to the Data variable used in the current test step.\nnew Basic(getCommander()).Set();//This line will call the Set action under the Basic java class file.\n</code></pre> <p>Another example of using the getCommander() function to call an action is as follows.Here the method containing the definition for the action assertElementNotDisplayed is available under the AssertElement java class file.</p> <pre><code>new AssertElement(getCommander()).assertElementNotDisplayed();//This line will just make a call to the action \"assertlementNotDisplayed\"\n</code></pre>"},{"location":"customizations/customfunction/#access-object-from-or","title":"Access Object from OR","text":"<p>It is possible to access a specific object from the object repository using the function AObject.findElement as shown below.</p> <pre><code>Locator locator = AObject.findElement(ObjectName, Reference);\n</code></pre> <p>Now all element related functions can be used for this <code>element</code> variable like;</p> <pre><code>element.fill(Data);\n</code></pre> <p>It is also possible to use conditioned find method.Suppose you want to find an object on a web page using a particular property,obtained from the stored set of object properties in the Object Repository (OR), then you can use the following function.</p> <pre><code>Locator locator = AObject.findElement(\"p\", \"Yahoo\", ObjectProperty.Id);\n</code></pre> <p>In the example below, a list of objects so obtained can be accessed by storing them in an ArrayList.</p> <pre><code>List &lt;Locator&gt; locatorList= AObject.findElements(\"p\", \"Yahoo\", ObjectProperty.ClassName);\n</code></pre> <p>In the above example <code>object</code> p under the <code>page</code> with name Yahoo (from the object repository) is found on the web page by using the Id property.</p>"},{"location":"customizations/customfunction/#if-elseconditional-statement","title":"If-Else/Conditional statement","text":"<p>It is possible to write a custom function, that checks for a condition and if the condition passes it will execute a set of code and if it fails then it will execute a different set of code.The custom method example <code>handleCondition</code> defined below, will check if the element is displayed and if so, it will execute the test case <code>cancelTicket</code> but if it is not displayed then it will just update the report with a DONE status.</p> <pre><code>public void handleCondition() throws FrameworkException {\n\n    // No argument should be given here. Only then will this function be executed\n\n\n    //Step 1: Getting object from the object repository\n    Locator locator = AObject.findElement(\"ObjectName\", \"PageName\");\n\n    //Step 2: Base the condition on object being displayed or not\n    if (locator.isVisible()) {\n\n        //Calling another test case if the condition is matched\n\n        //Pass the Scenario name,Test case name and sub-iteration index\n        executeTestCase(\"testscenario1\", \"cancelTicket\", 1);\n        Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS);\n\n\n        //If needed you can break the test case also by calling existing functions\n        executeMethod(\"StopBrowser\");\n\n    } else {\n\n        Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE);\n\n    }\n}\n</code></pre>"},{"location":"customizations/customfunction/#access-data-sheet-from-code","title":"Access Data Sheet from Code","text":"Local Data Sheet Global Data Sheet Test Data Model"},{"location":"customizations/customfunction/#local-data-sheet","title":"Local Data Sheet","text":"<p>Get Data</p> <p>Put Data</p>"},{"location":"customizations/customfunction/#getdata","title":"getData","text":"<p>There are functions to access the data from the datasheet. The getData function is overloaded in the following ways and can be used accordingly in your custom method.</p> Type 1Type 2Type 3 <pre><code>public String getData(String DataSheetName, String ColumnName);\n</code></pre> <p>Provide the name of the data sheet (Sample) and column (Data1) that contains the data and this function will return a string which is the value of the required data.  For instance:</p> <pre><code>String input = userData.getData(\"Sample\", \"Data1\");\n</code></pre> <pre><code>public String getData(String DataSheetName, String ColumnName, String Iteration, String SubIteration);\n</code></pre> <p>Provide the sheet name, column, iteration and subiteration values if you want to be specific, as shown in the example below;</p> <p><pre><code>String input = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\");\n</code></pre> Here the data stored in the sheet Sample, under the column Data1 having the subiteration and iteration value as 1, is stored in the input string variable. Another way is to provide all the information as given above in the argument list and also include the scenario and test case name.</p> <p><pre><code>public String getData(String DataSheetName, String ColumnName, String ScenarioName,String TestCase, String Iteration, String SubIteration);\n</code></pre> Example : <pre><code>String input = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\");\n</code></pre></p> <p>In the example above the data stored in the sheet Sample under the column Data1 and belonging to the testcase named testcase and scenario named scenario having the iteration and subiteration value as 1, is stored in input string.</p>"},{"location":"customizations/customfunction/#putdata","title":"putData","text":"<p>It is also possible to write to the data sheet using \"putData\". The putData() function is overloaded in the following ways,</p> Type 1Type 2Type 3 <p><pre><code>userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\");\n</code></pre> Example:</p> <pre><code>userData.putData(\"Sample\", \"Data1\", \"John Doe\");\n</code></pre> <p>where Sample is the datasheet name, Data1 is the column name and John Doe is the value to be written under the respective column.</p> <p>You can also provide the iteration and subiteration values in the argument list.</p> <p><pre><code>userData.putData(\"DatasheetName\", \"ColumnName\", \"value to be written\", \"Iterationvalue\", \"SubIteration value\");\n</code></pre> An example for this is,</p> <pre><code>userData.putData(\"Sample\", \"Data1\", \"John Doe\", \"1\", \"1\");\n</code></pre> <p>where Sample is the datasheet name, Data1 is the column name and John Doe is the value to be written under the respective column for the iteration value of 1 and subiteration value of 1.</p> <p>Apart from the information above you can also include the test case and scenario name as shown below,</p> <pre><code>userData.putData(\"DatasheetName\",\"columnName\",\"value to be written\",\"scenario name\",\"test case name\",\"Iteration value\",\"SubIteration value\");\n</code></pre> <p>An example for the above scenario is shown below,</p> <pre><code>userData.putData(\"Sample\", \"Data1\", \"John Doe\", \"scenario\", \"testcase\", \"1\", \"1\");\n</code></pre> <p>where Sample is the datasheet name, Data1 is the column name, testcase is the testcase name,scenario is the scenario name and John Doe is the value to be written under the respective column for the iteration and subiteration value of 1.</p>"},{"location":"customizations/customfunction/#global-data-sheet","title":"Global Data Sheet","text":"<p>To access a global data sheet from the custom method to read a global data value, use the method below :</p> <p><pre><code>userData.getGlobalData(globalDataID, columnName);\n</code></pre> Example: <pre><code>String datavalue = userData.getGlobalData(\"Glob1\", \"username\");\n</code></pre></p> <p>To write or update a global data sheet, call the method below in your custom method,</p> <p><pre><code>userData.putGlobalData(globalDataID, columnName, value);\n</code></pre> Example: <pre><code>userData.putGlobalData(\"Glob1\", \"username\", \"LukeSkywalker\");\n</code></pre></p>"},{"location":"customizations/customfunction/#testdatamodel","title":"TestDataModel","text":"<p>As an alternative, you can use the following code to access the data sheet by its name and update the same, traversing through every record in the test data sheet.</p> <pre><code>TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\"TestDataSheetName\");\ntdModel.loadTableModel();\nint rowsCount = tdModel.getRowCount();\nfor (int row = 0; row &lt; tdModel.getRowCount(); row++) {\n\n    // Where orderId is a column in my data sheet\n    int colIndex = tdModel.getColumnIndex(\"orderId\");\n\n    //To get value\n    String orderId = (String) tdModel.getValueAt(row, colIndex);\n\n    // To put values in to the sheet\n    tdModel.setValueAt(\"New Value\", row, colIndex);\n}\n</code></pre>"},{"location":"customizations/customfunction/#stop-current-execution","title":"Stop Current Execution","text":"<p>The following code can be used to stop the current iteration based on a condition.</p> <pre><code>Boolean something = false;\nif (something) {\n    SystemDefaults.stopCurrentIteration.set(true);//Stop the iteration\n}\n</code></pre> <p>The following code can be used to stop the current execution based on a condition.</p> <pre><code>Boolean something = false;\nif (something) {\n    SystemDefaults.stopExecution.set(true);//Stop the execution\n}\n</code></pre>"},{"location":"customizations/customfunction/#get-iterationsubiteration","title":"Get Iteration/Subiteration","text":"<p>It is possible to get the value of current iteration using the function \"getIteration\"</p> <pre><code>String iterationValue=userData.getIteration();\n</code></pre> <p>This function returns a string value containing the Iteration number of the current iteration.</p> <p>It is also possible to get the value of current subiteration using the function getSubIteration</p> <pre><code>String subiterationValue=userData.getSubIteration();\n</code></pre> <p>This function returns a string value containing the Subiteration number of the current sub iteration that is in execution.</p>"},{"location":"customizations/customfunction/#get-current-scenariotestcase","title":"Get Current Scenario/TestCase","text":"<p>The getScenario function returns a string value containing the name of the current scenario that is in execution.</p> <pre><code>String scenarioName=userData.getScenario();\n</code></pre> <p>The getCurrentScenario function returns a string value containing the name of the current <code>Reusable</code> scenario that is in execution.</p> <pre><code>String reusableScenarioName=userData.getCurrentScenario();\n</code></pre> <p>The getTestCase function returns a string value containing the name of the current test case in execution.</p> <pre><code>String testcaseName= userData.getTestCase();\n</code></pre> <p>The getCurrentTestCase function returns a string value containing the name of the current <code>Reusable</code> test case in execution.</p> <pre><code>String testcaseName= userData.getCurrentTestCase();\n</code></pre>"},{"location":"customizations/customfunction/#get-objectrepository-properties","title":"Get ObjectRepository Properties","text":"<p>It is possible to access the specific property of an element stored in the Object Repository  using the function <code>AObject.getObjectProperty()</code> described below.</p> <pre><code>String prop = AObject.getObjectProperty(\"pageName\", \"objectName\", ObjectProperty.Id);\n</code></pre> <p>In the above scenario, pass the name of the page (under which the object is present in the Object Repository), objectName and object property that you want to access. You can also use the following method to get the particular property of the object from the OR.</p> <pre><code>String prop = AObject.getWebObject(\"pageName\", \"objectName\").getId();\nprop = AObject.getWebObject(Reference, ObjectName).getAttributeByName(ObjectProperty.Id); //to get current step object's Id property\n</code></pre>"},{"location":"customizations/customfunction/#add-value-to-a-variable","title":"Add Value To A Variable","text":"<p>Suppose you want to create a variable and define a value to it, you can go for addVar(arg1,arg2) function or addGlobalVar(arg1,arg2) methods.</p> <p>The <code>addVar(arg1,arg2)</code> function takes the variable name and it's value as parameters and is defined under the com.ing.engine.commands.Command java file as shown below,</p> <pre><code>public void addVar(String key, String val) {\nCommander.addVar(key, val);\n}\n</code></pre> <p>This method can be used as shown below:</p> <pre><code>addVar(\"%nameVar%\", \"LukeSkywalker\");\n</code></pre> <p>The scope of this variable is only till the end of the execution of the test case in which it is defined.</p> <p>The <code>addGlobalVar(arg1,arg2)</code> function is used to add a value to a variable whose scope is till the end of the execution of the testset i.e. till the end of execution of the last test case under the test set. This function can be used in your custom code as shown below:</p> <pre><code>addGlobalVar(\"%nameVar%\", \"LukeSkywalker\");\n</code></pre> <p>This function is defined as shown below under the com.ing.engine.commands.Command java file.</p> <pre><code>public void addGlobalVar(String key, String val) {\n    if (key.matches(\"%.*%\")) {\n    key = key.substring(1, key.length() - 1);\n    }\n    Commander.putUserDefinedData(key, val);\n}\n</code></pre>"},{"location":"customizations/customfunction/#access-a-variable","title":"Access A Variable","text":"<p>The value of a <code>variable</code> created in your test case can be accessed using the function getVar which is defined, as shown below, under the com.ing.engine.commands.Command java file.</p> <p><pre><code>public String getVar(String key) {\n    return Commander.getVar(key);\n}\n</code></pre> This function can be used,as shown below, in your custom method. </p> <p>Provide the variable name between two <code>percentage symbols</code>(%%)</p> <p><pre><code>String value = getVar(\"%newVar%\");\nSystem.out.println(value);\n</code></pre> Suppose you have defined some variables in the userdefined tab of the Settings window, which can be opened by navigating through Run Settings icon &gt;&gt; UserDefined Tab, then you can access them in your custom method in two ways :</p> <code>getVar</code><code>getUserDefinedData</code> <pre><code>String value;\nvalue = getVar(\"%userdefinedVar%\");\nvalue = getVar(\"userdefinedVar\");//This also will work\n</code></pre> <pre><code>String value = getUserDefinedData(\"userdefinedVar\");\nSystem.out.println(value);\n</code></pre>"},{"location":"customizations/customfunction/#sample-custom-method","title":"Sample Custom Method","text":"<p>For creating any Custom Method, a java class is required. The following sample code can be used for understanding the usage of various variables and functions that you can access in your custom method.</p> <pre><code>package com.ing.engine.commands;\n\nimport com.ing.engine.commands.General;\nimport com.ing.engine.core.CommandControl;\nimport com.ing.engine.support.Status;\nimport com.ing.engine.support.methodInf.Action;\nimport com.ing.engine.support.methodInf.ObjectType;\nimport com.ing.engine.support.methodInf.InputType;\nimport com.microsoft.playwright.Locator;\nimport java.util.List;\n\n//extend Command to access elements\n\npublic class SampleScript extends General {\n\n    public SampleScript(CommandControl cc) {\n        super(cc);\n    }\n\n    public void textExe() {\n        Report.updateTestLog(Action, \"textExe\", Status.DONE);\n        executeTestCase(\"testWeb\", \"search\");\n    }\n\n\n    @Action(object = ObjectType.BROWSER, desc = \"open given url\", input = InputType.YES)\n    public void prinThis(){  // (1)!\n        try {\n\n            /**********************************/\n            Locator.click(); // (2)!\n            System.out.println(ObjectName + \"ObjectName used in ObjectColumn in the currentTestStep\");\n            System.out.println(Description + \"Description used in DescriptionColumn in the currentTestStep\");\n            System.out.println(Action + \"Action/Command used in ActionColumn in the currentTestStep\");\n            System.out.println(Input + \"Input used in InputColumn in the currentTestStep\");\n            System.out.println(Data + \"Resolved Input used in InputColumn in the currentTestStep\");\n            System.out.println(Reference + \"Reference/PageName used in ReferenceColumn in the currentTestStep\");\n\n            /**********************************/\n            System.out.println(getCurrentBrowserName() + \"To get the current browserName\");\n\n            /**********************************/                \n            String value = getVar(\"%newVar%\"); //(3)!\n            System.out.println(value);\n\n            /**********************************/\n            value = getVar(\"%userdefinedVar%\"); //(4)!\n            value = getVar(\"userdefinedVar\"); //This also will work\n\n            value = getUserDefinedData(\"userdefinedVar\"); //(5)!\n            System.out.println(value);\n\n            /**********************************/\n            addVar(\"%dyanmicVar%\", \"Value to be Stored\"); //(6)!\n            addGlobalVar(\"%dyanmicVar%\", \"Value to be Stored\"); //(7)!\n\n            /**********************************/\n            AObject.findElement(ObjectName, Reference); \n            AObject.findElements(ObjectName, Reference); // (8)!\n\n            Locator locator = AObject.findElement(\"p\", \"Yahoo\"); //(9)!\n            List&lt;Locator&gt;locatorList = AObject.findElements(\"p\", \"Yahoo\");                \n            System.out.println(\"No of locators\" + locatorList.size());\n\n            /**********************************/\n            locator.fill(\"Normal\"); //(10)!\n            locator.fill(Data);\n\n            /**********************************/\n            String input_text = userData.getData(\"Sample\", \"Data1\"); //(11)!\n            input_text = userData.getData(\"Sample\", \"Data1\", \"1\", \"1\"); //(12)!\n            input_text = userData.getData(\"Sample\", \"Data1\", \"scenario\",\"testcase\", \"1\", \"1\"); //(13)!\n            locator.fill(input_text);\n\n            /**********************************/\n            userData.putData(\"Sample\", \"Data1\", \"John Doe\"); //(14)!\n            userData.putData(\"Sample\", \"Data1\", \"John Doe\", \"1\", \"1\"); //(15)!\n            userData.putData(\"Sample\", \"Data1\", \"John Doe\", \"scenario\", \"testcase\", \"1\", \"1\"); //(16)!\n\n            /**********************************/\n            TestDataModel tdModel = Control.getCurrentProject().getTestData().getTestDataByName(\"TestDatasheetName\");\n            int rowsCount = tdModel.getRowCount();\n            for (int row = 0; row &lt; tdModel.getRowCount(); row++) {\n\n                int colIndex = tdModel.getColumnIndex(\"orderId\"); // (17)!                    \n                String orderId = (String) tdModel.getValueAt(row, colIndex);// (18)!               \n                tdModel.setValueAt(\"New Value\", row, colIndex); //(19)! \n            }\n\n            /**********************************/\n            Report.updateTestLog(\"Userdefined Action \", \"Operation Done successfully\", Status.PASS); //(20)!\n            Report.updateTestLog(\"Userdefined Action \", \"#CTAG&lt;b&gt;Operation Done successfully&lt;b&gt;\", Status.PASS); //(21)!\n\n            /**********************************/\n            userData.getIteration(); //(22)!\n            userData.getSubIteration(); //(23)!\n            userData.getScenario(); //(24)!\n            userData.getTestCase(); //(25)!\n            System.out.println(getCurrentBrowserName()); //(26)!\n\n            /**********************************/\n            Boolean something = false;\n            if (something) {\n\n                SystemDefaults.stopCurrentIteration.set(true); // (27)! \n                SystemDefaults.stopExecution.set(true); // (28)!\n\n            }\n\n            /**********************************/\n            executeMethod(locator, \"Click\");\n            executeMethod(\"Open\", \"@http://something\");\n            executeMethod(\"Open\", input);\n            executeMethod(locator, \"Fill\", input);\n\n            /**********************************/\n            executeTestCase(\"OnlineShopping\", \"BuyProduct\", 2); //(29)!\n            executeTestCase(\"OnlineShopping\", \"BuyProduct\");   //(30)!\n\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n        }\n    }\n\n           /**********************************/\n\n    public void handleCondition() throws UnCaughtException {            \n        Locator locator = AObject.findElement(\"ObjectName\", \"PageName\");\n        if (locator.isVisible()) { // (31)!\n\n            executeTestCase(\"testscenario1\", \"cancelTicket\", 1); //(32)!\n            Report.updateTestLog(\"Userdefined Action \", \"inside reusable\", Status.PASS);\n            executeMethod(\"StopBrowser\"); //(33)!\n        } else {\n            Report.updateTestLog(\"Userdefined Action \", \"switch to origional\", Status.DONE);\n        }\n    }\n}\n</code></pre> <ol> <li> <p> No argument should be specifed. Only then will your custom method be executed.   To do any operation before and/or after execution of each Step, add your desired code to functions <code>beforeStepExecution</code> / <code>afterStepExecution</code> in <code>Annotation.java</code> inside <code>com.ing.engine.core package</code>.   To do any operation after execution [execution is finished] add your code to <code>afterReportComplete</code> function in <code>SummaryReport.java</code> inside <code>com.ing.engine.reporting package</code>.</p> </li> <li> <p>Object in ObjectName is resolved as Playwright Locator and assigned to this variable <code>Locator</code></p> </li> <li> <p>If you store some dynamic value in a variable <code>%newVar%</code> you can get the value from the variable using <code>getVar()</code></p> </li> <li> <p><code>getVar()</code> can also be used to fetch user defined data created from UserDefined Settings panel</p> </li> <li> <p>In addition to <code>getVar()</code>, you can also use <code>getUserDefined()</code> to fetch user defined data created from UserDefined Settings panel</p> </li> <li> <p>If you want to store some value in a variable[%dyanmicVar%] you can store the value into a variable using <code>addVar()</code>. The scope is for Current Testcase only</p> </li> <li> <p>Unlike <code>addVar()</code>, the scope for <code>addGlobalVar()</code> is for All Testcases in the Current Execution</p> </li> <li> <p>To find the current step's <code>object</code></p> </li> <li> <p>To access the object value pass ObjectName and PageName as inputs.</p> <p> ObjectName = p</p> <p> PageName = Yahoo</p> </li> <li> <p>Using this <code>locator</code> you can perform Playwright Operations</p> </li> <li> <p>To access the data from DataSheets pass DataSheetName and ColumnName as inputs.</p> <p>SheetName = Sample, Columnname = Data1</p> <p> Don't pass GlobalData as inputsheet</p> </li> <li> <p>To get values from specified Iteration and Subiteration   </p> </li> <li>To get values from specified Scenario, Testcase, Iteration and Subiteration</li> <li> <p>To write values into DataSheet pass DataSheetName and ColumnName as inputs.</p> <p>SheetName = Sample, Columnname = Data1, Data = \"John Doe\"</p> <p> Don't pass GlobalData as inputsheet</p> </li> <li> <p>To write values for specified Iteration and Subiteration </p> </li> <li>To write values for specified Scenario, Testcase, Iteration and Subiteration </li> <li>Where orderId is a column in the data sheet</li> <li>To get value</li> <li>To put values in the sheet</li> <li>To display in Report</li> <li>To display in Report with custom html tags</li> <li>To get the current Iteration</li> <li>To get the current SubIteration</li> <li>To get the current Scenario</li> <li>To get the current Testcase</li> <li>To get the current BrowserName</li> <li>To stop the current iteration if you want to... based on a condition</li> <li>Stop the execution</li> <li>To execute other testcases - scenario name, testcase name, subiteration</li> <li>scenario name, testcase name</li> <li>Basing the condition on a web locator being visible</li> <li> <p>Calling another test case if the condition is matched</p> <p>Pass the Scenario name, Testcase name and Subiteration index</p> </li> <li> <p>If needed you can break the test case also by calling existing function StopBrowser </p> </li> </ol>"},{"location":"customizations/engine/","title":"Engine","text":"<p>Engine</p> <p>The Engine is the heart of the framework. This is where all the actions are defined. The Engine project is available in the root location of INGenious can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions.  After making modifications to the engine, the users can compile the engine using <code>mvn install</code> to be used from INGenious IDE.</p>"},{"location":"customizations/engine/#import-engine-in-eclipse","title":"Import Engine in Eclipse","text":"<ul> <li> <p> Pre-requisites :</p> <ul> <li> Navigate inside the Engine directory where you will find the <code>pom.xml</code></li> <li> Open command prompt/terminal at this location and execute the following commands :<ul> <li><code>mvn initialize</code></li> <li><code>mvn clean install</code></li> </ul> </li> </ul> </li> <li> <p> Open Eclipse IDE</p> </li> <li> <p> Import project using <code>File</code> <code>Import</code> <code>Maven</code> <code>Existing Maven Projects</code></p> </li> <li> <p> Locate the Engine folder in your system. This location is inside the directory where INGenious is present</p> </li> </ul> <p>After performing the above steps, you can see the Project imported in your IDE. </p> <p>The process is exactly the same for IntelliJ or any other IDE.</p> <p></p>"},{"location":"customizations/engine/#where-to-write-custom-method","title":"Where to write custom method?","text":"<p>Create a custom package in the Engine under src and create your .java files containing the custom methods in it. This is the best practice to add your custom method. In this way, you can always keep track of all your customizations.</p> <p></p> <p>Learn how to create customizations here  Custom functions </p>"},{"location":"customizations/engine/#testdebug-customization-from-engine","title":"Test/Debug customization from Engine","text":"<p>It is a best practice to run or debug your flow from the Engine, before building the <code>jar</code>. In case of any errors or exceptions, you can redesign your flow and finally build the jar once the errors have been fixed.</p> <p>Follow the steps below to execute test case from the Engine.</p> <ul> <li> <p> Open Eclipse IDE</p> </li> <li> <p> If you have your custom method in a separate <code>package</code>, then follow the steps below to add your package name to the package.properties file available in the Configuration folder inside the root location of INGenious.</p> </li> </ul> <p>Let's take the example below. Let's assume the custom function is added like this :</p> <p></p> <ul> <li> Navigate to the location where the framework is installed  Go to <code>Configuration</code> folder  Inside <code>package.properties</code> add the package name like this :</li> </ul> <p></p> <ul> <li> In the same <code>Configuration</code> folder  Open the <code>Global Settings.properties</code> file and provide the details as shown in the image below:</li> </ul> <p></p> <ul> <li> Add the custom method name in the test case as shown below. It will show in Red in the UI of the framework, but thats expected as you have not yet built a JAR file. You are only testing the custom method.</li> </ul> <p></p> <ul> <li> In the Eclipse IDE,run the control.java file from the com.ing.engine.core package.</li> </ul> <p></p> <ul> <li> You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file.</li> </ul> <p> Building the jar file</p> From EclipseFrom Command Prompt <p>Right click on the project  <code>Run As</code> <code>Maven Install</code></p> <ul> <li>Navigate to Engine directory where pom is located </li> <li>Open command prompt and execute  <code>mvn clean install</code></li> </ul> <p>This will build the jar with updated code.</p>"},{"location":"dbActions/dbActions/","title":"Database Testing Actions","text":""},{"location":"dbActions/dbActions/#initdbconnection","title":"initDBConnection","text":"<p>Description: This function will initialize the database connection</p> <p>Usage:</p> ObjectName Action Input Condition Reference Database initDBConnection <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Initiate the DB transaction\")\n    public void initDBConnection() {\n        try {\n            if (verifyDbConnection()) {\n                DatabaseMetaData metaData = dbconnection.getMetaData();\n                Report.updateTestLog(Action, \" Connected with \" + metaData.getDriverName() + \"\\n\"\n                        + \"Driver version \" + metaData.getDriverVersion() + \" \\n\"\n                        + \"Database product name \" + metaData.getDatabaseProductName() + \"\\n\"\n                        + \"Database product version \" + metaData.getDatabaseProductVersion(),\n                        Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Could not able to make DB connection \", Status.FAILNS);\n            }\n        } catch (ClassNotFoundException | SQLException ex) {\n            Report.updateTestLog(Action, \"Error connecting Database: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }\n</code></pre> <p>Internally uses the following <code>Java</code> logic :</p>"},{"location":"dbActions/dbActions/#classfornamegetdriver-drivermanagergetconnectiongetdatabasedatadb_conn_str-getdatabasedatadb_usergetdatabasedatadb_pwd-or-drivermanagergetconnectiongetdatabasedatadb_conn_str","title":"<pre><code>Class.forName(getDriver());\nDriverManager.getConnection(getDataBaseData(DB_CONN_STR), getDataBaseData(DB_USER),getDataBaseData(DB_PWD));\n/**OR**/\nDriverManager.getConnection(getDataBaseData(DB_CONN_STR));\n</code></pre>","text":""},{"location":"dbActions/dbActions/#closedbconnection","title":"closeDBConnection","text":"<p>Description: This function will close the database connection</p> <p>Usage:</p> ObjectName Action Input Condition Reference Database closeDBConnection <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Close the DB Connection\")\n    public void closeDBConnection() {\n        try {\n            if (closeConnection()) {\n                Report.updateTestLog(Action, \"DB Connection is closed\", Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \"Error in closing the DB Connection \", Status.FAILNS);\n            }\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }\n</code></pre> <p>Internally uses the following <code>Java</code> logic :</p>"},{"location":"dbActions/dbActions/#dbconnectionclose-statementclose-resultclose","title":"<pre><code>dbconnection.close();\nstatement.close();\nresult.close();\n</code></pre>","text":""},{"location":"dbActions/dbActions/#assertdbresult","title":"assertDBResult","text":"<p>Description: This function will assert if the SQL result contains a particular data in a specific column after the execution of a SQL select statement.</p> <p>Input Format : @ExpectedValue</p> <p>Condition : Name of the column in which result is expected</p> <p>Usage:</p> ObjectName Action Input Condition Reference Object assertDBResult @value nameOfDBColumn &lt;&lt; Hardcoded Input Object assertDBResult Sheet:Column nameOfDBColumn &lt;&lt; Input from Datasheet Object assertDBResult %dynamicVar% nameOfDBColumn &lt;&lt;Input from variable <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Assert the value [&lt;Input&gt;] exist in the column [&lt;Condition&gt;] \", input = InputType.YES, condition = InputType.YES)\n    public void assertDBResult() {\n        if (assertDB(Condition, Data)) {\n            Report.updateTestLog(Action, \"Value \" + Data + \" exist in the Database\", Status.PASSNS);\n        } else {\n            Report.updateTestLog(Action, \"Value \" + Data + \" doesn't exist in the Database\", Status.FAILNS);\n        }\n    }\n\npublic boolean assertDB(String columnName, String condition) {\n        boolean isExist = false;\n        try {\n            result.beforeFirst();\n            if (getColumnIndex(columnName) != -1) {\n                while (result.next()) {\n                    if (Objects.equal(result.getString(columnName), condition)) {\n                        isExist = true;\n                        break;\n                    }\n                }\n            } else {\n                Report.updateTestLog(Action, \"Column \" + columnName + \" doesn't exist\", Status.FAIL);\n            }\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error asserting the value in DB \" + ex.getMessage(), Status.FAIL);\n            return false;\n        }\n        return isExist;\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#executeselectquery","title":"executeSelectQuery","text":"<p>Description: This function will execute the given select query on the database</p> <p>Input Format : @<code>SQL Query</code></p> <p>Example:</p> ObjectName Action Input Condition Database executeSelectQuery @select * from tableName <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [&lt;Input&gt;]\", input = InputType.YES)\n    public void executeSelectQuery() {\n        try {\n            executeSelect();\n            Report.updateTestLog(Action, \"Executed Select Query\", Status.DONE);\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }\n\npublic void executeSelect() throws SQLException {\n        initialize();\n        result = statement.executeQuery(Data);\n        resultData = result.getMetaData();\n        populateColumnNames();\n    }    \n</code></pre>"},{"location":"dbActions/dbActions/#executedmlquery","title":"executeDMLQuery","text":"<p>Description:  This query will execute an SQL DML statement on the database and will commit the results back to the database</p> <p>Input Format : @<code>SQL Query</code></p> <p>Example:</p> ObjectName Action Input Condition Database executeDMLQuery @UPDATE public.\"Employee\" SET \"Age\"=27 WHERE id = 123456; Database executeDMLQuery Sheet:Column Database executeDMLQuery %dynamicVar% <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Execute the Query in [&lt;Input&gt;]\", input = InputType.YES)\n    public void executeDMLQuery() {\n        try {\n            if (executeDML()) {\n                Report.updateTestLog(Action, \" Table updated by using \" + Data, Status.PASSNS);\n            } else {\n                Report.updateTestLog(Action, \" Table not updated by using \" + Data, Status.FAILNS);\n            }\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }   \n</code></pre>"},{"location":"dbActions/dbActions/#storedbvalueindatasheet","title":"storeDBValueinDataSheet","text":"<p>Description: This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in the data sheet</p> <p>Input Format : @SheetName:ColumnName , Condition : DatabaseColumnName, ResultSetRowNumber</p> <p>Example:</p> ObjectName Action Input Condition Database storeDBValueinDataSheet Sheet:Column productName, 1 <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Save DB value in Test Data Sheet\", input = InputType.YES, condition = InputType.YES)\n    public void storeDBValueinDataSheet() {\n        try {\n            if (Condition != null &amp;&amp; Input != null) {\n                int rowIndex = 1;\n                result.first();\n                String[] sheetDetail = Input.split(\":\");\n                String sheetName = sheetDetail[0];\n                String columnName = sheetDetail[1];\n                String value;\n                String[] split = Condition.split(\",\");\n                if (split.length &gt; 1) {\n                    rowIndex = Integer.parseInt(split[1]);\n                }\n                if (!result.absolute(rowIndex)) {\n                    Report.updateTestLog(Action, \"Row : \" + rowIndex + \" doesn't exist \", Status.FAILNS);\n                } else if (getColumnIndex(split[0]) != -1) {\n                    value = result.getString(split[0]);\n                    userData.putData(sheetName, columnName, value);\n                    Report.updateTestLog(Action, \"Value from DB \" + value + \"  stored into \" + \"the data sheet\", Status.DONE);\n                } else {\n                    Report.updateTestLog(Action, \"Column : \" + split[0] + \" doesn't exist\", Status.FAILNS);\n                }\n            } else {\n                Report.updateTestLog(Action, \"Incorrect Input or Condition format\", Status.FAILNS);\n            }\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error: \" + ex.getMessage(), Status.FAILNS);\n            System.out.println(\"Invalid Data \" + Condition);\n        }\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#storevalueinvariable","title":"storeValueInVariable","text":"<p>Description: This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in a user defined variable</p> <p>Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber</p> <p>Example:</p> ObjectName Action Input Condition Database storeValueInVariable %var% productName, 1 <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Store it in the variable from the DB column [&lt;Condition&gt;] \", input = InputType.YES, condition = InputType.YES)\n    public void storeValueInVariable() {\n        storeValue(Input, Condition, false);\n        if (getVar(Input) != null &amp;&amp; !getVar(Input).equals(\"\")) {\n            Report.updateTestLog(Action, \"Stored in the variable\", Status.PASSNS);\n        } else {\n            Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#storevalueinglobalvariable","title":"storeValueInGlobalVariable","text":"<p>Description: This action will store the value of a specific cell(from specific row and column) from the result of an SQL select statement in global variable</p> <p>Input Format : %variableName% , Condition : DatabaseColumnName, ResultSetRowNumber</p> <p>Example:</p> ObjectName Action Input Condition Database storeValueInGlobalVariable %var% productName, 1 <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Store it in Global variable from the DB column [&lt;Condition&gt;] \", input = InputType.YES, condition = InputType.YES)\n    public void storeValueInGlobalVariable() {\n        storeValue(Input, Condition, true);\n        if (getVar(Input) != null &amp;&amp; !getVar(Input).equals(\"\")) {\n            Report.updateTestLog(Action, \"Stored in Global variable\", Status.PASSNS);\n        } else {\n            Report.updateTestLog(Action, \"Value doesn't stored in Global variable\", Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#storeresultindatasheet","title":"storeResultInDataSheet","text":"<p>Description:  This action will store the result of an SQL select statement in the test data sheet</p> <p>Input Format : @<code>SQL Query</code> , Condition : DatasheetName</p> <p>Example:</p> ObjectName Action Input Condition Database storeResultInDataSheet select * from public.\"Employee\" DatasheetName <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Query and save the result in Datasheet \", input = InputType.YES, condition = InputType.YES)\n    public void storeResultInDataSheet() {\n        try {\n            executeSelect();\n            result.last();\n            int totalRows = result.getRow();\n            result.beforeFirst();\n            int totalCols = resultData.getColumnCount();\n            for (int colIndex = 0; colIndex &lt; totalCols; colIndex++) {\n                result.beforeFirst();\n                for (int rowIndex = 1; rowIndex &lt;= totalRows; rowIndex++) {\n                    if (result.absolute(rowIndex)) {\n                        userData.putData(Condition, colNames.get(colIndex), result.getString(colIndex + 1), userData.getIteration(), Integer.toString(rowIndex));\n                    } else {\n                        Report.updateTestLog(Action, \"Row \" + rowIndex + \" doesn't exist\",\n                                Status.FAILNS);\n                        return;\n                    }\n                }\n            }\n            Report.updateTestLog(Action, \" SQL Query Result has been saved in DataSheet: \",\n                    Status.PASSNS);\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#storeresultinvariable","title":"storeResultInVariable","text":"<p>Description: This action will store the result of an SQL select statement in a user defined variable. The select query in this case should return a single column, the query may return multiple rows. In case the query returns a single value, the value will be stored in the variable name given (for eg:- var), In case if the select query returns multiple rows, multiple variables will be created by adding indexes to the variable name given and the value will be stored in these variables(for eg:- var1, var2, var3.....)</p> <p>Input Format : @<code>SQL Query</code> , Condition : %VariableName% </p> <p>Example:</p> ObjectName Action Input Condition Database storeResultInVariable select * from public.\"Employee\" %var% <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Query and save the result in variable(s) \", input = InputType.YES, condition = InputType.YES)\n    public void storeResultInVariable() {\n        String variableName = Condition;\n        try {\n            executeSelect();\n            result.last();\n            int totalRows = result.getRow();\n            result.beforeFirst();\n            for (int index = 1; index &lt;= totalRows; index++) {\n                if (result.absolute(index)) {\n                    if (index == 1) {\n                        addVar(variableName, result.getString(1));\n                    } else {\n                        String temp = variableName.replaceAll(\"[%]$\", index + \"%\");\n                        addVar(temp, result.getString(1));\n                    }\n                } else {\n                    Report.updateTestLog(Action, \"Row \" + index + \" doesn't exist\",\n                            Status.FAILNS);\n                    return;\n                }\n            }\n            Report.updateTestLog(Action, \" SQL Query Result has been saved in the run time variable(s) \",\n                    Status.PASSNS);\n        } catch (SQLException ex) {\n            Report.updateTestLog(Action, \"Error executing the SQL Query: \" + ex.getMessage(),\n                    Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"dbActions/dbActions/#verifywithdatasheet","title":"verifyWithDataSheet","text":"<p>Description: Verify Table values with the Test Data sheet</p> <p>Input Format : </p> <p>Example:</p> ObjectName Action Input Condition Database verifyWithDataSheet select * from public.\"Employee\" %var% <p>Corresponding Code:</p> <pre><code>@Action(object = ObjectType.DATABASE, desc = \"Verify Table values with the Test Data sheet \", input = InputType.YES)\n    public void verifyWithDataSheet() {\n        String sheetName = Data;\n        TestDataView dataView;\n        if (!sheetName.isEmpty() &amp;&amp; (dataView = userData.getTestData(sheetName)) != null) {\n            List&lt;String&gt; columns = dataView.columns();\n            boolean isFailed = false;\n            StringBuilder desc = new StringBuilder();\n            for (String column : columns.subList(4, columns.size())) {\n                if (assertDB(column, dataView.getField(column))) {\n                    desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" exist in the Database\").append(\"\\n\");\n                } else {\n                    isFailed = true;\n                    desc.append(\"Value \").append(userData.getData(sheetName, column)).append(\" doesn't exist in the Database\").append(\"\\n\");\n                }\n            }\n            Report.updateTestLog(Action, desc.toString(), isFailed ? Status.FAILNS : Status.PASSNS);\n        } else {\n            Report.updateTestLog(Action, \"Incorrect Sheet Name\", Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"integrations/azuredevops/","title":"Azure DevOps","text":""},{"location":"integrations/azuredevops/#integration-of-ingenious-with-azure-devops","title":"Integration of INGenious with Azure DevOps","text":""},{"location":"integrations/azuredevops/#pipeline-yaml","title":"Pipeline yaml","text":"<pre><code>trigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n\n- script: |  # (1)!\n    echo \"##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)\"\n    echo \"##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)\"\n  displayName: \"Set java version to 11\" \n\n- script: mvn initialize --file Engine/pom.xml  # (2)!\n  displayName: 'Maven Initialize'\n\n- script: mvn install --file Engine/pom.xml  # (3)!\n  displayName: 'Maven Install'\n\n- script: chmod -R 755 ./ # (4)!\n  displayName: 'Set Permissions'\n\n- script: ./Run.command -run -project_location \"Projects/ING-Public-Web\" -release \"Release1\" -testset \"Set1\" -setEnv \"run.AzureReport=true\"\n  displayName: 'Run tests' # (5)!\n\n- task: PublishTestResults@2 # (6)!\n  inputs:\n    testResultsFormat: 'NUnit'\n    testResultsFiles: 'azure.xml'\n    searchFolder: '$(System.DefaultWorkingDirectory)/Projects/ING-Public-Web/Results/TestExecution/Release1/Set1/Latest'\n    testRunTitle: 'Test Results'\n</code></pre> <ol> <li>This is to set up the Java version. In this case this is set as 11. But you can set it to 11 or above </li> <li>This is to perform <code>mvn initialize</code> which makes the ingenious specific jar files, known to the <code>.m2</code> of the agent</li> <li>This is to install maven dependencies of your project</li> <li>This sets the permission to the working directory. A <code>chmod 755</code> for a folder gives the owner full permissions, group members and others read and access permissions</li> <li>This executes the INGenious tests. You need to specify the <code>project_location</code>, the name of the <code>release</code> and <code>testset</code>. Additionally the <code>-setEnv \"run.AzureReport=true\"</code> will make sure that the Azure DevOps compatible reports (nunit xml) are generated which shows the test results, screenshots and videos as attachments.</li> <li>This is to publish the test results in Azure DevOps <code>Tests</code> tab</li> </ol>"},{"location":"integrations/azuredevops/#test-reporting","title":"Test Reporting","text":"<ul> <li> After the execution is over, the test reports immediately appear on the Tests tab of the pipeline</li> </ul> <ul> <li> If we click on any of the tests, a detailed log will be available in the Debug tab </li> </ul> <ul> <li> If we click on the Attachments tab, we will find the log.txt, screenshots, execution videos, and API requests and responses (for API tests)   </li> </ul>"},{"location":"integrations/azuredevops/#pipeline-analytics","title":"Pipeline Analytics","text":"<p>If we click on the <code>Pipeline Name</code> and navigate to the <code>Analytics</code> tab of the Azure DevOps Pipeline, we will see the report like this :</p> <p></p> <p>We can use this feature to determine the health of the pipeline and analysis of historical test reports.</p>"},{"location":"integrations/circleci/","title":"Circle CI","text":""},{"location":"integrations/circleci/#integration-of-ingenious-with-circle-ci","title":"Integration of INGenious with Circle CI","text":""},{"location":"integrations/circleci/#pipeline-yaml","title":"Pipeline yaml","text":"<pre><code>version: 2.1\njobs:\n  test-java:\n    docker:\n      - image: cimg/openjdk:17.0                         # (1)!\n    #working_directory: ~/project/Engine\n    steps:\n      - checkout:\n          path: ~/project\n      - run:                                              \n          command: mvn initialize --file Engine/pom.xml   # (2)!\n      - run:\n          command: mvn install --file Engine/pom.xml      # (3)!\n      - run:\n          name: Install Playwright Dependencies           # (7)!\n          command: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"install-deps\"  --file Engine/pom.xml  \n      - run:    \n          command: chmod -R 755 ./                        # (4)!\n      - run:                                              # (5)!\n          command: ./Run.command -run -project_location \"Projects/ING-Public-Web\" -release \"Release1\" -testset \"Set1\" \n      - store_artifacts:                                  # (6)!\n          path: Projects/ING-Public-Web/Results/TestExecution/Release1/Set1/Latest/\nworkflows:\n  build-and-test:\n    jobs:\n      - test-java\n</code></pre> <ol> <li>This is to set up the Java version. In this case this is set as 17. But you can set it to 11 or above </li> <li>This is to perform <code>mvn initialize</code> which makes the ingenious specific jar files, known to the <code>.m2</code> of the agent</li> <li>This is to install maven dependencies of your project</li> <li>This sets the permission to the working directory. A <code>chmod 755</code> for a folder gives the owner full permissions, group members and others read and access permissions</li> <li>This executes the INGenious tests. You need to specify the <code>project_location</code>, the name of the <code>release</code> and <code>testset</code>. Additionally the <code>-setEnv \"run.AzureReport=true\"</code> will make sure that the Azure DevOps compatible reports (nunit xml) are generated which shows the test results, screenshots and videos as attachments.</li> <li>This is to upload the test results as a build artifact</li> <li>If the agents are not capable to run playwright browser tests, its important to download and install the dependencies</li> </ol>"},{"location":"integrations/circleci/#pipeline-analysis","title":"Pipeline Analysis","text":"<ul> <li> Once the execution is over, the logs will appera in the pipeline console</li> </ul> <ul> <li> You can download the Test Execution Reports (as Build Artifacts) from the overview page</li> </ul>"},{"location":"integrations/githubactions/","title":"GitHub Actions","text":""},{"location":"integrations/githubactions/#integration-of-ingenious-with-github-actions","title":"Integration of INGenious with GitHub Actions","text":""},{"location":"integrations/githubactions/#pipeline-yaml","title":"Pipeline yaml","text":"<pre><code>name: Test Execution\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up JDK 17        # (1)!\n      uses: actions/setup-java@v4 \n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: maven\n    - name: Maven Initialize     # (2)!\n      run: mvn initialize --file Engine/pom.xml\n    - name: Maven Install        # (3)!\n      run: mvn install --file Engine/pom.xml\n    - name: Set Permissions      # (4)!\n      run: chmod -R 755 ./\n    - name: Run tests            # (5)!\n      run: ./Run.command -run -project_location \"Projects/ING-Public-Web\" -release \"Release1\" -testset \"Set1\"\n    - name: Upload Reports       # (6)!\n      uses: actions/upload-artifact@v4.3.6\n      with:\n        name: Execution Reports\n        path: Projects/ING-Public-Web/Results/TestExecution/Release1/Set1/Latest\n</code></pre> <ol> <li>This is to set up the Java version. In this case this is set as 17. But you can set it to 11 or above </li> <li>This is to perform <code>mvn initialize</code> which makes the ingenious specific jar files, known to the <code>.m2</code> of the agent</li> <li>This is to install maven dependencies of your project</li> <li>This sets the permission to the working directory. A <code>chmod 755</code> for a folder gives the owner full permissions, group members and others read and access permissions</li> <li>This executes the INGenious tests. You need to specify the <code>project_location</code>, the name of the <code>release</code> and <code>testset</code>. Additionally the <code>-setEnv \"run.AzureReport=true\"</code> will make sure that the Azure DevOps compatible reports (nunit xml) are generated which shows the test results, screenshots and videos as attachments.</li> <li>This is to upload the test results as a build artifact</li> </ol>"},{"location":"integrations/githubactions/#pipeline-analysis","title":"Pipeline Analysis","text":"<ul> <li> Once the execution is over, the logs will appera in the pipeline console</li> </ul> <ul> <li> You can download the Test Execution Reports (as Build Artifacts) from the overview page</li> </ul>"},{"location":"playwrightActions/alerts/","title":"Alerts","text":""},{"location":"playwrightActions/alerts/#answernextalert","title":"answerNextAlert","text":"<p>Description:  This function will answer the next alert with given data</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>answerNextAlert</code> @value Hardcoded Input Browser <code>answerNextAlert</code> Sheet:Column Input from Datasheet Browser <code>answerNextAlert</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Answer the next alert with [&lt;Data&gt;]\", input = InputType.YES)\n    public void answerNextAlert() {\n        String setAlertText = Data;\n        try {\n            Page.onceDialog(dialog -&gt; {\n                dialog.accept(setAlertText);\n            });\n            Report.updateTestLog(Action, \"Message '\" + setAlertText\n                    + \"' will be set in the next alert window\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#answerallalerts","title":"answerAllAlerts","text":"<p>Description:  This function will answer all alerts with given data</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>answerAllAlerts</code> @value Hardcoded Input Browser <code>answerAllAlerts</code> Sheet:Column Input from Datasheet Browser <code>answerAllAlerts</code> %dynamicVar% Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Answer all the alerts with [&lt;Data&gt;]\", input = InputType.YES)\n    public void answerAllAlerts() {\n        String setAlertText = Data;\n        try {\n            Page.onDialog(dialog -&gt; {\n                dialog.accept(setAlertText);\n            });\n            Report.updateTestLog(Action, \"Message '\" + setAlertText\n                    + \"' will be set in all the alert windows\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#acceptnextalert","title":"acceptNextAlert","text":"<p>Description:  This function will accept next alert</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>acceptNextAlert</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Accept the next alert\")\n    public void acceptNextAlert() {\n        try {\n            Page.onceDialog(dialog -&gt; {\n                dialog.accept();\n            });\n            Report.updateTestLog(Action, \"The next alert will be accepted\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#acceptallalerts","title":"acceptAllAlerts","text":"<p>Description:  This function will accept all alerts</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>acceptAllAlerts</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Accept all the alerts\")\n    public void acceptAllAlerts() {\n        try {\n            Page.onDialog(dialog -&gt; {\n                dialog.accept();\n            });\n            Report.updateTestLog(Action, \"All alerts will be accepted\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#dismissallalerts","title":"dismissAllAlerts","text":"<p>Description:  This function will dismiss all alerts</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>dismissAllAlerts</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Dismiss all alerts\")\n    public void dismissAllAlerts() {\n        try {\n            Page.onDialog(dialog -&gt; {\n                dialog.dismiss();\n            });\n            Report.updateTestLog(Action, \"All alerts will be dismissed\",\n                    Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#dismissnextalert","title":"dismissNextAlert","text":"<p>Description:  This function will dismiss next alert</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>dismissNextAlert</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Dismiss the next alert\")\n    public void dismissNextAlert() {\n        try {\n            Page.onceDialog(dialog -&gt; {\n                dialog.dismiss();\n            });\n            Report.updateTestLog(Action, \"Next alert will be dismissed\",\n                    Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#storealertmessageinvariable","title":"storeAlertMessageinVariable","text":"<p>Description:  This function will store alert message in a runtime variable</p> <p>Input: %dynamicVar%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>storeAlertMessageinVariable</code> %varname% <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Store next Alert message into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeAlertMessageinVariable() {\n        String strObj = Input;\n        try {\n            Page.onceDialog(dialog -&gt; {           \n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, dialog.message());\n                Report.updateTestLog(Action, \"Alert Message \" + dialog.message() + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        });\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#storealerttypeinvariable","title":"storeAlertTypeinVariable","text":"<p>Description:  This function will store alert type in a runtime variable</p> <p>Input: %dynamicVar%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>storeAlertTypeinVariable</code> %varname% <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Store Alert type into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeAlertTypeinVariable() {\n        String strObj = Input;\n        try {\n            Page.onceDialog(dialog -&gt; {           \n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, dialog.type());\n                Report.updateTestLog(Action, \"Alert Type \" + dialog.type() + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        });\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/alerts/#storedefaultalertvalueinvariable","title":"storeDefaultAlertValueinVariable","text":"<p>Description:  This function will store default alert value in a runtime variable</p> <p>Input: %dynamicVar%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>storeDefaultAlertValueinVariable</code> %varname% <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Store default Alert value into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeDefaultAlertValueinVariable() {\n        String strObj = Input;\n        try {\n            Page.onceDialog(dialog -&gt; {           \n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, dialog.defaultValue());\n                Report.updateTestLog(Action, \"Default Alert Value \" + dialog.defaultValue() + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        });\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/","title":"Assertions","text":""},{"location":"playwrightActions/assertions/#assertelementcontainstext","title":"assertElementContainsText","text":"<p>Description:  This function will assert if the Element's <code>text</code> contains the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementContainsText</code> @value PageName Hardcoded Input Browser <code>assertElementContainsText</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementContainsText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] contains the text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementContainsText() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).containsText(Data);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] contains text '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not contain text '\" + Data + \"'. Actual text is '\" + text + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementnotcontainstext","title":"assertElementNotContainsText","text":"<p>Description:  This function will assert if the Element's <code>text</code> does not contain the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementNotContainsText</code> @value PageName Hardcoded Input Browser <code>assertElementNotContainsText</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementNotContainsText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not contain text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementNotContainsText() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).not().containsText(Data);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] does not contain text '\" + Data + \"'. Actual text is '\" + text + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] contains text '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementattributematches","title":"assertElementAttributeMatches","text":"<p>Description:  This function will assert if the Element has the expected attribute.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementAttributeMatches</code> @value PageName Hardcoded Input Browser <code>assertElementAttributeMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementAttributeMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has the attribute [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementAttributeMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        String actualattributeValue = \"\";\n        try {\n            actualattributeValue = Locator.getAttribute(attributeName);\n            assertThat(Locator).hasAttribute(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] has attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have attribute '\" + attributeName + \" = \" + attributeValue + \"'. Actual value is '\" + actualattributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementattributenotmatches","title":"assertElementAttributeNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected attribute.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementAttributeNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementAttributeNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementAttributeNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have attribute [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementAttributeNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        String actualAttributeValue = \"\";\n        try {\n            actualAttributeValue = Locator.getAttribute(attributeName);\n            assertThat(Locator).not().hasAttribute(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] does not have attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'. Actual value is '\" + actualAttributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has attribute '\" + attributeName + \" = \" + actualAttributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementclassmatches","title":"assertElementClassMatches","text":"<p>Description:  This function will assert if the Element match the expected class</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementClassMatches</code> @value PageName Hardcoded Input Browser <code>assertElementClassMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementClassMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has class [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementClassMatches() {\n        String actualClassValue = \"\";\n        try {\n            actualClassValue = Locator.getAttribute(\"class\");\n            assertThat(Locator).hasClass(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has 'class' matching '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have 'class' matching '\" + Data + \"'. Actual value is '\" + actualClassValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementclassnotmatches","title":"assertElementClassNotMatches","text":"<p>Description:  This function will assert if the Element does not match the expected class.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementClassNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementClassNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementClassNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have class [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementClassNotMatches() {\n        String actualClassValue = \"\";\n        try {\n            actualClassValue = Locator.getAttribute(\"class\");\n            assertThat(Locator).not().hasClass(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have 'class' matching '\" + Data + \"'. Actual value is '\" + actualClassValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has 'class' matching '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementcountmatches","title":"assertElementCountMatches","text":"<p>Description:  This function will assert if the count of Element matches the expected count</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCountMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCountMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCountMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if count of [&lt;Object&gt;] matches [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCountMatches() {\n        int elementCount = 0;\n        try {\n            elementCount = Locator.count();\n            assertThat(Locator).hasCount(Integer.parseInt(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] count matches '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] count does not match '\" + Data + \"'. Actual count is +'\" + elementCount + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementcountnotmatches","title":"assertElementCountNotMatches","text":"<p>Description:  This function will assert if the count of Element does not match the expected count</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCountNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCountNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCountNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if count of [&lt;Object&gt;] does not match [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCountNotMatches() {\n        int elementCount = 0;\n        try {\n            elementCount = Locator.count();\n            assertThat(Locator).not().hasCount(Integer.parseInt(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] count does not match '\" + Data + \"'. Actual count is +'\" + elementCount + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] count matches '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementcssmatches","title":"assertElementCSSMatches","text":"<p>Description:  This function will assert if the Element has the expected CSS attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCSSMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCSSMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCSSMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has the CSS [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCSSMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).hasCSS(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementcssnotmatches","title":"assertElementCSSNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected CSS attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCSSNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCSSNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCSSNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have the CSS [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCSSNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).not().hasCSS(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementidmatches","title":"assertElementIdMatches","text":"<p>Description:  This function will assert if the Element has the expected ID</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIdMatches</code> @value PageName Hardcoded Input Browser <code>assertElementIdMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIdMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has ID [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementIdMatches() {\n        String actualIdValue = \"\";\n        try {\n            actualIdValue = Locator.getAttribute(\"id\");\n            assertThat(Locator).hasId(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has 'ID' matching '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have 'ID' matching '\" + Data + \"'. Actual value is '\" + actualIdValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementidnotmatches","title":"assertElementIdNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected ID</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIdNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementIdNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIdNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have ID [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementIdNotMatches() {\n        String actualIdValue = \"\";\n        try {\n            actualIdValue = Locator.getAttribute(\"id\");\n            assertThat(Locator).not().hasId(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have 'ID' matching '\" + Data + \"'. Actual value is '\" + actualIdValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has 'ID' matching '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementjspropertymatches","title":"assertElementJSPropertyMatches","text":"<p>Description:  This function will assert if the Element has the expected JS Property attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementJSPropertyMatches</code> @value PageName Hardcoded Input Browser <code>assertElementJSPropertyMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementJSPropertyMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has JS Property [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementJSPropertyMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).hasJSProperty(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementjspropertynotmatches","title":"assertElementJSPropertyNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected JS Property attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementJSPropertyNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementJSPropertyNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementJSPropertyNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have JS Property [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementJSPropertyNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).not().hasJSProperty(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementtextmatches","title":"assertElementTextMatches","text":"<p>Description:  This function will assert if the Element's <code>text</code> matches the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementTextMatches</code> @value PageName Hardcoded Input Browser <code>assertElementTextMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementTextMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementTextMatches() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).hasText(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has text '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have text '\" + Data + \"'. Actual text is '\" + text + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementtextnotmatches","title":"assertElementTextNotMatches","text":"<p>Description:  This function will assert if the Element's <code>text</code> does not match the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementTextNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementTextNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementTextNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementTextNotMatches() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).not().hasText(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have text '\" + Data + \"'. Actual text is '\" + text + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has text '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementvaluematches","title":"assertElementValueMatches","text":"<p>Description:  This function will assert if the Element's <code>value</code> contains the expected value.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValueMatches</code> @value PageName Hardcoded Input Browser <code>assertElementValueMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValueMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has value [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValueMatches() {\n\n        String value = \"\";\n        try {\n            value = Locator.getAttribute(\"value\");\n            assertThat(Locator).hasValue(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has value '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have value '\" + Data + \"'. Actual value is '\" + value + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementvaluenotmatches","title":"assertElementValueNotMatches","text":"<p>Description:  This function will assert if the Element's <code>value</code> does not match the expected value</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValueNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementValueNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValueNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not value [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValueNotMatches() {\n\n        String value = \"\";\n        try {\n            value = Locator.getAttribute(\"value\");\n            assertThat(Locator).not().hasValue(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have value '\" + Data + \"'. Actual value is '\" + value + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has value '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementvaluesmatch","title":"assertElementValuesMatch","text":"<p>Description:  This function will assert if the Element's <code>values</code> contains the expected values</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValuesMatch</code> @value PageName Hardcoded Input Browser <code>assertElementValuesMatch</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValuesMatch</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has values [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValuesMatch() {\n        try {\n            String values[] = Data.split(\",\");\n            Pattern[] pattern = new Pattern[values.length];\n            for (int i = 0; i &lt; values.length; i++) {\n                pattern[i] = Pattern.compile(values[i]);\n            }\n            assertThat(Locator).hasValues(pattern);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has values '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have values '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementvaluesnotmatch","title":"assertElementValuesNotMatch","text":"<p>Description:  This function will assert if the Element's <code>values</code> does not match the expected values</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValuesNotMatch</code> @value PageName Hardcoded Input Browser <code>assertElementValuesNotMatch</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValuesNotMatch</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have values [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValuesNotMatch() {\n        try {\n            String values[] = Data.split(\",\");\n            Pattern[] pattern = new Pattern[values.length];\n            for (int i = 0; i &lt; values.length; i++) {\n                pattern[i] = Pattern.compile(values[i]);\n            }\n            assertThat(Locator).not().hasValues(pattern);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have values '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has values '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisattached","title":"assertElementIsAttached","text":"<p>Description:  This function will assert if the Element is attached to the DOM</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsAttached</code> @value PageName Hardcoded Input Browser <code>assertElementIsAttached</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsAttached</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] points to an attached DOM node\")\n    public void assertElementIsAttached() {\n        try {\n            assertThat(Locator).isAttached();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is attached to the DOM\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not attached to the DOM\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotattached","title":"assertElementIsNotAttached","text":"<p>Description:  This function will assert if the Element is not attached to the DOM</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotAttached</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotAttached</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotAttached</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not point to an attached DOM node\")\n    public void assertElementIsNotAttached() {\n        try {\n            assertThat(Locator).not().isAttached();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not attached to the DOM\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is attached to the DOM\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementischecked","title":"assertElementIsChecked","text":"<p>Description:  This function will assert if the Element is checked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsChecked</code> @value PageName Hardcoded Input Browser <code>assertElementIsChecked</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsChecked</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is checked\")\n    public void assertElementIsChecked() {\n        try {\n            assertThat(Locator).isChecked();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is checked\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not checked\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotchecked","title":"assertElementIsNotChecked","text":"<p>Description:  This function will assert if the Element is not checked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotChecked</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotChecked</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotChecked</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not checked\")\n    public void assertElementIsNotChecked() {\n        try {\n            assertThat(Locator).not().isChecked();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not checked\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is checked\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisdisabled","title":"assertElementIsDisabled","text":"<p>Description:  This function will assert if the Element is disabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsDisabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsDisabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsDisabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is disabled\")\n    public void assertElementIsDisabled() {\n        try {\n            assertThat(Locator).isDisabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is disabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not disabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotdisabled","title":"assertElementIsNotDisabled","text":"<p>Description:  This function will assert if the Element is not disabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotDisabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotDisabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotDisabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not disabled\")\n    public void assertElementIsNotDisabled() {\n        try {\n            assertThat(Locator).not().isDisabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not disabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is disabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementiseditable","title":"assertElementIsEditable","text":"<p>Description:  This function will assert if the Element is editable.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEditable</code> @value PageName Hardcoded Input Browser <code>assertElementIsEditable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEditable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is editable\")\n    public void assertElementIsEditable() {\n        try {\n            assertThat(Locator).isEditable();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is editable\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not editable\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnoteditable","title":"assertElementIsNotEditable","text":"<p>Description:  This function will assert if the Element is not editable.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEditable</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEditable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEditable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not editable\")\n    public void assertElementIsNotEditable() {\n        try {\n            assertThat(Locator).not().isEditable();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not editable\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is editable\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisempty","title":"assertElementIsEmpty","text":"<p>Description:  This function will assert if the Element is empty.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEmpty</code> @value PageName Hardcoded Input Browser <code>assertElementIsEmpty</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEmpty</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is empty\")\n    public void assertElementIsEmpty() {\n        try {\n            assertThat(Locator).isEmpty();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is empty\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not empty\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotempty","title":"assertElementIsNotEmpty","text":"<p>Description:  This function will assert if the Element is not empty.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEmpty</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEmpty</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEmpty</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not empty\")\n    public void assertElementIsNotEmpty() {\n        try {\n            assertThat(Locator).not().isEmpty();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not empty\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is empty\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisenabled","title":"assertElementIsEnabled","text":"<p>Description:  This function will assert if the Element is enabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEnabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsEnabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEnabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is enabled\")\n    public void assertElementIsEnabled() {\n        try {\n            assertThat(Locator).isEnabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is enabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not enabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotenabled","title":"assertElementIsNotEnabled","text":"<p>Description:  This function will assert if the Element is not enabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEnabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEnabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEnabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not enabled\")\n    public void assertElementIsNotEnabled() {\n        try {\n            assertThat(Locator).not().isEnabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not enabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is enabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisfocused","title":"assertElementIsFocused","text":"<p>Description:  This function will assert if the Element is focused.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsFocused</code> @value PageName Hardcoded Input Browser <code>assertElementIsFocused</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsFocused</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is focused\")\n    public void assertElementIsFocused() {\n        try {\n            assertThat(Locator).isFocused();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is focused\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not focused\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotfocused","title":"assertElementIsNotFocused","text":"<p>Description:  This function will assert if the Element is not focused.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotFocused</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotFocused</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotFocused</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not focused\")\n    public void assertElementIsNotFocused() {\n        try {\n            assertThat(Locator).not().isFocused();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not focused\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is focused\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementishidden","title":"assertElementIsHidden","text":"<p>Description:  This function will assert if the Element is hidden.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsHidden</code> @value PageName Hardcoded Input Browser <code>assertElementIsHidden</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsHidden</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is hidden\")\n    public void assertElementIsHidden() {\n        try {\n            assertThat(Locator).isHidden();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is hidden\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not hidden\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnothidden","title":"assertElementIsNotHidden","text":"<p>Description:  This function will assert if the Element is not hidden.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotHidden</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotHidden</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotHidden</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not hidden\")\n    public void assertElementIsNotHidden() {\n        try {\n            assertThat(Locator).not().isHidden();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not hidden\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is hidden\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisinviewport","title":"assertElementIsInViewport","text":"<p>Description:  This function will assert if the Element is in viewport.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsInViewport</code> @value PageName Hardcoded Input Browser <code>assertElementIsInViewport</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsInViewport</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is in viewport\")\n    public void assertElementIsInViewport() {\n        try {\n            assertThat(Locator).isInViewport();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is in viewport\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not in viewport\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotinviewport","title":"assertElementIsNotInViewport","text":"<p>Description:  This function will assert if the Element is not in viewport.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotInViewport</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotInViewport</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotInViewport</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not in viewport\")\n    public void assertElementIsNotInViewport() {\n        try {\n            assertThat(Locator).not().isInViewport();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not in viewport\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is in viewport\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisvisible","title":"assertElementIsVisible","text":"<p>Description:  This function will assert if the Element is visible.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsVisible</code> @value PageName Hardcoded Input Browser <code>assertElementIsVisible</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is visible\")\n    public void assertElementIsVisible() {\n        try {\n            assertThat(Locator).isVisible();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is visible\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not visible\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertelementisnotvisible","title":"assertElementIsNotVisible","text":"<p>Description:  This function will assert if the Element is not visible.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotVisible</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotVisible</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not visible\")\n    public void assertElementIsNotVisible() {\n        try {\n            assertThat(Locator).not().isVisible();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not visible\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is visible\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertpagetitlematches","title":"assertPageTitleMatches","text":"<p>Description:  This function will assert the Page Title.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertPageTitleMatches</code> @value PageName Hardcoded Input Browser <code>assertPageTitleMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertPageTitleMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Assert if Page has title [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertPageTitleMatches() {\n\n        try {\n            assertThat(Page).hasTitle(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"Page has title matching '\" + Data + \"'\", Status.PASS);\n        } catch (AssertionFailedError e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Assertion Failed\", \"Page does not have title matching '\" + Data + \"'\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertpageurlmatches","title":"assertPageURLMatches","text":"<p>Description:  This function will assert the Page URL.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertPageURLMatches</code> @value PageName Hardcoded Input Browser <code>assertPageURLMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertPageURLMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Assert if Page has URL [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertPageURLMatches() {\n\n        try {\n            assertThat(Page).hasURL(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"Page has URL matching '\" + Data + \"'\", Status.PASS);\n        } catch (AssertionFailedError e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Assertion Failed\", \"Page does not have URL matching '\" + Data + \"'\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertvariable","title":"assertVariable","text":"<p>Description:  This function will assert if the variable value matched with provided data.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertVariable</code> @value PageName Hardcoded Input Browser <code>assertVariable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertVariable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER,desc = \"Assert if Key:Value -&gt; [&lt;Data&gt;] is valid\",input = InputType.YES)\n    public void assertVariable() throws RuntimeException {\n        try {\n            String strObj = Data;\n            String[] strTemp = strObj.split(\"=\", 2);\n            String strAns = strTemp[0].matches(\"%.+%\") ? getVar(strTemp[0]) : strTemp[0];\n            if (strAns.equals(strTemp[1])) {\n                System.out.println(\"Condition '\" + Input + \"' is true \");\n                Report.updateTestLog(\"assertVariable\",\n                        \"Variable matched with Provided data\", Status.PASS);\n\n            } else {\n                System.out.println(\"Condition '\" + Input + \"' is false \");\n                throw new Exception(\"Variable did not match with provided data\");\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n            throw new ForcedException(\"assertVariable\", ex.getMessage());\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/assertions/#assertvariablefromdatasheet","title":"assertVariableFromDataSheet","text":"<p>Description:  This function will assert if the variable value matches with given value from datasheet.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertVariableFromDataSheet</code> @value PageName Hardcoded Input Browser <code>assertVariableFromDataSheet</code> Sheet:Column PageName Input from Datasheet Browser <code>assertVariableFromDataSheet</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.BROWSER,desc = \"Assert if  the  variable value matches with given value from datasheet(variable:datasheet-&gt;  [&lt;Data&gt;] )\", input = InputType.YES, condition = InputType.YES)\n    public void assertVariableFromDataSheet() throws RuntimeException {\n        try {\n            String strAns = getVar(Condition);\n            if (strAns.equals(Data)) {\n                System.out.println(\"Variable \" + Condition + \" equals \"\n                        + Input);\n                Report.updateTestLog(Action,\n                        \"Variable is matched with the expected result\", Status.DONE);\n\n            } else {\n                System.out.println(\"Variable \" + Condition + \" is not equal \"\n                        + Input);\n                throw new ForcedException(Action,\n                        \"Variable did not match with provided data\");\n            }\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);\n            throw new ForcedException(\"assertVariableFromDataSheet\", e.getMessage());\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/browser/","title":"Browser/Page Actions","text":""},{"location":"playwrightActions/browser/#open","title":"Open","text":"<p>Description: This function will open the URL provided by the user in the selected browser</p> <p>Input Format : @URL</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>Open</code> @value <code>optional</code> page timeout in milliseconds Hardcoded Input Browser <code>Open</code> Sheet:Column <code>optional</code> page timeout in milliseconds Input from Datasheet Browser <code>Open</code> %dynamicVar% <code>optional</code> page timeout in milliseconds Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Open the Url [&lt;Data&gt;] in the Browser\", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void Open() {\n        Boolean pageTimeOut = false;\n        NavigateOptions navigateOptions = new NavigateOptions();\n        try {\n            if (Condition.matches(\"[0-9]+\")) {\n                navigateOptions.setTimeout(Double.valueOf(Condition));\n            }\n            Page.navigate(Data, navigateOptions);\n            Report.updateTestLog(\"Open\", \"Opened Url: \" + Data, Status.DONE);\n        } catch (TimeoutError e) {\n            Report.updateTestLog(\"Open\",\n                    \"Opened Url: \" + Data + \" and cancelled page load after \" + Condition + \" seconds\", Status.DONE);\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Open\", e.getMessage(), Status.FAIL);\n            throw new ForcedException(\"Open\", e.getMessage());\n        }\n        if (pageTimeOut) {\n            setPageTimeOut(300);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#goforward","title":"GoForward","text":"<p>Description:  This function is used to navigate to the next page in history.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>GoForward</code> <code>optional</code> page timeout in milliseconds <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Navigate to the next page in history\", input = InputType.NO, condition = InputType.OPTIONAL)\n    public void GoForward() {\n        GoForwardOptions goForwardOptions = new GoForwardOptions();\n        try {\n            if (Condition.matches(\"[0-9]+\")) {\n                goForwardOptions.setTimeout(Double.valueOf(Condition));\n            }\n            Page.goForward(goForwardOptions);\n            Report.updateTestLog(Action, \"Successfully navigated to the next page\", Status.DONE);\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(Action, e.getMessage(), Status.FAIL);\n        }\n\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#goback","title":"GoBack","text":"<p>Description:  This function is used to navigate to the previous page in history.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>GoBack</code> <code>optional</code> page timeout in milliseconds <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Navigate to the previous page in history\", input = InputType.NO, condition = InputType.OPTIONAL)\n    public void GoBack() {\n        GoBackOptions goBackOptions = new GoBackOptions();\n        try {\n            if (Condition.matches(\"[0-9]+\")) {\n                goBackOptions.setTimeout(Double.valueOf(Condition));\n            }\n            Page.goBack(goBackOptions);\n            Report.updateTestLog(Action, \"Successfully navigated to the previous page\", Status.DONE);\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(Action, e.getMessage(), Status.FAIL);\n        }\n\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#reload","title":"Reload","text":"<p>Description:  This method reloads the current page, in the same way as if the user had triggered a browser refresh.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>Reload</code> <code>optional</code> page timeout in milliseconds <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Reload the current page\", input = InputType.NO, condition = InputType.OPTIONAL)\n    public void Reload() {\n        ReloadOptions reloadOptions = new ReloadOptions();\n        try {\n            if (Condition.matches(\"[0-9]+\")) {\n                reloadOptions.setTimeout(Double.parseDouble(Condition));\n            }\n            Page.reload(reloadOptions);\n            Report.updateTestLog(Action, \"Successfully reloaded to the current page\", Status.DONE);\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(Action, e.getMessage(), Status.FAIL);\n        }\n\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#pause","title":"pause","text":"<p>Description:  This function is used to pause the execution for a specific duration</p> <p>Input Format : @duration in milliseconds. Example: @<code>5000</code> - this will pause the execution for 5 seconds.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>pause</code> @value <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Wait for [&lt;Data&gt;] milli seconds\", input = InputType.YES)\n    public void pause() {\n        try {\n            Thread.sleep(Long.parseLong(Data));\n            Report.updateTestLog(Action, \"Thread sleep for '\" + Long.parseLong(Data), Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAIL);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#clearcookies","title":"clearCookies","text":"<p>Description:  This function is used to clearCookies from the browser</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>clearCookies</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Clear Cookies\", input = InputType.NO)\n    public void clearCookies() {      \n        try {\n\n            BrowserContext.clearCookies();\n            Report.updateTestLog(Action, \"Cookies clear from the Browser\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#storecookiesinvariable","title":"storeCookiesInVariable","text":"<p>Description:  This function is used to storeCookiesInVariable </p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>storeCookiesInVariable</code> %dynamicVar% Input from variable <p>Inputs in the Input column should be passed as a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Store Cookies in a Variable\", input = InputType.YES)\n    public void storeCookiesInVariable() {\n        String strObj = Input;\n        String cookieString = \"\";\n        try{\n            List&lt;Cookie&gt; cookies = BrowserContext.cookies();\n            for (Cookie cookie : cookies)\n            {\n                cookieString+=\"Name=\"+cookie.name+\" ; \"+\"Value=\"+cookie.value+\" ; \"+\"Domain=\"+cookie.domain+\" ; \"+\"URL=\"+cookie.url+\" ; \"+\"Path=\"+cookie.path+\"\\n\";\n            }\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, cookieString);\n                Report.updateTestLog(Action, \"Cookies stored in variable\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/browser/#recordfromhere","title":"RecordFromHere","text":"<p>Description:  This function will start <code>recording</code> from the current page.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>RecordFromHere</code> -- <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Start Recorder from the current page\", input = InputType.NO, condition = InputType.NO)\n    public void RecordFromHere() {\n        try {\n            Page.pause();\n            Report.updateTestLog(Action, \"Successfully started Playwright recorder\", Status.DONE);\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(Action, e.getMessage(), Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/","title":"Click Actions","text":""},{"location":"playwrightActions/clicks/#click","title":"Click","text":"<p>Description: This function will click on a web element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Click</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] \")\n    public void Click() {\n    try {\n            Locator.click();\n            Report.updateTestLog(Action, \"Clicking on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(PlaywrightException e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#clickifvisible","title":"ClickIfVisible","text":"<p>Description: This function will click on a web element if it is visible on the page</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>ClickIfVisible</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] if it is displayed\")\n    public void ClickIfVisible() {\n        Page.waitForLoadState();\n        if (Locator != null) {\n            if (Locator.isVisible()) {\n                Click();\n            } else {\n                Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Visible\", Status.DONE);\n            }\n        } else {\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] not Exists\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#clickifdataexists","title":"ClickIfDataExists","text":"<p>Description:  This function will <code>click</code> on a web element if data exists, else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>ClickIfDataExists</code> @value PageName Hardcoded Input Object <code>ClickIfDataExists</code> Sheet:Column PageName Input from Datasheet Object <code>ClickIfDataExists</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] if Data Exists\", input = InputType.YES)\n    public void ClickIfDataExists() {\n        Page.waitForLoadState();\n        if (!Data.isEmpty()) {\n            Click();\n        } else {\n            Report.updateTestLog(Action, \"Data not present\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#doubleclick","title":"DoubleClick","text":"<p>Description: This function will double click on a web element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object DoubleClick PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Double Click the [&lt;Object&gt;]\")\n    public void DoubleClick() {\n        try {\n            Locator.dblclick();\n            Report.updateTestLog(Action, \"Double Clicking on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#rightclick","title":"RightClick","text":"<p>Description: This function will right click on a web element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object RightClick PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Right Click the [&lt;Object&gt;]\")\n    public void RightClick() {\n        try {\n            Locator.click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n            Report.updateTestLog(Action, \"Right Clicking on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#shiftclick","title":"ShiftClick","text":"<p>Description: This function will shift click on a web element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object ShiftClick PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Shift Click the [&lt;Object&gt;]\")\n    public void ShiftClick() {\n        try {\n            Locator.click(new Locator.ClickOptions().setModifiers(Arrays.asList(KeyboardModifier.SHIFT)));\n            Report.updateTestLog(Action, \"Shift Clicking on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#mousehover","title":"MouseHover","text":"<p>Description: This function will mouse hover on a web element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object MouseHover PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] \")\n    public void MouseHover() {\n    try {\n            Locator.hover();\n            Report.updateTestLog(Action, \"Hovering on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#mouseup","title":"MouseUp","text":"<p>Description: This function will press mouse up </p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser MouseUp PageName <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Press Mouse Up \")\n    public void MouseUp() {\n    try {\n            Page.mouse().up();\n            Report.updateTestLog(Action, \"Pressed Mouse Up\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#mousedown","title":"MouseDown","text":"<p>Description: This function will press mouse down </p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser MouseDown PageName <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Press Mouse Down \")\n    public void MouseDown() {\n    try {\n            Page.mouse().down();\n            Report.updateTestLog(Action, \"Pressed Mouse Down\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Element not Found. Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/clicks/#dragelementto","title":"DragElementTo","text":"<p>Description: This function will drag a source element to target element </p> <p>Input Format : @PageName,Target ObjectName - as defined in the Object Repository</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object DragElementTo @value PageName &lt;&lt; Hardcoded Input Object DragElementTo Sheet:Column PageName &lt;&lt; Input from Datasheet Object DragElementTo %dynamicVar% PageName &lt;&lt;Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Drag Source Object to Target\", input = InputType.YES)\n    public void DragElementTo() {\n        try {\n            com.microsoft.playwright.Locator source = Locator;\n            String pageName = Data.split(\",\")[0];\n            String targetObject = Data.split(\",\")[1];\n            com.microsoft.playwright.Locator target = AObject.findElement(targetObject, pageName);\n            source.dragTo(target);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] dragged and dropped to object referred in Page [\" + pageName + \"] and ObjectName [\" + targetObject + \"]\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.FAILNS);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/","title":"Dropdown &amp; Checkbox Actions","text":""},{"location":"playwrightActions/dropdowns/#selectsinglebytext","title":"SelectSingleByText","text":"<p>Description: This function is used to select a single value from a <code>select</code> type object.</p> <p>Input Format : @Value</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SelectSingleByText</code> @value PageName Hardcoded Input Object <code>SelectSingleByText</code> Sheet:Column PageName Input from Datasheet Object <code>SelectSingleByText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Select item in [&lt;Object&gt;] which has text: [&lt;Data&gt;]\", input = InputType.YES)\n    public void SelectSingleByText() {\n        try\n        {\n        Locator.selectOption(Data);\n        Report.updateTestLog(Action, \"Item '\" + Data\n                        + \"' is selected\" + \" from list [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#selectmultiplebytext","title":"SelectMultipleByText","text":"<p>Description: This function is used to select multiple values from a <code>select</code> type object.</p> <p>Input Format : @Values seperated by Pipe. For example <code>Value1</code>|<code>Value2</code>|<code>Value3</code>|<code>Value4</code></p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SelectMultipleByText</code> @value PageName Hardcoded Input Object <code>SelectMultipleByText</code> Sheet:Column PageName Input from Datasheet Object <code>SelectMultipleByText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Select items [&lt;Data&gt;] of [&lt;Object&gt;] by visible Text\", input = InputType.YES)\n    public void SelectMultipleByText() {\n        try\n        {\n        String options[] = Data.split(\"|\");\n        Locator.selectOption(options);\n        Report.updateTestLog(Action, \"Items '\" + Data\n                        + \"' are selected\" + \" from list [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#selectsinglebytextifdataexists","title":"SelectSingleByTextIfDataExists","text":"<p>Description:  This function is used to <code>select</code> a single value from a select type object if data exists, else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SelectSingleByTextIfDataExists</code> @value PageName Hardcoded Input Object <code>SelectSingleByTextIfDataExists</code> Sheet:Column PageName Input from Datasheet Object <code>SelectSingleByTextIfDataExists</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Select item in [&lt;Object&gt;] which has text: [&lt;Data&gt;] if it Data exists\", input = InputType.YES)\n    public void SelectSingleByTextIfDataExists() {\n        Page.waitForLoadState();\n        if (!Data.isEmpty()) {\n            SelectSingleByText();\n        } else {\n            Report.updateTestLog(Action, \"Data not present\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#selectsinglebytextifvisible","title":"SelectSingleByTextIfVisible","text":"<p>Description:  This function will check if an element is visible. If the element is visible, it will <code>select</code> a single value from a select type object, else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SelectSingleByTextIfVisible</code> @value PageName Hardcoded Input Object <code>SelectSingleByTextIfVisible</code> Sheet:Column PageName Input from Datasheet Object <code>SelectSingleByTextIfVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Select item in [&lt;Object&gt;] if visible which has text: [&lt;Data&gt;]\", input = InputType.YES)\n    public void SelectSingleByTextIfVisible() {\n        Page.waitForLoadState();\n        if (Locator.isVisible()) {\n            SelectSingleByText();\n        } else {\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"]\" + \" is not visible\", Status.DONE);\n        }\n}\n</code></pre>"},{"location":"playwrightActions/dropdowns/#check","title":"Check","text":"<p>Description: This function is used to check a <code>check-box</code> type object.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Check</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Check the [&lt;Object&gt;] element\")\n    public void Check() {\n        if (Locator != null) {\n            if (Locator.isEnabled()) {\n                if (!Locator.isChecked()) {\n                    Locator.check();\n                }\n                if (Locator.isChecked()) {\n                    Report.updateTestLog(\"check\", \"Checkbox '\" + Locator\n                            + \"'  has been selected/checked successfully\",\n                            Status.DONE);\n                } else {\n                    Report.updateTestLog(\"check\", \"Checkbox '\" + Locator\n                            + \"' couldn't be selected/checked\", Status.FAIL);\n                }\n            } else {\n                Report.updateTestLog(\"check\", \"Checkbox '\" + Locator\n                        + \"' is not enabled\", Status.FAIL);\n            }\n        } else {\n            Report.updateTestLog(Action, \"Object [\" + ObjectName + \"] not found\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#uncheck","title":"Uncheck","text":"<p>Description: This function is used to uncheck a <code>check-box</code> type object.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Uncheck</code> PageName <pre><code>@Action(object = ObjectType.WEB, desc = \"Uncheck the [&lt;Object&gt;] element\")\n    public void Uncheck() {\n        if (Locator != null) {\n            if (Locator.isEnabled()) {\n                if (Locator.isChecked()) {\n                    Locator.uncheck();\n                }\n                if (!Locator.isChecked()) {\n                    Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Locator\n                            + \"'  has been un-checked successfully\",\n                            Status.DONE);\n                } else {\n                    Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Locator\n                            + \"' couldn't be un-checked\", Status.FAIL);\n                }\n            } else {\n                Report.updateTestLog(\"uncheck\", \"Checkbox '\" + Locator\n                        + \"' is not enabled\", Status.FAIL);\n            }\n        } else {\n            Report.updateTestLog(Action, \"Object[\" + ObjectName + \"] not found\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#checkifvisible","title":"CheckIfVisible","text":"<p>Description:  This function will check if an element is visible. If the element is visible, it will <code>check</code> a check-box type object, else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>CheckIfVisible</code> @value PageName Hardcoded Input Object <code>CheckIfVisible</code> Sheet:Column PageName Input from Datasheet Object <code>CheckIfVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Check [&lt;Object&gt;] if visible\", input = InputType.YES)\n    public void CheckIfVisible() {\n        Page.waitForLoadState();\n        if (Locator.isVisible()) {\n            Check();\n        } else {\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"]\" + \" is not visible\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#setchecked","title":"SetChecked","text":"<p>Description:  This function will <code>check/uncheck</code> a checkbox type object.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SetChecked</code> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Check/Uncheck the [&lt;Object&gt;] element based on Data\", input = InputType.YES)\n    public void SetChecked() {\n        try {\n            Locator.setChecked(Boolean.parseBoolean(Data));\n            Report.updateTestLog(Action, \"Setting checked status of\" + \"[\" + ObjectName + \"] as [\" + Data + \"]\", Status.DONE);\n        } catch (PlaywrightException e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\" + Action + \"] action\", \"Error: \" + e.getMessage(), Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dropdowns/#setcheckedifdataexists","title":"SetCheckedifDataExists","text":"<p>Description:  This function will <code>check/uncheck</code> a checkbox type object based on input data.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SetCheckedifDataExists</code> @value PageName Hardcoded Input Object <code>SetCheckedifDataExists</code> Sheet:Column PageName Input from Datasheet Object <code>SetCheckedifDataExists</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Check/Uncheck the [&lt;Object&gt;] element based on Data\", input = InputType.YES)\n    public void SetCheckedifDataExists() {\n        if (!Data.isEmpty()) {\n            SetChecked();\n        } else {\n            Report.updateTestLog(Action, \"Data not present\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dynamicObject/","title":"Dynamic Object","text":""},{"location":"playwrightActions/dynamicObject/#setobjectproperty","title":"setObjectProperty","text":"<p>Description:  This function will set object property as data at runtime</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>setObjectProperty</code> @value #var PageName Hardcoded Input Object <code>setObjectProperty</code> Sheet:Column #var PageName Input from Datasheet Object <code>setObjectProperty</code> %dynamicVar% #var PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Set object [&lt;Object&gt;] property  as [&lt;Data&gt;] at runtime\", input = InputType.YES, condition = InputType.YES)\n    public void setObjectProperty() {\n        if (!Data.isEmpty()) {\n            if (Condition.isEmpty()) {\n                String[] groups = Data.split(\",\");\n                for (String group : groups) {\n                    String[] vals = group.split(\"=\", 2);\n                    setProperty(vals[0], vals[1]);\n                }\n            } else {\n                setProperty(Condition, Data);\n            }\n            String text = String.format(\"Setting Object Property for %s with %s for Object [%s - %s]\",\n                    Condition, Data, Reference, ObjectName);\n            Report.updateTestLog(Action, text, Status.DONE);\n        } else {\n            Report.updateTestLog(Action, \"Input should not be empty\", Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/dynamicObject/#setglobalobjectproperty","title":"setglobalObjectProperty","text":"<p>Description:  This function will set all objects property as data at runtime</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>setglobalObjectProperty</code> @value #var PageName Hardcoded Input Object <code>setglobalObjectProperty</code> Sheet:Column #var PageName Input from Datasheet Object <code>setglobalObjectProperty</code> %dynamicVar% #var PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Set  all objects property to [&lt;Data&gt;] at runtime.\", input = InputType.YES, condition = InputType.YES)\n    public void setglobalObjectProperty() {\n        if (!Data.isEmpty()) {\n            if (Condition.isEmpty()) {\n                String[] groups = Data.split(\",\");\n                for (String group : groups) {\n                    String[] vals = group.split(\"=\", 2);\n                    AutomationObject.globalDynamicValue.put(vals[0], vals[1]);\n                }\n            } else {\n                AutomationObject.globalDynamicValue.put(Condition, Data);\n            }\n            String text = String.format(\"Setting Global Object Property for %s with %s\", Condition, Data);\n            Report.updateTestLog(Action, text, Status.DONE);\n        } else {\n            Report.updateTestLog(Action, \"Input should not be empty\", Status.FAILNS);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fileuploads/","title":"File Upload Actions","text":""},{"location":"playwrightActions/fileuploads/#setinputfile","title":"SetInputFile","text":"<p>Description: This function is used to set a single file for upload.</p> <p>Input Format : @File Path</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SetInputFile</code> @value PageName Hardcoded Input Object <code>SetInputFile</code> Sheet:Column PageName Input from Datasheet Object <code>SetInputFile</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Set Single InputFile path in [&lt;Object&gt;]\", input = InputType.YES)\n    public void SetInputFile() {\n        try\n        {\n        Locator.setInputFiles(Paths.get(Data));\n        Report.updateTestLog(Action, \"File Path '\" + Data\n                        + \"' is set on [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fileuploads/#setinputfiles","title":"SetInputFiles","text":"<p>Description: This function is used to set multiple files for upload</p> <p>Input Format : @File Paths seperated by Pipe. For example <code>Path1</code>|<code>Path2</code>|<code>Path3</code>|<code>Path4</code></p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>SetInputFiles</code> @value PageName Hardcoded Input Object <code>SetInputFiles</code> Sheet:Column PageName Input from Datasheet Object <code>SetInputFiles</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Set Multiple InputFile paths in [&lt;Object&gt;]\", input = InputType.YES)\n    public void SetInputFiles() {\n        try\n        {\n        String paths[] = Data.split(\"|\");\n        Path filepaths[] = new Path[paths.length];\n        for (int i=0;i&lt;paths.length;i++){\n            filepaths[i] = Paths.get(paths[i]);\n        }\n        Locator.setInputFiles(filepaths);\n        Report.updateTestLog(Action, \"File Paths '\" + Data\n                        + \"' are set on\" + \" from list [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fileuploads/#removeinputfile","title":"RemoveInputFile","text":"<p>Description: This function is used to remove all selected files from upload object.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>RemoveInputFile</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Remove all selected files from [&lt;Object&gt;]\", input = InputType.YES)\n    public void RemoveInputFile() {\n        try\n        {\n        Locator.setInputFiles(new Path[0]);\n        Report.updateTestLog(Action, \"File Path '\" + Data\n                        + \"' is removed from [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fileuploads/#filechooser","title":"FileChooser","text":"<p>Description: This function is used to set file paths to a File Chooser object.</p> <p>Input Format : @File Path</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>FileChooser</code> @value PageName Hardcoded Input Object <code>FileChooser</code> Sheet:Column PageName Input from Datasheet Object <code>FileChooser</code> %dynamicVar% PageName Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Set InputFile path in [&lt;Object&gt;]\", input = InputType.YES)\n    public void FileChooser() {\n        try\n        {\n        FileChooser fileChooser = Page.waitForFileChooser(() -&gt; Locator.click());\n        fileChooser.setFiles(Paths.get(Data));\n        Report.updateTestLog(Action, \"File Path '\" + Data\n                        + \"' is set on [\" + ObjectName +\"]\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fileuploads/#downloadandsaveas","title":"DownloadandSaveAs","text":"<p>Description: This function is used to download a file and save it in a desired path.</p> <p>Input Format : @File Path</p> <p>Condition Format : Optional. Leave it blank if you want to handle the file name as default. If you want a specific name, pass it in the Condition.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>DownloadandSaveAs</code> @value FileName PageName Hardcoded Input Object <code>DownloadandSaveAs</code> Sheet:Column FileName PageName Input from Datasheet Object <code>DownloadandSaveAs</code> %dynamicVar% FileName PageName Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Set InputFile path in [&lt;Object&gt;]\", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void DownloadandSaveAs() {\n        String fileName = \"\";\n        try\n        {\n        Download download  = Page.waitForDownload(() -&gt; Locator.click());\n        if (!Condition.isEmpty())\n            fileName = Condition;\n        else\n            fileName = download.suggestedFilename();\n        download.saveAs(Paths.get(Data,fileName));\n        Report.updateTestLog(Action, \"File downloaded at path '\" + Data + \"'\", Status.DONE);\n        }\n        catch (Exception e){\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/","title":"Focus Actions","text":""},{"location":"playwrightActions/focus/#focus","title":"Focus","text":"<p>Description:  This function is used to focus on an element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Focus</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Focus on the [&lt;Object&gt;] \")\n    public void Focus() {\n    try {\n            Locator.focus();\n            Report.updateTestLog(Action, \"Focussing on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Element not Found. Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/#blur","title":"Blur","text":"<p>Description:  This function is used to blur an element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Blur</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Remove focus from [&lt;Object&gt;] \",input = InputType.YES)\n    public void Blur() {\n    try {\n            Locator.blur();\n            Report.updateTestLog(Action, \"Removing focus from \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Element not Found. Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/#highlight","title":"Highlight","text":"<p>Description:  This function is used to Highlight an element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Highlight</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Highlight the element [&lt;Object&gt;]\", input = InputType.OPTIONAL)\n    public void Highlight() {        \n        try {\n            Locator.highlight();\n            Report.updateTestLog(Action, \"Element [\"+ ObjectName +\"] Highlighted\",Status.PASS);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/#scrollintoviewifneeded","title":"ScrollIntoViewIfNeeded","text":"<p>Description:  This function is used to scroll into view an element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>ScrollIntoViewIfNeeded</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc =\"Scroll in to view the [&lt;Object&gt;]\")\n    public void ScrollIntoViewIfNeeded() {\n        try{\n            Locator.scrollIntoViewIfNeeded();\n            Report.updateTestLog(Action, \"Scrolled to view for \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/#takepagescreenshot","title":"TakePageScreenshot","text":"<p>Description:  This function is used to take screenshot of the page</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>TakePageScreenshot</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Take a Screen Shot \")\n    public void TakePageScreenshot() {\n        try {\n            Report.updateTestLog(Action, \"Screenshot is taken\", Status.PASS);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.DEBUG);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/focus/#takeelementscreenshot","title":"TakeElementScreenshot","text":"<p>Description:  This function is used to take screenshot of an element</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>TakeElementScreenshot</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Take a Screen Shot of [&lt;Object&gt;]\")\n    public void TakeElementScreenshot() {\n        try {\n            Locator.screenshot();\n            Report.updateTestLog(Action, \"Element Screenshot is taken\", Status.PASS);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, e.getMessage(), Status.DEBUG);\n            Logger.getLogger(CommonMethods.class.getName()).log(Level.SEVERE, null, e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fulfill/","title":"RequestFulfill","text":""},{"location":"playwrightActions/fulfill/#routefulfillendpoint","title":"RouteFulfillEndpoint","text":"<p>Description:  This function will set the endpoint for the request which is required to be mocked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>RouteFulfillEndpoint</code> @value PageName Hardcoded Input Browser <code>RouteFulfillEndpoint</code> Sheet:Column PageName Input from Datasheet Browser <code>RouteFulfillEndpoint</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Set Endpoint for mocking request\", input = InputType.YES)\n    public void RouteFulfillEndpoint() {\n        try {\n            String resource = handlePayloadorEndpoint(Data);\n            mockEndPoints.put(key, resource);\n            Report.updateTestLog(Action, \"End point set : \" + resource, Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error setting the end point :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/fulfill/#routefulfillsetbody","title":"RouteFulfillSetBody","text":"<p>Description:  This function will set the body for the request which is required to be mocked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>RouteFulfillSetBody</code> @value PageName Hardcoded Input Browser <code>RouteFulfillSetBody</code> Sheet:Column PageName Input from Datasheet Browser <code>RouteFulfillSetBody</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Set body for mocking request\", input = InputType.YES)\n    public void RouteFulfillSetBody() {\n        try {\n            Route.FulfillOptions fulfillOptions = new Route.FulfillOptions();\n            Page.route(mockEndPoints.get(key), route -&gt; {\n                try {\n                    route.fulfill(fulfillOptions.setBody(handlePayloadorEndpoint(Data)));\n                } catch (FileNotFoundException ex) {\n                    Logger.getLogger(RequestFulfill.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            });\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error setting the body :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/","title":"JavaScript Actions","text":""},{"location":"playwrightActions/js/#browserexecuteeval","title":"BrowserExecuteEval","text":"<p>Description: This function is used to execute a Java Script on the browser</p> <p>Input Format : @Java Script to be executed</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>BrowserExecuteEval</code> @value PageName Hardcoded Input Browser <code>BrowserExecuteEval</code> Sheet:Column PageName Input from Datasheet Browser <code>BrowserExecuteEval</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"To execute the JavaScript commands\", input = InputType.YES)\n    public void BrowserExecuteEval() {\n        try {\n            Page.evaluate(Data);\n            Report.updateTestLog(Action, \"Javascript executed\", Status.DONE);\n\n        } catch (Exception ex) {\n            Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex);\n\n            Report.updateTestLog(Action, \"Javascript execution failed\", Status.DEBUG);\n\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/#locatorexecuteeval","title":"LocatorExecuteEval","text":"<p>Description: This function is used to execute a Java Script on the element</p> <p>Input Format : @Java Script to be executed</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>LocatorExecuteEval</code> @value PageName Hardcoded Input Object <code>LocatorExecuteEval</code> Sheet:Column PageName Input from Datasheet Object <code>LocatorExecuteEval</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"To execute the JavaScript commands\", input = InputType.YES)\n    public void LocatorExecuteEval() {\n        try {\n            Locator.evaluate(Data);\n            Report.updateTestLog(Action, \"Javascript executed\", Status.DONE);\n\n        } catch (Exception ex) {\n            Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex);\n\n            Report.updateTestLog(Action, \"Javascript execution failed\", Status.DEBUG);\n\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/#storeeval","title":"StoreEval","text":"<p>Description: This function is used to execute and store the value from a Java Script command in variable</p> <p>Input Format : @Java Script to be executed</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>StoreEval</code> @value %var% PageName Hardcoded Input Browser <code>StoreEval</code> Sheet:Column %var% PageName Input from Datasheet Browser <code>StoreEval</code> %dynamicVar% %var% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"To Store value from the JavaScript command\", input = InputType.YES, condition=InputType.YES)\n    public void StoreEval() {\n        try {\n            String variableName = Condition;\n            String value = \"\";\n            if (variableName.matches(\"%.*%\")) {\n                value = (String) Page.evaluate(Data);\n                addVar(variableName, value);\n                Report.updateTestLog(Action, \"JS evaluated value stored\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n\n        } catch (Exception ex) {\n            Logger.getLogger(JSCommands.class.getName()).log(Level.SEVERE, null, ex);\n            Report.updateTestLog(Action, \"Javascript execution failed\", Status.DEBUG);\n\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/#fillbyjs","title":"fillByJS","text":"<p>Description: This function will <code>set</code> data into an input field using <code>JavaScript</code>.</p> <p>Input Format : @Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>fillByJS</code> @value PageName Hardcoded Input Object <code>fillByJS</code> Sheet:Column PageName Input from Datasheet Object <code>fillByJS</code> %dynamicVar% PageName Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the Field [&lt;Object&gt;]\", input = InputType.YES)\n    public void fillByJS() {\n    try {\n            Locator.clear();\n            Locator.evaluate(\"element =&gt; element.value='\"+Data+\"'\");\n            Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\"\n                    + \"[\"+ObjectName+\"]\" + \"'\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/#clickbyjs","title":"clickByJS","text":"<p>Description: This function will click on an element using <code>JavaScript</code>.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>clickByJS</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] using JavaScript \")\n    public void clickByJS() {\n    try {\n            Locator.evaluate(\"element =&gt; element.click()\");\n            Report.updateTestLog(Action, \"Clicking on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(PlaywrightException e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/js/#clickbyjsifvisible","title":"clickByJSifVisible","text":"<p>Description: This function will click on an element using <code>JavaScript</code> if the element is visible.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>clickByJSifVisible</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Click the [&lt;Object&gt;] if it is displayed\")\n    public void clickByJSifVisible() {\n        if (Locator != null) {\n            if (Locator.isVisible()) {\n                clickByJS();\n            } else {\n                Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not Visible\", Status.DONE);\n            }\n        } else {\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not Exist\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/keyboard/","title":"KeyBoard Actions","text":""},{"location":"playwrightActions/keyboard/#keypressonelement","title":"KeyPressOnElement","text":"<p>Description: This function is used to press a key or combination of keys on an element.</p> <p>Input Format : @Expected Keys or combination. Examples :</p> <p><code>F1</code> - <code>F12</code>, <code>Digit0</code> - <code>Digit9</code>, <code>KeyA</code> - <code>KeyZ</code>, <code>Backquote</code>, <code>Minus</code>, <code>Equal</code>, <code>Backslash</code>, <code>Backspace</code>, <code>Tab</code>, <code>Delete</code>, <code>Escape</code>, <code>ArrowDown</code>, <code>End</code>, <code>Enter</code>, <code>Home</code>, <code>Insert</code>, <code>PageDown</code>, <code>PageUp</code>, <code>ArrowRight</code>, <code>ArrowUp</code>, etc.</p> <p>Following modification shortcuts are also supported: <code>Shift</code>, <code>Control</code>, <code>Alt</code>, <code>Meta</code>, <code>ShiftLeft</code>.</p> <p>Holding down <code>Shift</code> will type the text that corresponds to the <code>key</code> in the upper case.</p> <p>If key is a single character, it is case-sensitive, so the values a and A will generate different respective texts.</p> <p>Shortcuts such as <code>key: \"Control+o\"</code> or <code>key: \"Control+Shift+T\"</code> are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.</p> <p>A full list of keys can be found here</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>KeyPressOnElement</code> @value PageName Input from Datasheet Object <code>KeyPressOnElement</code> Sheet:Column PageName Input from variable Object <code>KeyPressOnElement</code> %dynamicVar% PageName Hardcoded Input <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Press the [&lt;Object&gt;] \",input = InputType.YES)\n    public void KeyPressOnElement() {\n    try {\n            Locator.press(Data);\n            Report.updateTestLog(Action, \"Pressed key [\"+ Data + \"] on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/keyboard/#keypress","title":"KeyPress","text":"<p>Description: This function is used to press a key or combination of keys .</p> <p>Input Format : @Expected Keys or combination. Examples :</p> <p><code>F1</code> - <code>F12</code>, <code>Digit0</code> - <code>Digit9</code>, <code>KeyA</code> - <code>KeyZ</code>, <code>Backquote</code>, <code>Minus</code>, <code>Equal</code>, <code>Backslash</code>, <code>Backspace</code>, <code>Tab</code>, <code>Delete</code>, <code>Escape</code>, <code>ArrowDown</code>, <code>End</code>, <code>Enter</code>, <code>Home</code>, <code>Insert</code>, <code>PageDown</code>, <code>PageUp</code>, <code>ArrowRight</code>, <code>ArrowUp</code>, etc.</p> <p>Following modification shortcuts are also supported: <code>Shift</code>, <code>Control</code>, <code>Alt</code>, <code>Meta</code>, <code>ShiftLeft</code>.</p> <p>Holding down <code>Shift</code> will type the text that corresponds to the <code>key</code> in the upper case.</p> <p>If key is a single character, it is case-sensitive, so the values a and A will generate different respective texts.</p> <p>Shortcuts such as <code>key: \"Control+o\"</code> or <code>key: \"Control+Shift+T\"</code> are supported as well. When specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.</p> <p>A full list of keys can be found here</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>KeyPress</code> @value PageName Input from Datasheet Browser <code>KeyPress</code> Sheet:Column PageName Input from variable Browser <code>KeyPress</code> %dynamicVar% PageName Hardcoded Input <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Press the [&lt;Object&gt;] \",input = InputType.YES)\n    public void KeyPressOnElement() {\n    try {\n            Locator.press(Data);\n            Report.updateTestLog(Action, \"Pressed key [\"+ Data + \"] on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/keyboard/#keyup","title":"KeyUp","text":"<p>Description: This function is used to press up a key or combination of keys .</p> <p>Input Format : @Expected Keys or combination. Examples : as stated above.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>KeyUp</code> @value PageName Input from Datasheet Browser <code>KeyUp</code> Sheet:Column PageName Input from variable Browser <code>KeyUp</code> %dynamicVar% PageName Hardcoded Input <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Press Key Up \",input = InputType.YES)\n    public void KeyUp() {\n    try {\n            Page.keyboard().up(Data);\n            Report.updateTestLog(Action, \"Pressed key [\"+ Data + \"] Up\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/keyboard/#keydown","title":"KeyDown","text":"<p>Description: This function is used to press down a key or combination of keys .</p> <p>Input Format : @Expected Keys or combination. Examples : as stated above.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>KeyDown</code> @value PageName Input from Datasheet Browser <code>KeyDown</code> Sheet:Column PageName Input from variable Browser <code>KeyDown</code> %dynamicVar% PageName Hardcoded Input <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Press Key Down \",input = InputType.YES)\n    public void KeyDown() {\n    try {\n            Page.keyboard().down(Data);\n            Report.updateTestLog(Action, \"Pressed key [\"+ Data + \"] Down\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/keyboard/#keyinserttext","title":"KeyInsertText","text":"<p>Description: This function is used to insert a text via key press .</p> <p>Input Format : @Expected Keys or combination. Examples : as stated above.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>KeyInsertText</code> @value PageName Input from Datasheet Browser <code>KeyInsertText</code> Sheet:Column PageName Input from variable Browser <code>KeyInsertText</code> %dynamicVar% PageName Hardcoded Input <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Insert Text via Keyboard\",input = InputType.YES)\n    public void KeyInsertText() {\n    try {\n            Page.keyboard().insertText(Data);\n            Report.updateTestLog(Action, \"Inserted Text [\"+ Data + \"]\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/","title":"Negative Assertions","text":""},{"location":"playwrightActions/negativeassertions/#assertelementnotcontainstext","title":"assertElementNotContainsText","text":"<p>Description:  This function will assert if the Element's <code>text</code> does not contain the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementNotContainsText</code> @value PageName Hardcoded Input Browser <code>assertElementNotContainsText</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementNotContainsText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not contain text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementNotContainsText() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).not().containsText(Data);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] does not contain text '\" + Data + \"'. Actual text is '\" + text + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] contains text '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementattributenotmatches","title":"assertElementAttributeNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected attribute.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementAttributeNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementAttributeNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementAttributeNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have attribute [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementAttributeNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        String actualAttributeValue = \"\";\n        try {\n            actualAttributeValue = Locator.getAttribute(attributeName);\n            assertThat(Locator).not().hasAttribute(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] does not have attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'. Actual value is '\" + actualAttributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has attribute '\" + attributeName + \" = \" + actualAttributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementclassnotmatches","title":"assertElementClassNotMatches","text":"<p>Description:  This function will assert if the Element does not match the expected class.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementClassNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementClassNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementClassNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have class [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementClassNotMatches() {\n        String actualClassValue = \"\";\n        try {\n            actualClassValue = Locator.getAttribute(\"class\");\n            assertThat(Locator).not().hasClass(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have 'class' matching '\" + Data + \"'. Actual value is '\" + actualClassValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has 'class' matching '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementcountnotmatches","title":"assertElementCountNotMatches","text":"<p>Description:  This function will assert if the count of Element does not match the expected count</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCountNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCountNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCountNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if count of [&lt;Object&gt;] does not match [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCountNotMatches() {\n        int elementCount = 0;\n        try {\n            elementCount = Locator.count();\n            assertThat(Locator).not().hasCount(Integer.parseInt(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] count does not match '\" + Data + \"'. Actual count is +'\" + elementCount + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] count matches '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementcssnotmatches","title":"assertElementCSSNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected CSS attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCSSNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCSSNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCSSNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have the CSS [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCSSNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).not().hasCSS(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementidnotmatches","title":"assertElementIdNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected ID</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIdNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementIdNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIdNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have ID [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementIdNotMatches() {\n        String actualIdValue = \"\";\n        try {\n            actualIdValue = Locator.getAttribute(\"id\");\n            assertThat(Locator).not().hasId(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have 'ID' matching '\" + Data + \"'. Actual value is '\" + actualIdValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has 'ID' matching '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementjspropertynotmatches","title":"assertElementJSPropertyNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected JS Property attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementJSPropertyNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementJSPropertyNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementJSPropertyNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have JS Property [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementJSPropertyNotMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).not().hasJSProperty(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementtextnotmatches","title":"assertElementTextNotMatches","text":"<p>Description:  This function will assert if the Element's <code>text</code> does not match the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementTextNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementTextNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementTextNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementTextNotMatches() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).not().hasText(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have text '\" + Data + \"'. Actual text is '\" + text + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has text '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementvaluenotmatches","title":"assertElementValueNotMatches","text":"<p>Description:  This function will assert if the Element's <code>value</code> does not match the expected value</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValueNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementValueNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValueNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not value [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValueNotMatches() {\n\n        String value = \"\";\n        try {\n            value = Locator.getAttribute(\"value\");\n            assertThat(Locator).not().hasValue(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have value '\" + Data + \"'. Actual value is '\" + value + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has value '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementvaluesnotmatch","title":"assertElementValuesNotMatch","text":"<p>Description:  This function will assert if the Element's <code>values</code> does not match the expected values</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValuesNotMatch</code> @value PageName Hardcoded Input Browser <code>assertElementValuesNotMatch</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValuesNotMatch</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have values [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValuesNotMatch() {\n        try {\n            String values[] = Data.split(\",\");\n            Pattern[] pattern = new Pattern[values.length];\n            for (int i = 0; i &lt; values.length; i++) {\n                pattern[i] = Pattern.compile(values[i]);\n            }\n            assertThat(Locator).not().hasValues(pattern);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have values '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has values '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotattached","title":"assertElementIsNotAttached","text":"<p>Description:  This function will assert if the Element is not attached to the DOM</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotAttached</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotAttached</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotAttached</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not point to an attached DOM node\")\n    public void assertElementIsNotAttached() {\n        try {\n            assertThat(Locator).not().isAttached();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not attached to the DOM\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is attached to the DOM\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotchecked","title":"assertElementIsNotChecked","text":"<p>Description:  This function will assert if the Element is not checked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotChecked</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotChecked</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotChecked</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not checked\")\n    public void assertElementIsNotChecked() {\n        try {\n            assertThat(Locator).not().isChecked();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not checked\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is checked\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotdisabled","title":"assertElementIsNotDisabled","text":"<p>Description:  This function will assert if the Element is not disabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotDisabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotDisabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotDisabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not disabled\")\n    public void assertElementIsNotDisabled() {\n        try {\n            assertThat(Locator).not().isDisabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not disabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is disabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementidnotmatches_1","title":"assertElementIdNotMatches","text":"<p>Description:  This function will assert if the Element does not have the expected ID</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIdNotMatches</code> @value PageName Hardcoded Input Browser <code>assertElementIdNotMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIdNotMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] does not have ID [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementIdNotMatches() {\n        String actualIdValue = \"\";\n        try {\n            actualIdValue = Locator.getAttribute(\"id\");\n            assertThat(Locator).not().hasId(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] does not have 'ID' matching '\" + Data + \"'. Actual value is '\" + actualIdValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] has 'ID' matching '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnoteditable","title":"assertElementIsNotEditable","text":"<p>Description:  This function will assert if the Element is not editable.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEditable</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEditable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEditable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not editable\")\n    public void assertElementIsNotEditable() {\n        try {\n            assertThat(Locator).not().isEditable();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not editable\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is editable\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotempty","title":"assertElementIsNotEmpty","text":"<p>Description:  This function will assert if the Element is not empty.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEmpty</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEmpty</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEmpty</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not empty\")\n    public void assertElementIsNotEmpty() {\n        try {\n            assertThat(Locator).not().isEmpty();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not empty\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is empty\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotenabled","title":"assertElementIsNotEnabled","text":"<p>Description:  This function will assert if the Element is not enabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotEnabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotEnabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotEnabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not enabled\")\n    public void assertElementIsNotEnabled() {\n        try {\n            assertThat(Locator).not().isEnabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not enabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is enabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotfocused","title":"assertElementIsNotFocused","text":"<p>Description:  This function will assert if the Element is not focused.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotFocused</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotFocused</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotFocused</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not focused\")\n    public void assertElementIsNotFocused() {\n        try {\n            assertThat(Locator).not().isFocused();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not focused\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is focused\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnothidden","title":"assertElementIsNotHidden","text":"<p>Description:  This function will assert if the Element is not hidden.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotHidden</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotHidden</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotHidden</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not hidden\")\n    public void assertElementIsNotHidden() {\n        try {\n            assertThat(Locator).not().isHidden();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not hidden\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is hidden\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotinviewport","title":"assertElementIsNotInViewport","text":"<p>Description:  This function will assert if the Element is not in viewport.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotInViewport</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotInViewport</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotInViewport</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not in viewport\")\n    public void assertElementIsNotInViewport() {\n        try {\n            assertThat(Locator).not().isInViewport();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not in viewport\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is in viewport\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/negativeassertions/#assertelementisnotvisible","title":"assertElementIsNotVisible","text":"<p>Description:  This function will assert if the Element is not visible.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsNotVisible</code> @value PageName Hardcoded Input Browser <code>assertElementIsNotVisible</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsNotVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is not visible\")\n    public void assertElementIsNotVisible() {\n        try {\n            assertThat(Locator).not().isVisible();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is not visible\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is visible\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/","title":"Positive Assertions","text":""},{"location":"playwrightActions/positiveassertions/#assertelementcontainstext","title":"assertElementContainsText","text":"<p>Description:  This function will assert if the Element's <code>text</code> contains the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementContainsText</code> @value PageName Hardcoded Input Browser <code>assertElementContainsText</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementContainsText</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] contains the text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementContainsText() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).containsText(Data);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] contains text '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not contain text '\" + Data + \"'. Actual text is '\" + text + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementattributematches","title":"assertElementAttributeMatches","text":"<p>Description:  This function will assert if the Element has the expected attribute.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementAttributeMatches</code> @value PageName Hardcoded Input Browser <code>assertElementAttributeMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementAttributeMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has the attribute [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementAttributeMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        String actualattributeValue = \"\";\n        try {\n            actualattributeValue = Locator.getAttribute(attributeName);\n            assertThat(Locator).hasAttribute(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"Element [\" + ObjectName + \"] has attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have attribute '\" + attributeName + \" = \" + attributeValue + \"'. Actual value is '\" + actualattributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementclassmatches","title":"assertElementClassMatches","text":"<p>Description:  This function will assert if the Element match the expected class</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementClassMatches</code> @value PageName Hardcoded Input Browser <code>assertElementClassMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementClassMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has class [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementClassMatches() {\n        String actualClassValue = \"\";\n        try {\n            actualClassValue = Locator.getAttribute(\"class\");\n            assertThat(Locator).hasClass(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has 'class' matching '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have 'class' matching '\" + Data + \"'. Actual value is '\" + actualClassValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementcountmatches","title":"assertElementCountMatches","text":"<p>Description:  This function will assert if the count of Element matches the expected count</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCountMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCountMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCountMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if count of [&lt;Object&gt;] matches [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCountMatches() {\n        int elementCount = 0;\n        try {\n            elementCount = Locator.count();\n            assertThat(Locator).hasCount(Integer.parseInt(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] count matches '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] count does not match '\" + Data + \"'. Actual count is +'\" + elementCount + \"'\");\n        }\n    }\n</code></pre> <p>Description:  This function will assert if the Element has the expected CSS attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementCSSMatches</code> @value PageName Hardcoded Input Browser <code>assertElementCSSMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementCSSMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has the CSS [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementCSSMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).hasCSS(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have CSS attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementcssmatches","title":"assertElementCSSMatches","text":""},{"location":"playwrightActions/positiveassertions/#assertelementidmatches","title":"assertElementIdMatches","text":"<p>Description:  This function will assert if the Element has the expected ID</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIdMatches</code> @value PageName Hardcoded Input Browser <code>assertElementIdMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIdMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has ID [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementIdMatches() {\n        String actualIdValue = \"\";\n        try {\n            actualIdValue = Locator.getAttribute(\"id\");\n            assertThat(Locator).hasId(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has 'ID' matching '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have 'ID' matching '\" + Data + \"'. Actual value is '\" + actualIdValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementjspropertymatches","title":"assertElementJSPropertyMatches","text":"<p>Description:  This function will assert if the Element has the expected JS Property attribute</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementJSPropertyMatches</code> @value PageName Hardcoded Input Browser <code>assertElementJSPropertyMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementJSPropertyMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has JS Property [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementJSPropertyMatches() {\n        String attributeName = Data.split(\",\")[0];\n        String attributeValue = Data.split(\",\")[1];\n        try {\n            assertThat(Locator).hasJSProperty(attributeName, attributeValue);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have JS Property attribute '\" + attributeName + \"' with value '\" + attributeValue + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementtextmatches","title":"assertElementTextMatches","text":"<p>Description:  This function will assert if the Element's <code>text</code> matches the expected text</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementTextMatches</code> @value PageName Hardcoded Input Browser <code>assertElementTextMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementTextMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has text [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementTextMatches() {\n        String text = \"\";\n        try {\n            text = Locator.textContent();\n            assertThat(Locator).hasText(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has text '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have text '\" + Data + \"'. Actual text is '\" + text + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementvaluematches","title":"assertElementValueMatches","text":"<p>Description:  This function will assert if the Element's <code>value</code> contains the expected value.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValueMatches</code> @value PageName Hardcoded Input Browser <code>assertElementValueMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValueMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has value [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValueMatches() {\n\n        String value = \"\";\n        try {\n            value = Locator.getAttribute(\"value\");\n            assertThat(Locator).hasValue(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has value '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have value '\" + Data + \"'. Actual value is '\" + value + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementvaluesmatch","title":"assertElementValuesMatch","text":"<p>Description:  This function will assert if the Element's <code>values</code> contains the expected values</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementValuesMatch</code> @value PageName Hardcoded Input Browser <code>assertElementValuesMatch</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementValuesMatch</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] has values [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertElementValuesMatch() {\n        try {\n            String values[] = Data.split(\",\");\n            Pattern[] pattern = new Pattern[values.length];\n            for (int i = 0; i &lt; values.length; i++) {\n                pattern[i] = Pattern.compile(values[i]);\n            }\n            assertThat(Locator).hasValues(pattern);\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] has values '\" + Data + \"'\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] does not have values '\" + Data + \"'\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisattached","title":"assertElementIsAttached","text":"<p>Description:  This function will assert if the Element is attached to the DOM</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsAttached</code> @value PageName Hardcoded Input Browser <code>assertElementIsAttached</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsAttached</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] points to an attached DOM node\")\n    public void assertElementIsAttached() {\n        try {\n            assertThat(Locator).isAttached();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is attached to the DOM\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not attached to the DOM\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementischecked","title":"assertElementIsChecked","text":"<p>Description:  This function will assert if the Element is checked.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsChecked</code> @value PageName Hardcoded Input Browser <code>assertElementIsChecked</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsChecked</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is checked\")\n    public void assertElementIsChecked() {\n        try {\n            assertThat(Locator).isChecked();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is checked\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not checked\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisdisabled","title":"assertElementIsDisabled","text":"<p>Description:  This function will assert if the Element is disabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsDisabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsDisabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsDisabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is disabled\")\n    public void assertElementIsDisabled() {\n        try {\n            assertThat(Locator).isDisabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is disabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not disabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementiseditable","title":"assertElementIsEditable","text":"<p>Description:  This function will assert if the Element is editable.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEditable</code> @value PageName Hardcoded Input Browser <code>assertElementIsEditable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEditable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is editable\")\n    public void assertElementIsEditable() {\n        try {\n            assertThat(Locator).isEditable();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is editable\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not editable\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisempty","title":"assertElementIsEmpty","text":"<p>Description:  This function will assert if the Element is empty.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEmpty</code> @value PageName Hardcoded Input Browser <code>assertElementIsEmpty</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEmpty</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is empty\")\n    public void assertElementIsEmpty() {\n        try {\n            assertThat(Locator).isEmpty();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is empty\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not empty\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisenabled","title":"assertElementIsEnabled","text":"<p>Description:  This function will assert if the Element is enabled.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsEnabled</code> @value PageName Hardcoded Input Browser <code>assertElementIsEnabled</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsEnabled</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is enabled\")\n    public void assertElementIsEnabled() {\n        try {\n            assertThat(Locator).isEnabled();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is enabled\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not enabled\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisfocused","title":"assertElementIsFocused","text":"<p>Description:  This function will assert if the Element is focused.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsFocused</code> @value PageName Hardcoded Input Browser <code>assertElementIsFocused</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsFocused</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is focused\")\n    public void assertElementIsFocused() {\n        try {\n            assertThat(Locator).isFocused();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is focused\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not focused\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementishidden","title":"assertElementIsHidden","text":"<p>Description:  This function will assert if the Element is hidden.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsHidden</code> @value PageName Hardcoded Input Browser <code>assertElementIsHidden</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsHidden</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is hidden\")\n    public void assertElementIsHidden() {\n        try {\n            assertThat(Locator).isHidden();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is hidden\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not hidden\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisinviewport","title":"assertElementIsInViewport","text":"<p>Description:  This function will assert if the Element is in viewport.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsInViewport</code> @value PageName Hardcoded Input Browser <code>assertElementIsInViewport</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsInViewport</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is in viewport\")\n    public void assertElementIsInViewport() {\n        try {\n            assertThat(Locator).isInViewport();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is in viewport\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not in viewport\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertelementisvisible","title":"assertElementIsVisible","text":"<p>Description:  This function will assert if the Element is visible.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertElementIsVisible</code> @value PageName Hardcoded Input Browser <code>assertElementIsVisible</code> Sheet:Column PageName Input from Datasheet Browser <code>assertElementIsVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.PLAYWRIGHT, desc = \"Assert if [&lt;Object&gt;] is visible\")\n    public void assertElementIsVisible() {\n        try {\n            assertThat(Locator).isVisible();\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"] is visible\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        } catch (AssertionFailedError err) {\n            assertionLogging(err, \"[\" + ObjectName + \"] is not visible\");\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertpagetitlematches","title":"assertPageTitleMatches","text":"<p>Description:  This function will assert the Page Title.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertPageTitleMatches</code> @value PageName Hardcoded Input Browser <code>assertPageTitleMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertPageTitleMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Assert if Page has title [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertPageTitleMatches() {\n\n        try {\n            assertThat(Page).hasTitle(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"Page has title matching '\" + Data + \"'\", Status.PASS);\n        } catch (AssertionFailedError e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Assertion Failed\", \"Page does not have title matching '\" + Data + \"'\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertpageurlmatches","title":"assertPageURLMatches","text":"<p>Description:  This function will assert the Page URL.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertPageURLMatches</code> @value PageName Hardcoded Input Browser <code>assertPageURLMatches</code> Sheet:Column PageName Input from Datasheet Browser <code>assertPageURLMatches</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Assert if Page has URL [&lt;Data&gt;]\", input = InputType.YES)\n    public void assertPageURLMatches() {\n\n        try {\n            assertThat(Page).hasURL(Pattern.compile(Data));\n            Report.updateTestLog(Action, \"Page has URL matching '\" + Data + \"'\", Status.PASS);\n        } catch (AssertionFailedError e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Assertion Failed\", \"Page does not have URL matching '\" + Data + \"'\", Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertvariable","title":"assertVariable","text":"<p>Description:  This function will assert if the variable value matched with provided data.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertVariable</code> @value PageName Hardcoded Input Browser <code>assertVariable</code> Sheet:Column PageName Input from Datasheet Browser <code>assertVariable</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER,desc = \"Assert if Key:Value -&gt; [&lt;Data&gt;] is valid\",input = InputType.YES)\n    public void assertVariable() throws RuntimeException {\n        try {\n            String strObj = Data;\n            String[] strTemp = strObj.split(\"=\", 2);\n            String strAns = strTemp[0].matches(\"%.+%\") ? getVar(strTemp[0]) : strTemp[0];\n            if (strAns.equals(strTemp[1])) {\n                System.out.println(\"Condition '\" + Input + \"' is true \");\n                Report.updateTestLog(\"assertVariable\",\n                        \"Variable matched with Provided data\", Status.PASS);\n\n            } else {\n                System.out.println(\"Condition '\" + Input + \"' is false \");\n                throw new Exception(\"Variable did not match with provided data\");\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n            throw new ForcedException(\"assertVariable\", ex.getMessage());\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/positiveassertions/#assertvariablefromdatasheet","title":"assertVariableFromDataSheet","text":"<p>Description:  This function will assert if the variable value matches with given value from datasheet.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>assertVariableFromDataSheet</code> @value PageName Hardcoded Input Browser <code>assertVariableFromDataSheet</code> Sheet:Column PageName Input from Datasheet Browser <code>assertVariableFromDataSheet</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>    @Action(object = ObjectType.BROWSER,desc = \"Assert if  the  variable value matches with given value from datasheet(variable:datasheet-&gt;  [&lt;Data&gt;] )\", input = InputType.YES, condition = InputType.YES)\n    public void assertVariableFromDataSheet() throws RuntimeException {\n        try {\n            String strAns = getVar(Condition);\n            if (strAns.equals(Data)) {\n                System.out.println(\"Variable \" + Condition + \" equals \"\n                        + Input);\n                Report.updateTestLog(Action,\n                        \"Variable is matched with the expected result\", Status.DONE);\n\n            } else {\n                System.out.println(\"Variable \" + Condition + \" is not equal \"\n                        + Input);\n                throw new ForcedException(Action,\n                        \"Variable did not match with provided data\");\n            }\n        } catch (Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);\n            throw new ForcedException(\"assertVariableFromDataSheet\", e.getMessage());\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/","title":"Store Actions","text":""},{"location":"playwrightActions/store/#storeelementtextinvariable","title":"storeElementTextinVariable","text":"<p>Description: This function will store element text in a variable</p> <p>Input Format : %variableName%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementTextinVariable</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's text into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementTextinVariable() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.textContent();\n\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, text);\n                Report.updateTestLog(Action, \"Element text \" + text + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementtextindatasheet","title":"storeElementTextinDataSheet","text":"<p>Description: This function will store element text in a data sheet</p> <p>Input Format : DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementTextinDataSheet</code> DatasheetName:ColumnName PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's text into datasheet:columname [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementTextinDataSheet() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.textContent();\n\n            if (strObj.matches(\".*:.*\")) {\n                String sheetName = strObj.split(\":\", 2)[0];\n                String columnName = strObj.split(\":\", 2)[1];\n                userData.putData(sheetName, columnName, text);\n                Report.updateTestLog(Action, \"Element text [\" + text\n                        + \"] is stored in \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinnerhtmlinvariable","title":"storeElementInnerHTMLinVariable","text":"<p>Description: This function will store element innerHTML in a variable</p> <p>Input Format : %variableName%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInnerHTMLinVariable</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's inner HTML into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInnerHTMLinVariable() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.innerHTML();\n\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, text);\n                Report.updateTestLog(Action, \"Element's inner HTML \" + text + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinnerhtmlindatasheet","title":"storeElementInnerHTMLinDataSheet","text":"<p>Description: This function will store element innerHTML in a data sheet</p> <p>Input Format : DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInnerHTMLinDataSheet</code> DatasheetName:ColumnName PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's inner HTML into datasheet:columname [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInnerHTMLinDataSheet() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.innerHTML();\n\n            if (strObj.matches(\".*:.*\")) {\n                String sheetName = strObj.split(\":\", 2)[0];\n                String columnName = strObj.split(\":\", 2)[1];\n                userData.putData(sheetName, columnName, text);\n                Report.updateTestLog(Action, \"Element's inner HTML [\" + text + \"] is stored in \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinnertextinvariable","title":"storeElementInnerTextinVariable","text":"<p>Description: This function will store element innerText in a variable</p> <p>Input Format : %variableName%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInnerTextinVariable</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's inner Text into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInnerTextinVariable() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.innerText();\n\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, text);\n                Report.updateTestLog(Action, \"Element's inner Text \" + text + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinnertextindatasheet","title":"storeElementInnerTextinDataSheet","text":"<p>Description: This function will store element innerText in a data sheet</p> <p>Input Format : DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInnerTextinDataSheet</code> DatasheetName:ColumnName PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's inner Text into datasheet:columname [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInnerTextinDataSheet() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.innerText();\n\n            if (strObj.matches(\".*:.*\")) {\n                String sheetName = strObj.split(\":\", 2)[0];\n                String columnName = strObj.split(\":\", 2)[1];\n                userData.putData(sheetName, columnName, text);\n                Report.updateTestLog(Action, \"Element's inner Text [\" + text + \"] is stored in \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinputvalueinvariable","title":"storeElementInputValueinVariable","text":"<p>Description: This function will store element Input Value in a variable</p> <p>Input Format : %variableName%</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInputValueinVariable</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's input Value into the Runtime variable: [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInputValueinVariable() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.inputValue();\n\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, text);\n                Report.updateTestLog(Action, \"Element's input Value \" + text + \" is stored in variable \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Invalid variable format\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementinputvalueindatasheet","title":"storeElementInputValueinDataSheet","text":"<p>Description: This function will store element Input Value in a data sheet</p> <p>Input Format : DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementInputValueinDataSheet</code> DatasheetName:ColumnName PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store the [&lt;Object&gt;] element's input Value into datasheet:columname [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementInputValueinDataSheet() {\n        String text = \"\";\n        String strObj = Input;\n        try {\n            text = Locator.inputValue();\n\n            if (strObj.matches(\".*:.*\")) {\n                String sheetName = strObj.split(\":\", 2)[0];\n                String columnName = strObj.split(\":\", 2)[1];\n                userData.putData(sheetName, columnName, text);\n                Report.updateTestLog(Action, \"Element's input Value [\" + text + \"] is stored in \" + strObj, Status.DONE);\n            } else {\n                Report.updateTestLog(Action,\n                        \"Given input [\" + Input + \"] format is invalid. It should be [sheetName:ColumnName]\",\n                        Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementattributeinvariable","title":"storeElementAttributeinVariable","text":"<p>Description: This function will store element's attribute in a variable</p> <p>Input Format : @AttributeName [Can come from a datasheet or a variable as well]</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementAttributeinVariable</code> @AttributeNName %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store [&lt;Object&gt;] element's  attribute into Runtime variable -&gt;  [&lt;Data&gt;]\", input = InputType.YES, condition = InputType.YES)\n    public void storeElementAttributeinVariable() {\n        try {\n            addVar(Condition, Locator.getAttribute(Data));\n            Report.updateTestLog(Action, \"Element's attribute value is stored in variable\", Status.PASS);\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementvalueinvariable","title":"storeElementValueinVariable","text":"<p>Description: This function will store element's value in a variable</p> <p>Input Format :   %variableName%  </p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeElementValueinVariable</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store [&lt;Object&gt;] element's  value  into Runtime variable: -&gt; [&lt;Data&gt;]\", input = InputType.YES)\n    public void storeElementValueinVariable() {\n        try {\n            String strObj = Input;\n            if (strObj.startsWith(\"%\") &amp;&amp; strObj.endsWith(\"%\")) {\n                addVar(strObj, Locator.getAttribute(\"value\"));\n                Report.updateTestLog(Action, \"Element's value \" + Locator.getAttribute(\"value\")\n                        + \" is stored in variable '\" + strObj + \"'\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (PlaywrightException e) {\n            PlaywrightExceptionLogging(e);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storeelementcount","title":"StoreElementCount","text":"<p>Description: This function will store element's count in a variable</p> <p>Input Format :   %variableName%  </p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>StoreElementCount</code> %variableName% PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Store Element count in Variable\", input = InputType.YES)\n    public void StoreElementCount() {\n        try {\n            String variableName = Data;\n            String count = String.valueOf(Locator.count());\n            if (variableName.matches(\"%.*%\")) {\n                addVar(variableName, count);\n                Report.updateTestLog(Action, \"Element count [\"+count+\"] stored in variable [\"+variableName+\"]\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error Storing Element count:\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storevariableindatasheet","title":"storeVariableInDataSheet","text":"<p>Description: This function will store a variable in a data sheet</p> <p>Input Format : DatasheetName:ColumnName</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>storeVariableInDataSheet</code> DatasheetName:ColumnName %variableName% PageName <pre><code>@Action(object = ObjectType.BROWSER, desc = \"store variable value [&lt;Condition&gt;] in data sheet[&lt;Data&gt;]\", input = InputType.YES, condition = InputType.YES)\n    public void storeVariableInDataSheet() {\n        if (Input != null &amp;&amp; Condition != null) {\n            if (!getVar(Condition).isEmpty()) {\n                System.out.println(Condition);\n                String[] sheetDetail = Input.split(\":\");\n                String sheetName = sheetDetail[0];\n                String columnName = sheetDetail[1];\n                userData.putData(sheetName, columnName, getVar(Condition));\n                Report.updateTestLog(Action, \"Value of variable \" + Condition + \" has been stored into \" + \"the data sheet\", Status.DONE);\n            } else {\n                Report.updateTestLog(Action, \"The variable \" + Condition + \" does not contain any value\", Status.FAIL);\n            }\n        } else {\n            Report.updateTestLog(Action, \"Incorrect input format\", Status.DEBUG);\n            System.out.println(\"Incorrect input format \" + Condition);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storevariable","title":"storeVariable","text":"<p>Description: This function will store data in variable</p> <p>Input Format : @Data</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>storeVariable</code> @Data %variableName% PageName <pre><code>@Action(object = ObjectType.BROWSER, desc = \"store  value [&lt;Data&gt;] in Variable [&lt;Condition&gt;]\", input = InputType.YES, condition = InputType.YES)\n    public void storeVariable() {\n        if (Condition.startsWith(\"%\") &amp;&amp; Condition.endsWith(\"%\")) {\n            addVar(Condition, Data);\n            Report.updateTestLog(Action, \"Value\" + Data + \"' is stored in Variable '\" + Condition + \"'\", Status.DONE);\n        } else {\n            Report.updateTestLog(Action, \"Variable format is not correct\", Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/store/#storestoragestate","title":"StoreStorageState","text":"<p>Description: This function will store storage state of the page in json file</p> <p>Input Format : @FilePath</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>StoreStorageState</code> @FilePath <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Store Storage State in JSON file\", input = InputType.YES)\n    public void StoreStorageState() {\n        try {\n            BrowserContext.storageState(new BrowserContext.StorageStateOptions().setPath(Paths.get(Data)));\n            Report.updateTestLog(Action, \"Storage State successfully stored \", Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, ex);\n            Report.updateTestLog(Action, \"Error storing storage state :\" + \"\\n\" + ex.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/","title":"Switch","text":""},{"location":"playwrightActions/switch/#clickandswitchtonewpage","title":"clickAndSwitchToNewPage","text":"<p>Description:  This function will click on the Locator and wait till switch to new page is successful.</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>clickAndSwitchToNewPage</code> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Switch to new Page\", input = InputType.NO)\n    public void clickAndSwitchToNewPage() {\n        try {\n            Page popup = Page.waitForPopup(() -&gt; {\n                Locator.click();\n            });\n            BrowserContext = popup.context();\n            List&lt;Page&gt; pages = popup.context().pages();\n\n            AObject.setPage(pages.get(1));\n            Page = pages.get(1);\n            Page.bringToFront();\n            Driver.setPage(pages.get(1));\n            Report.updateTestLog(Action, \"Successfully switched to new Page\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#createandswitchtonewpage","title":"createAndSwitchToNewPage","text":"<p>Description:  This function will create a new empty page and switch the control to it.</p> <p>Input Format :   @Expected Text should be a Page URL</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>createAndSwitchToNewPage</code> @value PageName Hardcoded Input Browser <code>createAndSwitchToNewPage</code> Sheet:Column PageName Input from Datasheet Browser <code>createAndSwitchToNewPage</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to new Page\", input = InputType.YES)\n    public void createAndSwitchToNewPage() {\n        try {\n            Page page = BrowserContext.newPage();\n            page.navigate(Data);\n            AObject.setPage(page);\n            Page = page;\n            Page.bringToFront();\n            Driver.setPage(page);\n\n            Report.updateTestLog(Action, \"Successfully switched to new Page with URL: \" + Data, Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#createandswitchtonewcontext","title":"createAndSwitchToNewContext","text":"<p>Description:  This function will create a new empty browser context and switch the control to it.</p> <p>Input Format :   @Expected Text should be URL</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>createAndSwitchToNewContext</code> @value PageName Hardcoded Input Browser <code>createAndSwitchToNewContext</code> Sheet:Column PageName Input from Datasheet Browser <code>createAndSwitchToNewContext</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to new Browser Context\", input = InputType.YES)\n    public void createAndSwitchToNewContext() {\n        try {\n            Browser browser = BrowserContext.browser();\n            BrowserContext = browser.newContext();\n            Page = BrowserContext.newPage();\n            Page.navigate(Data);\n            AObject.setPage(Page);\n            Page.bringToFront();\n            Driver.setPage(Page);\n\n            Report.updateTestLog(Action, \"Successfully switched to new Context with URL: \" + Data, Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#switchtopagebyindex","title":"switchToPageByIndex","text":"<p>Description:  This function will switch the control to a page by its index.</p> <p>Input Format :   The index of the target page. Example <code>@0</code> or <code>@1</code> </p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>switchToPageByIndex</code> @value PageName Hardcoded Input Browser <code>switchToPageByIndex</code> Sheet:Column PageName Input from Datasheet Browser <code>switchToPageByIndex</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to Page by index\", input = InputType.YES)\n    public void switchToPageByIndex() {\n        try {\n            int index = Integer.parseInt(Data);\n            List&lt;Page&gt; pages = BrowserContext.pages();\n            AObject.setPage(pages.get(index));\n            Page = pages.get(index);\n            Page.bringToFront();\n            Driver.setPage(pages.get(index));\n\n            Report.updateTestLog(Action, \"Successfully switched to Page [\" + index + \"]\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#switchtocontextbyindex","title":"switchToContextByIndex","text":"<p>Description:  This function will switch the control to a browser context by its index.</p> <p>Input Format :   The index of the target browser context. Example <code>@0</code> or <code>@1</code> </p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>switchToContextByIndex</code> @value <code>optional</code> page timeout in milliseconds PageName Hardcoded Input Browser <code>switchToContextByIndex</code> Sheet:Column <code>optional</code> page timeout in milliseconds PageName Input from Datasheet Browser <code>switchToContextByIndex</code> %dynamicVar% <code>optional</code> page timeout in milliseconds PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to Context by index\", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void switchToContextByIndex() throws InterruptedException {\n        try {\n            int index = Integer.parseInt(Data);\n            List&lt;com.microsoft.playwright.BrowserContext&gt; contexts = BrowserContext.browser().contexts();\n            BrowserContext = contexts.get(index);\n            Thread.sleep(500);\n            int pageIndex = 0;\n            if (!Condition.isEmpty()) {\n                pageIndex = Integer.parseInt(Condition);\n            }\n\n            Page = BrowserContext.pages().get(pageIndex);\n            AObject.setPage(Page);\n            Page.bringToFront();\n            Driver.setPage(Page);\n\n            Report.updateTestLog(Action, \"Successfully switched to Context [\" + index + \"]\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#switchtocontextbypagetitle","title":"switchToContextByPageTitle","text":"<p>Description:  This function will switch the control to a page by its title.</p> <p>Input Format :   @Expected Text should be a Page Title</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>switchToContextByPageTitle</code> @value <code>optional</code> page timeout in milliseconds PageName Hardcoded Input Browser <code>switchToContextByPageTitle</code> Sheet:Column <code>optional</code> page timeout in milliseconds PageName Input from Datasheet Browser <code>switchToContextByPageTitle</code> %dynamicVar% <code>optional</code> page timeout in milliseconds PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to Context by Page Title\", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void switchToContextByPageTitle() {\n        try {\n            List&lt;com.microsoft.playwright.BrowserContext&gt; contexts = BrowserContext.browser().contexts();\n            int pageIndex = 0;\n            boolean found = false;\n            if (!Condition.isEmpty()) {\n                pageIndex = Integer.parseInt(Condition);\n            }\n            for (com.microsoft.playwright.BrowserContext context : contexts) {\n                if (context.pages().get(pageIndex).title().contains(Data)) {\n                    BrowserContext = context;\n                    Page = BrowserContext.pages().get(pageIndex);\n                    AObject.setPage(Page);\n                    Page.bringToFront();\n                    Driver.setPage(Page);\n                    found = true;\n                    Report.updateTestLog(Action, \"Successfully switched to Context with Page title matching [\" + Data + \"]\", Status.DONE);\n                    break;\n                }\n            }\n            if (!found) {\n                Report.updateTestLog(Action, \"Context with Page title matching [\" + Data + \"] could not be found\", Status.FAIL);\n            }\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#switchtocontextbypageurl","title":"switchToContextByPageURL","text":"<p>Description:  This function will switch the control to a page by its current url (or part of it)</p> <p>Input Format :   @Expected Text should be a Page URL</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>switchToContextByPageURL</code> @value <code>optional</code> page timeout in milliseconds PageName Hardcoded Input Browser <code>switchToContextByPageURL</code> Sheet:Column <code>optional</code> page timeout in milliseconds PageName Input from Datasheet Browser <code>switchToContextByPageURL</code> %dynamicVar% <code>optional</code> page timeout in milliseconds PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to Context by Page URL\", input = InputType.YES, condition = InputType.OPTIONAL)\n    public void switchToContextByPageURL() {\n        try {\n            List&lt;com.microsoft.playwright.BrowserContext&gt; contexts = BrowserContext.browser().contexts();\n            int pageIndex = 0;\n            boolean found = false;\n            if (!Condition.isEmpty()) {\n                pageIndex = Integer.parseInt(Condition);\n            }\n            for (com.microsoft.playwright.BrowserContext context : contexts) {\n                if (context.pages().get(pageIndex).url().contains(Data)) {\n                    BrowserContext = context;\n                    Page = BrowserContext.pages().get(pageIndex);\n                    AObject.setPage(Page);\n                    Page.bringToFront();\n                    Driver.setPage(Page);\n                    found = true;\n                    Report.updateTestLog(Action, \"Successfully switched to Context with Page URL matching [\" + Data + \"]\", Status.DONE);\n                    break;\n                }\n            }\n            if (!found) {\n                Report.updateTestLog(Action, \"Context with Page URL matching [\" + Data + \"] could not be found\", Status.FAIL);\n            }\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/switch/#switchtomainpage","title":"switchToMainPage","text":"<p>Description:  This function will switch the control to the main page (Index = 0).</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>switchToMainPage</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Switch to main Page\", input = InputType.NO)\n    public void switchToMainPage() {\n        try {\n            List&lt;Page&gt; pages = BrowserContext.pages();\n\n            AObject.setPage(pages.get(0));\n            Page = pages.get(0);\n            Page.bringToFront();\n            Driver.setPage(pages.get(0));\n\n            Report.updateTestLog(Action, \"Successfully switched to main Page\", Status.DONE);\n        } catch (Exception e) {\n            Report.updateTestLog(Action, \"Something went wrong\" + e.getMessage(), Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/","title":"Text Input Actions","text":""},{"location":"playwrightActions/textinput/#fill","title":"Fill","text":"<p>Description: This function is used to enter data in an <code>input</code> type object.</p> <p>Input Format : @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Fill</code> @value PageName Hardcoded Input Object <code>Fill</code> Sheet:Column PageName Input from Datasheet Object <code>Fill</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the Field [&lt;Object&gt;]\", input = InputType.YES)\n    public void Fill() {\n    try {\n            Locator.clear();\n            Locator.fill(Data);\n            Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\"\n                    + \"[\"+ObjectName+\"]\" + \"'\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#fillifdataexists","title":"FillIfDataExists","text":"<p>Description:  This function is used to <code>enter</code> data in an input type object if data exists, else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>FillIfDataExists</code> @value PageName Hardcoded Input Object <code>FillIfDataExists</code> Sheet:Column PageName Input from Datasheet Object <code>FillIfDataExists</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the [&lt;Object&gt;] if it Data exists\", input = InputType.YES)\n    public void FillIfDataExists() {\n        Page.waitForLoadState();\n        if (!Data.isEmpty()) {\n            Fill();\n        } else {\n            Report.updateTestLog(Action, \"Data not present\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#fillifvisible","title":"FillIfVisible","text":"<p>Description:  This function will check if an element is visible. If the element is visible, data will be entered for that element else that step will be ignored.</p> <p>Input Format :   @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>FillIfVisible</code> @value PageName Hardcoded Input Object <code>FillIfVisible</code> Sheet:Column PageName Input from Datasheet Object <code>FillIfVisible</code> %dynamicVar% PageName Input from variable <p>Inputs in the Input column can be either <code>hardcoded</code> (in this case the data is preceded by a \"@\"), passed from the data sheet (<code>datasheet name : column name</code>) or passed from a variable value (<code>%variable name%</code>), as given in the above example.</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the [&lt;Object&gt;] if visible\", input = InputType.YES)\n    public void FillIfVisible() {\n        Page.waitForLoadState();\n        if (Locator.isVisible()) {\n            Fill();\n        } else {\n            Report.updateTestLog(Action, \"[\" + ObjectName + \"]\" + \" is not visible\", Status.DONE);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#fillandcheck","title":"FillAndCheck","text":"<p>Description: This function is used to enter data in object and check if the element's value matches with the entered value.</p> <p>Input Format : @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>FillAndCheck</code> @value PageName Hardcoded Input Object <code>FillAndCheck</code> Sheet:Column PageName Input from Datasheet Object <code>FillAndCheck</code> %dynamicVar% PageName Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the Field [&lt;Object&gt;] and check [&lt;Data&gt;] matches with [&lt;Object&gt;] value\", input = InputType.YES)\n    public void FillAndCheck() {\n        try {\n            Locator.clear();\n            Locator.fill(Data);\n            if (Locator.getAttribute(\"value\").equals(Data)) {\n                Report.updateTestLog(\"Set\", \"Entered Text '\" + Data + \"' on '\"\n                        + \"[\"+ObjectName+\"]\" + \"'\", Status.DONE);\n            } else {\n                Report.updateTestLog(\"Set\", \"Unable Enter Text '\" + Data\n                        + \"' on '\" + ObjectName + \"'\", Status.FAIL);\n            }\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#fillencrypted","title":"fillEncrypted","text":"<p>Description: This function is used to enter encrypted data to an object</p> <p>Input Format : @Encrypted text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>fillEncrypted</code> @value PageName Hardcoded Input Object <code>fillEncrypted</code> Sheet:Column PageName Input from Datasheet <p>Note: If the data is passed from a data sheet, the data in the datasheet should be <code>encrypted</code>. To manually encrypt a data, select the data cell, right click and select Encrypt</p> <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the Decrypted value [&lt;Data&gt;] in the Field [&lt;Object&gt;]\", input = InputType.YES)\n    public void fillEncrypted() {\n        if (Data != null &amp;&amp; Data.matches(\".* Enc\")) {\n                try {\n                    Locator.clear();\n                    Data = Data.substring(0, Data.lastIndexOf(\" Enc\"));\n                    byte[] valueDecoded = Encryption.getInstance().decrypt(Data).getBytes();\n                    Locator.fill(new String(valueDecoded));\n                    Report.updateTestLog(Action, \"Entered Encrypted Text \" + Data + \" on \" + \"[\"+ObjectName+\"]\", Status.DONE);\n                } catch (Exception ex) {\n                    Report.updateTestLog(Action, ex.getMessage(), Status.FAIL);\n                    Logger.getLogger(TextInput.class.getName()).log(Level.SEVERE, null, ex);\n                }\n\n        } else {\n            Report.updateTestLog(Action, \"Data not encrypted '\" + Data + \"'\", Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#presssequentially","title":"PressSequentially","text":"<p>Description: This function is used to press keys sequentially in an <code>input</code> type object which is adjacent to the provided <code>label</code> type element.</p> <p>Input Format : @Expected Text</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>PressSequentially</code> @value PageName Hardcoded Input Object <code>PressSequentially</code> Sheet:Column PageName Input from Datasheet Object <code>PressSequentially</code> %dynamicVar% PageName Input from variable <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Enter the value [&lt;Data&gt;] in the Field [&lt;Object&gt;]\", input = InputType.YES)\n    public void PressSequentially() {\n        try {\n            Locator.clear();\n            Locator.pressSequentially(Data);\n            Report.updateTestLog(Action, \"Entered Text '\" + Data + \"' on '\"\n                    + \"[\"+ObjectName+\"]\" + \"'\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/textinput/#clear","title":"Clear","text":"<p>Description:  This function is used to clear an input field</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>Clear</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Clear text [&lt;Data&gt;] from object [&lt;Object&gt;].\")\n    public void Clear() {\n        try {\n            Locator.clear();\n            Report.updateTestLog(\"Clear\", \"Cleared Text on '\" + \"[\"+ObjectName+\"]\" + \"'\", Status.DONE);\n        } catch(Exception e) {\n            Logger.getLogger(this.getClass().getName()).log(Level.OFF, null, e);\n            Report.updateTestLog(\"Could not perfom [\"+Action+\"] action\", \"Error: \" + e.getMessage(),Status.FAIL);\n        }\n    }\n</code></pre>"},{"location":"playwrightActions/waitfor/","title":"WaitFor Actions","text":""},{"location":"playwrightActions/waitfor/#waitforelementtobevisible","title":"waitForElementToBeVisible","text":"<p>Description: This function will wait for the element to be visible on page</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>waitForElementToBeVisible</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Wait for [&lt;Object&gt;] to be visible \", condition = InputType.OPTIONAL)\n    public void waitForElementToBeVisible() {\n        waitForElement(\"VISIBLE\", \"Successfully waited for [\" + ObjectName + \"] to be visible\");\n    }\n</code></pre>"},{"location":"playwrightActions/waitfor/#waitforelementtobehidden","title":"waitForElementToBeHidden","text":"<p>Description: This function will wait for the element to be hidden on page</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>waitForElementToBeHidden</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Wait for [&lt;Object&gt;] to be hidden \", condition = InputType.OPTIONAL)\n    public void waitForElementToBeHidden() {\n        waitForElement(\"HIDDEN\", \"Successfully waited for [\" + ObjectName + \"] to be hidden\");\n    }\n</code></pre>"},{"location":"playwrightActions/waitfor/#waitforelementtobeattached","title":"waitForElementToBeAttached","text":"<p>Description: This function will wait for the element to be attached to the DOM</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>waitForElementToBeAttached</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Wait for [&lt;Object&gt;] to be attached to the DOM \", condition = InputType.OPTIONAL)\n    public void waitForElementToBeAttached() {\n        waitForElement(\"ATTACHED\", \"Successfully waited for [\" + ObjectName + \"] to be attached to the DOM\");\n    }\n</code></pre>"},{"location":"playwrightActions/waitfor/#waitforelementtobedetached","title":"waitForElementToBeDetached","text":"<p>Description: This function will wait for the element to be detached from the DOM</p> UsageCorresponding Code ObjectName Action Input Condition Reference Object <code>waitForElementToBeDetached</code> PageName <pre><code>@Action(object = ObjectType.PLAYWRIGHT, desc = \"Wait for [&lt;Object&gt;] to be detached from the DOM \", condition = InputType.OPTIONAL)\n    public void waitForElementToBeDetached() {\n        waitForElement(\"DETACHED\", \"Successfully waited for [\" + ObjectName + \"] to be detached from the DOM\");\n    }\n</code></pre>"},{"location":"playwrightActions/waitfor/#waitforloadstate","title":"waitForLoadState","text":"<p>Description: This function will wait for required load state has been reached</p> UsageCorresponding Code ObjectName Action Input Condition Reference Browser <code>waitForLoadState</code> <pre><code>@Action(object = ObjectType.BROWSER, desc = \"Wait for required load state has been reached\", condition = InputType.OPTIONAL)\n    public void waitForLoadState() {\n        try\n        {\n            Page.waitForLoadState();\n            Report.updateTestLog(Action, \"Successfully waited for required load state has been reached\", Status.DONE);\n        } catch (Exception ex) {\n            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n            Report.updateTestLog(Action, \"Wait Action Failed\", Status.DEBUG);\n        }\n    }\n</code></pre>"},{"location":"recordings/googleChromeRecording/","title":"Google Chrome Recording","text":""},{"location":"recordings/googleChromeRecording/#steps-for-recording-test-flow-using-chrome-recorder","title":"Steps for recording test flow using Chrome Recorder :","text":"<ul> <li> <p>Open Chrome Browser and launch your Application URL.</p> </li> <li> <p>Right click anywhere on the webpage and select inspect or simply press F12. This will open up <code>Chrome Developer Tool</code> at the bottom.</p> </li> </ul> <p></p> <ul> <li> <p>Click on the Recorder option from Developer Tool.</p> </li> <li> <p>Click on Create a new recording.</p> </li> </ul> <p></p> <ul> <li> <p>Give an appropriate Recording Name and check the appropriate Selector Types.</p> </li> <li> <p>Click on Start recording.</p> </li> </ul> <p></p> <ul> <li> <p>Start recording the flow by navigating through application.</p> </li> <li> <p>After completion of the flow, click on End recording.</p> </li> </ul> <p></p> <ul> <li>Select Export &gt; JSON to save the recording as a json file.</li> </ul> <p></p> <p>### Import JSON To Create Automation Test Case Scaffolding :</p> <ul> <li> <p>From the framework UI, navigate to Tools &gt; Import Chrome Recording &gt; Import JSON.</p> </li> <li> <p>Locate JSON file and click [OK].</p> </li> <li> <p>The JSON file is immediately rendered as Scenario and Test Case. All the relevant test steps with all the web objects and test data are imported.</p> </li> </ul> <p></p>"},{"location":"recordings/playwrightRecording/","title":"Playwright Recording","text":"<p>Prerequsite : <code>Maven</code> is installed in the system</p>"},{"location":"recordings/playwrightRecording/#steps-for-recording","title":"Steps for Recording :","text":"<ul> <li> <p>Launch INGenious Playwright Studio</p> </li> <li> <p>Click on the Recorder icon</p> </li> </ul> <p></p> <p>Internally this will call the following <code>mvn</code> command : <code>mvn exec:java -f engine/pom.xml -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=codegen</code></p> <ul> <li>A loader will show up while the playwright-recorder is being loaded</li> </ul> <p>If a new version of Playwright is available, this step will try to download that first. So the recorder can time out - Pay attention to the logs!!</p> <ul> <li> <p>The Playwright Inspector will launch along with chromium browser</p> </li> <li> <p>Enter the URL of the Application Under Test (AUT) in the chromium browser and perform the actions you want to perform on the application</p> </li> <li> <p>You will see the steps getting recorded in the Playwright Inspector</p> </li> <li> <p>Once the recording is done, save the steps in a <code>.txt</code> file   Currently only <code>.txt</code> is supported. Going forward all formats : <code>.java</code>, <code>.cs</code>, <code>.py</code>, <code>.js</code> will be supported for import</p> </li> </ul>"},{"location":"recordings/playwrightRecording/#import-the-recorded-steps-to-create-automation-test-case-scaffolding","title":"Import the recorded steps to create automation test case scaffolding :","text":"<ul> <li> <p>From INGenious Playwright Studio, navigate to Tools &gt; Import Playwright Recording &gt; Import Playwright Recording.</p> </li> <li> <p>Locate the .txt file and click [OK].</p> </li> <li> <p>The file is immediately rendered as Scenario and Test Case. All the relevant test steps with all the web objects and test data are imported.</p> </li> <li> <p>All the objects are loaded in the Object Repository.</p> </li> </ul>"}]}